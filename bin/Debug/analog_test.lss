
bin/Debug/analog_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000dc  00800100  00006418  000064ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006418  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002c4  008001dc  008001dc  00006588  2**0
                  ALLOC
  3 .comment      00000012  00000000  00000000  00006588  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000659c  2**2
                  CONTENTS, READONLY, OCTETS
  5 .debug_aranges 00000320  00000000  00000000  000065e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   0000a19e  00000000  00000000  00006900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00002382  00000000  00000000  00010a9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line   0000a166  00000000  00000000  00012e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_frame  00001134  00000000  00000000  0001cf88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    0000141e  00000000  00000000  0001e0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line_str 00000244  00000000  00000000  0001f4da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 00002531  00000000  00000000  0001f71e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000002b8  00000000  00000000  00021c4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 05 	jmp	0xa68	; 0xa68 <__ctors_end>
       4:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__bad_interrupt>
       8:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__bad_interrupt>
       c:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__bad_interrupt>
      10:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__bad_interrupt>
      14:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__bad_interrupt>
      18:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__bad_interrupt>
      1c:	0c 94 79 25 	jmp	0x4af2	; 0x4af2 <__vector_7>
      20:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__bad_interrupt>
      24:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__bad_interrupt>
      28:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__bad_interrupt>
      2c:	0c 94 58 26 	jmp	0x4cb0	; 0x4cb0 <__vector_11>
      30:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__bad_interrupt>
      34:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__bad_interrupt>
      38:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__bad_interrupt>
      3c:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__bad_interrupt>
      40:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__bad_interrupt>
      44:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__bad_interrupt>
      48:	0c 94 ac 28 	jmp	0x5158	; 0x5158 <__vector_18>
      4c:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__bad_interrupt>
      50:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__bad_interrupt>
      54:	0c 94 2b 0c 	jmp	0x1856	; 0x1856 <__vector_21>
      58:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__bad_interrupt>
      5c:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__bad_interrupt>
      60:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__bad_interrupt>
      64:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__bad_interrupt>

00000068 <__c.0>:
      68:	73 6d 73 3d 6c 6f 77 20 62 61 74 00                 sms=low bat.

00000074 <__c.1>:
      74:	42 61 74 74 65 72 79 20 4c 4f 57 21 21 21 00        Battery LOW!!!.

00000083 <__c.2>:
      83:	63 68 65 63 6b 20 62 61 74 74 65 72 79 00           check battery.

00000091 <__c.4>:
      91:	45 78 74 65 72 6e 61 6c 20 70 6f 77 65 72 20 69     External power i
      a1:	73 20 6f 66 66 00                                   s off.

000000a7 <__c.5>:
      a7:	73 6d 73 3d 70 6f 77 65 72 5f 6f 66 66 00           sms=power_off.

000000b5 <__c.7>:
      b5:	70 6f 77 65 72 2d 2d 2d 00                          power---.

000000be <__c.9>:
      be:	45 78 74 65 72 6e 61 6c 20 70 6f 77 65 72 20 69     External power i
      ce:	73 20 6f 6e 00                                      s on.

000000d3 <__c.10>:
      d3:	73 6d 73 3d 70 6f 77 65 72 20 6f 6e 00              sms=power on.

000000e0 <__c.16>:
      e0:	70 6f 77 65 72 2b 2b 2b 00                          power+++.

000000e9 <__c.19>:
      e9:	42 61 74 74 65 72 79 3d 25 64 25 25 2c 20 00        Battery=%d%%, .

000000f8 <__c.20>:
      f8:	73 69 67 6e 61 6c 5f 67 73 6d 3d 25 64 25 25 3b     signal_gsm=%d%%;
	...

00000109 <__c.21>:
     109:	6d 63 75 3d 25 75 3b 00                             mcu=%u;.

00000111 <__c.22>:
     111:	74 65 6d 70 3d 25 64 43 3b 00                       temp=%dC;.

0000011b <__c.23>:
     11b:	67 75 61 72 64 3d 25 64 3b 00                       guard=%d;.

00000125 <__c.24>:
     125:	74 3d 25 75 64 25 75 68 25 75 6d 25 75 73 3b 00     t=%ud%uh%um%us;.

00000135 <__c.25>:
     135:	64 65 70 6f 73 69 74 3d 25 73 3b 00                 deposit=%s;.

00000141 <__c.26>:
     141:	41 6c 61 72 6d 21 20 49 6e 74 65 72 6e 61 6c 20     Alarm! Internal 
     151:	54 45 4d 50 45 52 41 54 55 52 45 20 3e 20 36 35     TEMPERATURE > 65
     161:	43 20 21 21 21 00                                   C !!!.

00000167 <__c.27>:
     167:	41 6c 61 72 6d 21 20 49 6e 74 65 72 6e 61 6c 20     Alarm! Internal 
     177:	54 45 4d 50 45 52 41 54 55 52 45 21 21 21 00        TEMPERATURE!!!.

00000186 <__c.28>:
     186:	41 6c 61 72 6d 21 20 54 45 4d 50 45 52 41 54 55     Alarm! TEMPERATU
     196:	52 45 21 21 21 00                                   RE!!!.

0000019c <__c.29>:
     19c:	41 6c 61 72 6d 21 20 54 45 4d 50 45 52 41 54 55     Alarm! TEMPERATU
     1ac:	52 45 21 21 21 00                                   RE!!!.

000001b2 <__c.32>:
     1b2:	42 61 74 74 65 72 79 3d 25 64 25 25 2c 20 00        Battery=%d%%, .

000001c1 <__c.33>:
     1c1:	72 73 74 5f 6d 63 75 3d 25 75 3b 00                 rst_mcu=%u;.

000001cd <__c.34>:
     1cd:	47 53 4d 3d 25 64 25 25 3b 00                       GSM=%d%%;.

000001d7 <__c.35>:
     1d7:	54 65 6d 70 5f 65 78 74 3d 25 64 43 3b 00           Temp_ext=%dC;.

000001e5 <__c.36>:
     1e5:	54 65 6d 70 5f 69 6e 74 3d 25 64 43 3b 00           Temp_int=%dC;.

000001f3 <__c.37>:
     1f3:	47 75 61 72 64 3d 25 64 3b 00                       Guard=%d;.

000001fd <__c.38>:
     1fd:	44 65 70 6f 73 69 74 3d 25 73 3b 00                 Deposit=%s;.

00000209 <__c.39>:
     209:	46 4c 41 47 5f 41 4c 41 52 4d 5f 53 4f 53 0d 0a     FLAG_ALARM_SOS..
	...

0000021a <__c.40>:
     21a:	41 4c 41 52 4d 21 20 49 6e 76 61 73 69 6f 6e 21     ALARM! Invasion!
     22a:	21 21 00                                            !!.

0000022d <__c.41>:
     22d:	61 6c 61 72 6d 2e 2e 2e 45 58 54 5f 4d 4f 54 0d     alarm...EXT_MOT.
     23d:	0a 00                                               ..

0000023f <__c.42>:
     23f:	41 4c 41 52 4d 21 20 49 6e 76 61 73 69 6f 6e 21     ALARM! Invasion!
     24f:	21 21 00                                            !!.

00000252 <__c.43>:
     252:	61 6c 61 72 6d 2e 2e 2e 44 4f 4f 52 0d 0a 00        alarm...DOOR...

00000261 <__c.44>:
     261:	41 4c 41 52 4d 21 20 49 6e 76 61 73 69 6f 6e 21     ALARM! Invasion!
     271:	21 21 00                                            !!.

00000274 <__c.45>:
     274:	61 6c 61 72 6d 2e 2e 2e 53 49 4e 47 4c 45 0d 0a     alarm...SINGLE..
	...

00000285 <__c.46>:
     285:	72 73 74 20 6d 6f 74 69 6f 6e 00                    rst motion.

00000290 <__c.47>:
     290:	46 4c 41 47 5f 41 4c 41 52 4d 5f 45 58 54 5f 4d     FLAG_ALARM_EXT_M
     2a0:	4f 54 0d 0a 00                                      OT...

000002a5 <__c.48>:
     2a5:	65 78 74 5f 66 69 72 73 74 5f 6d 6f 74 69 6f 6e     ext_first_motion
	...

000002b6 <__c.50>:
     2b6:	46 4c 41 47 5f 41 4c 41 52 4d 5f 44 4f 4f 52 0d     FLAG_ALARM_DOOR.
     2c6:	0a 00                                               ..

000002c8 <__c.51>:
     2c8:	72 73 74 20 6d 6f 74 69 6f 6e 00                    rst motion.

000002d3 <__c.52>:
     2d3:	46 4c 41 47 5f 41 4c 41 52 4d 5f 53 49 4e 47 4c     FLAG_ALARM_SINGL
     2e3:	45 0d 0a 00                                         E...

000002e7 <__c.53>:
     2e7:	73 69 6e 67 6c 65 5f 66 69 72 73 74 5f 6d 6f 74     single_first_mot
     2f7:	69 6f 6e 00                                         ion.

000002fb <__c.55>:
     2fb:	47 75 61 72 64 20 69 73 20 6f 6e 20 62 79 20 62     Guard is on by b
     30b:	75 74 74 6f 6e 2e 00                                utton..

00000312 <__c.56>:
     312:	4f 4e 00                                            ON.

00000315 <__c.0>:
     315:	54 65 6d 70 65 72 61 74 75 72 65 20 73 65 6e 73     Temperature sens
     325:	6f 72 20 64 65 74 65 63 74 65 64 2e 00              or detected..

00000332 <__c.1>:
     332:	45 72 72 6f 72 21 21 21 20 54 65 6d 70 65 72 61     Error!!! Tempera
     342:	74 75 72 65 20 73 65 6e 73 6f 72 21 00              ture sensor!.

0000034f <__c.0>:
     34f:	65 65 70 72 6f 6d 5f 66 69 72 73 74 5f 73 65 74     eeprom_first_set
	...

00000360 <__c.1>:
     360:	44 65 70 6f 73 69 74 20 3c 20 31 30 20 52 55 42     Deposit < 10 RUB
	...

00000371 <__c.2>:
     371:	44 65 70 6f 73 69 74 20 3c 20 31 30 20 72 75 62     Deposit < 10 rub
	...

00000382 <__c.3>:
     382:	22 0d 0a 00                                         "...

00000386 <__c.4>:
     386:	2a 31 30 31 23 00                                   *101#.

0000038c <__c.5>:
     38c:	41 54 2b 43 55 53 44 3d 31 2c 22 00                 AT+CUSD=1,".

00000398 <__c.6>:
     398:	41 54 2b 44 44 45 54 3d 31 2c 35 30 2c 30 2c 31     AT+DDET=1,50,0,1
     3a8:	0d 0a 00                                            ...

000003ab <__c.7>:
     3ab:	41 54 2b 43 50 4d 53 3d 22 53 4d 22 2c 22 53 4d     AT+CPMS="SM","SM
     3bb:	22 2c 22 53 4d 22 0d 0a 00                          ","SM"...

000003c4 <__c.8>:
     3c4:	41 54 2b 43 4c 49 50 3d 31 0d 0a 00                 AT+CLIP=1...

000003d0 <__c.9>:
     3d0:	41 54 2b 43 4e 4d 49 3d 32 2c 31 2c 30 2c 31 2c     AT+CNMI=2,1,0,1,
     3e0:	30 0d 0a 00                                         0...

000003e4 <__c.10>:
     3e4:	41 54 2b 43 4d 47 46 3d 31 0d 0a 00                 AT+CMGF=1...

000003f0 <__c.11>:
     3f0:	41 54 45 30 0d 0a 00                                ATE0...

000003f7 <__c.12>:
     3f7:	41 54 0d 0a 00                                      AT...

000003fc <__c.14>:
     3fc:	41 54 41 0d 0a 00                                   ATA...

00000402 <__c.15>:
     402:	41 54 2b 43 4d 47 44 41 3d 22 44 45 4c 20 41 4c     AT+CMGDA="DEL AL
     412:	4c 22 0d 0a 00                                      L"...

00000417 <__c.16>:
     417:	41 54 2b 43 4d 47 44 3d 25 64 0d 0a 00              AT+CMGD=%d...

00000424 <__c.17>:
     424:	41 54 2b 43 4d 47 4c 3d 22 52 45 43 20 55 4e 52     AT+CMGL="REC UNR
     434:	45 41 44 22 0d 0a 00                                EAD"...

0000043b <__c.18>:
     43b:	64 65 6c 5f 73 6d 73 5f 69 6e 64 00                 del_sms_ind.

00000447 <__c.19>:
     447:	41 54 2b 43 4d 47 44 3d 25 64 0d 0a 00              AT+CMGD=%d...

00000454 <__c.20>:
     454:	41 54 2b 43 4d 53 53 3d 25 64 2c 22 25 73 22 0d     AT+CMSS=%d,"%s".
     464:	0a 00                                               ..

00000466 <__c.21>:
     466:	41 54 2b 43 4d 47 4c 3d 22 53 54 4f 20 55 4e 53     AT+CMGL="STO UNS
     476:	45 4e 54 22 0d 0a 00                                ENT"...

0000047d <__c.25>:
     47d:	2b 44 54 4d 46 3a 00                                +DTMF:.

00000484 <__c.26>:
     484:	2b 43 4c 49 50 3a 00                                +CLIP:.

0000048b <__c.27>:
     48b:	2b 43 4d 54 49 3a 00                                +CMTI:.

00000492 <__c.28>:
     492:	41 54 2b 43 4d 47 53 3d 22 25 73 22 0d 0a 00        AT+CMGS="%s"...

000004a1 <__c.29>:
     4a1:	41 54 2b 43 4d 47 57 3d 22 25 73 22 0d 0a 00        AT+CMGW="%s"...

000004b0 <__c.30>:
     4b0:	45 52 52 4f 52 00                                   ERROR.

000004b6 <__c.31>:
     4b6:	41 54 2b 43 4d 47 53 3d 22 25 73 22 0d 0a 00        AT+CMGS="%s"...

000004c5 <__c.32>:
     4c5:	41 54 2b 43 53 51 0d 00                             AT+CSQ..

000004cd <__c.34>:
     4cd:	2b 43 52 45 47 3a 00                                +CREG:.

000004d4 <__c.35>:
     4d4:	41 54 2b 43 52 45 47 3f 0d 0a 00                    AT+CREG?...

000004df <__c.36>:
     4df:	6e 6f 74 20 72 65 67 20 67 73 6d 00                 not reg gsm.

000004eb <__c.39>:
     4eb:	41 54 48 0d 0a 00                                   ATH...

000004f1 <__c.40>:
     4f1:	77 61 69 74 20 73 74 72 20 74 69 6d 65 20 65 6e     wait str time en
     501:	64 00                                               d.

00000503 <__c.41>:
     503:	2b 44 54 4d 46 3a 00                                +DTMF:.

0000050a <__c.42>:
     50a:	45 52 52 4f 52 00                                   ERROR.

00000510 <__c.43>:
     510:	2b 43 4c 43 43 3a 00                                +CLCC:.

00000517 <__c.44>:
     517:	41 54 2b 43 4c 43 43 0d 0a 00                       AT+CLCC...

00000521 <__c.45>:
     521:	0d 0a 00                                            ...

00000524 <__c.46>:
     524:	2e 61 6d 72 22 2c 30 2c 31 30 30 2c 00              .amr",0,100,.

00000531 <__c.47>:
     531:	41 54 2b 43 52 45 43 3d 34 2c 22 43 3a 5c 55 73     AT+CREC=4,"C:\Us
     541:	65 72 5c 00                                         er\.

00000545 <__c.48>:
     545:	41 54 2b 43 52 45 43 3d 35 0d 0a 00                 AT+CREC=5...

00000551 <__c.49>:
     551:	45 52 52 4f 52 00                                   ERROR.

00000557 <__c.50>:
     557:	63 6d 64 20 74 69 6d 65 20 65 6e 64 00              cmd time end.

00000564 <__c.51>:
     564:	41 4c 41 52 4d 21 20 4d 6f 74 69 6f 6e 21 20 69     ALARM! Motion! i
     574:	6e 74 00                                            nt.

00000577 <__c.52>:
     577:	41 4c 41 52 4d 21 20 49 6e 76 61 73 69 6f 6e 21     ALARM! Invasion!
     587:	20 44 6f 6f 72 00                                    Door.

0000058d <__c.53>:
     58d:	41 4c 41 52 4d 21 20 4d 6f 74 69 6f 6e 21 20 65     ALARM! Motion! e
     59d:	78 74 00                                            xt.

000005a0 <__c.54>:
     5a0:	4e 6f 20 61 6e 73 77 65 72 21 00                    No answer!.

000005ab <__c.55>:
     5ab:	43 61 6c 6c 20 65 6e 64 65 64 00                    Call ended.

000005b6 <__c.56>:
     5b6:	43 41 4c 4c 5f 4f 55 54 5f 44 49 41 4c 20 2e 2e     CALL_OUT_DIAL ..
     5c6:	2e 20 00                                            . .

000005c9 <__c.57>:
     5c9:	41 54 44 25 73 3b 0d 0a 00                          ATD%s;...

000005d2 <__c.0>:
     5d2:	49 6e 69 74 20 4f 6b 00                             Init Ok.

000005da <__c.1>:
     5da:	73 65 74 75 70 5f 6f 6b 00                          setup_ok.

000005e3 <__c.2>:
     5e3:	53 74 61 72 74 2e 2e 2e 00                          Start....

000005ec <__c.0>:
     5ec:	65 78 74 5f 74 65 6d 70 3d 25 64 3b 00              ext_temp=%d;.

000005f9 <__c.1>:
     5f9:	65 78 74 5f 74 65 6d 70 3b 00                       ext_temp;.

00000603 <__c.2>:
     603:	61 63 63 65 70 74 5f 73 6d 73 3d 25 64 3b 00        accept_sms=%d;.

00000612 <__c.3>:
     612:	61 63 63 65 70 74 5f 73 6d 73 3b 00                 accept_sms;.

0000061e <__c.4>:
     61e:	61 63 63 65 70 74 5f 63 61 6c 6c 73 3d 25 64 3b     accept_calls=%d;
	...

0000062f <__c.5>:
     62f:	61 63 63 65 70 74 5f 63 61 6c 6c 73 3b 00           accept_calls;.

0000063d <__c.6>:
     63d:	61 75 74 6f 67 75 61 72 64 3d 25 64 3b 00           autoguard=%d;.

0000064b <__c.7>:
     64b:	61 75 74 6f 67 75 61 72 64 3b 00                    autoguard;.

00000656 <__c.8>:
     656:	70 61 75 73 65 5f 61 6c 61 72 6d 3d 25 75 73 3b     pause_alarm=%us;
	...

00000667 <__c.9>:
     667:	70 61 75 73 65 5f 61 6c 61 72 6d 3b 00              pause_alarm;.

00000674 <__c.10>:
     674:	69 6e 74 65 72 76 61 6c 5f 61 66 74 65 72 5f 62     interval_after_b
     684:	75 74 74 6f 6e 5f 6d 3d 25 75 6d 3b 00              utton_m=%um;.

00000691 <__c.11>:
     691:	69 6e 74 65 72 76 61 6c 3b 00                       interval;.

0000069b <__c.12>:
     69b:	3b 00                                               ;.

0000069d <__c.13>:
     69d:	25 73 2c 00                                         %s,.

000006a1 <__c.14>:
     6a1:	70 68 6f 6e 65 73 3d 00                             phones=.

000006a9 <__c.15>:
     6a9:	70 68 6f 6e 65 73 3b 00                             phones;.

000006b1 <__c.16>:
     6b1:	62 75 7a 7a 65 72 3d 00                             buzzer=.

000006b9 <__c.17>:
     6b9:	65 78 74 5f 74 65 6d 70 3d 00                       ext_temp=.

000006c3 <__c.18>:
     6c3:	67 75 61 72 64 5f 72 65 70 6f 72 74 3d 00           guard_report=.

000006d1 <__c.19>:
     6d1:	70 6f 77 65 72 5f 72 65 70 6f 72 74 3d 00           power_report=.

000006df <__c.20>:
     6df:	73 6d 73 3d 00                                      sms=.

000006e4 <__c.21>:
     6e4:	63 61 6c 6c 73 3d 00                                calls=.

000006eb <__c.22>:
     6eb:	61 75 74 6f 67 75 61 72 64 3d 00                    autoguard=.

000006f6 <__c.23>:
     6f6:	66 69 72 73 74 6d 3d 00                             firstm=.

000006fe <__c.24>:
     6fe:	67 75 61 72 64 3d 00                                guard=.

00000705 <__c.25>:
     705:	69 6e 74 65 72 76 61 6c 3d 00                       interval=.

0000070f <__c.26>:
     70f:	70 61 75 73 65 5f 61 6c 61 72 6d 3d 00              pause_alarm=.

0000071c <__c.27>:
     71c:	41 63 63 65 73 73 20 64 65 6e 69 65 64 00           Access denied.

0000072a <__c.28>:
     72a:	53 65 74 20 61 64 6d 69 6e 73 20 6f 6b 00           Set admins ok.

00000738 <__c.29>:
     738:	53 65 74 20 61 64 6d 69 6e 73 20 6f 6b 00           Set admins ok.

00000746 <__c.30>:
     746:	70 68 6f 6e 65 73 3d 00                             phones=.

0000074e <__c.31>:
     74e:	41 63 63 65 73 73 20 64 65 6e 69 65 64 00           Access denied.

0000075c <__c.32>:
     75c:	72 65 70 6f 72 74 3b 00                             report;.

00000764 <__c.33>:
     764:	41 63 63 65 73 73 20 64 65 6e 69 65 64 00           Access denied.

00000772 <__c.34>:
     772:	68 65 6c 70 73 65 74 3b 00                          helpset;.

0000077b <__c.35>:
     77b:	41 63 63 65 73 73 20 64 65 6e 69 65 64 00           Access denied.

00000789 <__c.36>:
     789:	68 65 6c 70 67 65 74 3b 00                          helpget;.

00000792 <__c.37>:
     792:	41 63 63 65 73 73 20 64 65 6e 69 65 64 00           Access denied.

000007a0 <__c.38>:
     7a0:	68 65 6c 70 3b 00                                   help;.

000007a6 <__c.39>:
     7a6:	52 65 73 65 74 20 63 6f 6d 6d 61 6e 64 20 61 63     Reset command ac
     7b6:	63 65 70 74 65 64 2e 00                             cepted..

000007be <__c.40>:
     7be:	41 63 63 65 73 73 20 64 65 6e 69 65 64 00           Access denied.

000007cc <__c.41>:
     7cc:	72 65 62 6f 6f 74 3b 00                             reboot;.

000007d4 <__c.42>:
     7d4:	44 65 76 69 63 65 20 72 65 73 65 74 20 64 65 66     Device reset def
     7e4:	61 75 6c 74 2c 20 73 65 6e 64 3a 20 70 68 6f 6e     ault, send: phon
     7f4:	65 73 3d 4e 55 4d 42 45 52 5f 50 48 4f 4e 45 53     es=NUMBER_PHONES
     804:	31 2c 4e 55 4d 42 45 52 5f 50 48 4f 4e 45 53 32     1,NUMBER_PHONES2
     814:	3b 00                                               ;.

00000816 <__c.43>:
     816:	41 63 63 65 73 73 20 64 65 6e 69 65 64 00           Access denied.

00000824 <__c.44>:
     824:	72 65 73 65 74 64 65 66 61 75 6c 74 3b 00           resetdefault;.

00000832 <__c.46>:
     832:	65 72 72 6f 72 00                                   error.

00000838 <__c.47>:
     838:	73 65 6e 64 5f 73 6d 73 0d 0a 00                    send_sms...

00000843 <__c.48>:
     843:	41 63 63 65 73 73 20 64 65 6e 69 65 64 00           Access denied.

00000851 <__c.49>:
     851:	67 65 74 3a 00                                      get:.

00000856 <__c.50>:
     856:	65 72 72 6f 72 00                                   error.

0000085c <__c.51>:
     85c:	6f 6b 00                                            ok.

0000085f <__c.52>:
     85f:	41 63 63 65 73 73 20 64 65 6e 69 65 64 00           Access denied.

0000086d <__c.53>:
     86d:	73 65 74 3a 00                                      set:.

00000872 <__c.54>:
     872:	6e 6f 74 20 70 68 6f 6e 65 00                       not phone.

0000087c <__c.55>:
     87c:	70 68 6f 6e 65 20 6f 6b 00                          phone ok.

00000885 <help_set>:
     885:	73 65 74 3a 69 6e 74 65 72 76 61 6c 3d 3b 63 61     set:interval=;ca
     895:	6c 6c 73 3d 3b 73 6d 73 3d 3b 67 75 61 72 64 3d     lls=;sms=;guard=
     8a5:	3b 61 75 74 6f 67 75 61 72 64 3d 3b 70 6f 77 65     ;autoguard=;powe
     8b5:	72 5f 72 65 70 6f 72 74 3d 3b 62 75 7a 7a 65 72     r_report=;buzzer
     8c5:	3d 3b 67 75 61 72 64 5f 72 65 70 6f 72 74 3d 3b     =;guard_report=;
     8d5:	65 78 74 5f 74 65 6d 70 3d 3b 00 00 00 00 00 00     ext_temp=;......
	...

00000926 <help_get>:
     926:	67 65 74 3a 70 68 6f 6e 65 73 3b 63 61 6c 6c 73     get:phones;calls
     936:	3b 73 6d 73 3b 69 6e 74 65 72 76 61 6c 3b 70 6f     ;sms;interval;po
     946:	77 65 72 5f 72 65 70 6f 72 74 3b 65 78 74 5f 74     wer_report;ext_t
     956:	65 6d 70 3b 00 00 00 00 00 00 00 00 00 00 00 00     emp;............
	...

000009c7 <help_text>:
     9c7:	68 65 6c 70 73 65 74 3b 68 65 6c 70 67 65 74 3b     helpset;helpget;
     9d7:	72 65 70 6f 72 74 3b 70 68 6f 6e 65 73 3b 72 65     report;phones;re
     9e7:	62 6f 6f 74 3b 72 65 73 65 74 64 65 66 61 75 6c     boot;resetdefaul
     9f7:	74 3b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     t;..............
	...

00000a68 <__ctors_end>:
     a68:	11 24       	eor	r1, r1
     a6a:	1f be       	out	0x3f, r1	; 63
     a6c:	cf ef       	ldi	r28, 0xFF	; 255
     a6e:	d8 e0       	ldi	r29, 0x08	; 8
     a70:	de bf       	out	0x3e, r29	; 62
     a72:	cd bf       	out	0x3d, r28	; 61

00000a74 <__do_copy_data>:
     a74:	11 e0       	ldi	r17, 0x01	; 1
     a76:	a0 e0       	ldi	r26, 0x00	; 0
     a78:	b1 e0       	ldi	r27, 0x01	; 1
     a7a:	e8 e1       	ldi	r30, 0x18	; 24
     a7c:	f4 e6       	ldi	r31, 0x64	; 100
     a7e:	02 c0       	rjmp	.+4      	; 0xa84 <__do_copy_data+0x10>
     a80:	05 90       	lpm	r0, Z+
     a82:	0d 92       	st	X+, r0
     a84:	ac 3d       	cpi	r26, 0xDC	; 220
     a86:	b1 07       	cpc	r27, r17
     a88:	d9 f7       	brne	.-10     	; 0xa80 <__do_copy_data+0xc>

00000a8a <__do_clear_bss>:
     a8a:	24 e0       	ldi	r18, 0x04	; 4
     a8c:	ac ed       	ldi	r26, 0xDC	; 220
     a8e:	b1 e0       	ldi	r27, 0x01	; 1
     a90:	01 c0       	rjmp	.+2      	; 0xa94 <.do_clear_bss_start>

00000a92 <.do_clear_bss_loop>:
     a92:	1d 92       	st	X+, r1

00000a94 <.do_clear_bss_start>:
     a94:	a0 3a       	cpi	r26, 0xA0	; 160
     a96:	b2 07       	cpc	r27, r18
     a98:	e1 f7       	brne	.-8      	; 0xa92 <.do_clear_bss_loop>
     a9a:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <main>
     a9e:	0c 94 f9 31 	jmp	0x63f2	; 0x63f2 <_exit>

00000aa2 <__bad_interrupt>:
     aa2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000aa6 <owire_init>:

#include "main.h"

unsigned char owire_init()					// Функция инициализации. Возвращает 1 если присктствует устройство на шине, иначе 0
{
    cli();									// Запрещаем прерывания на время работы функции, дабы те не вмешались во временные задержки. Можно убрать если не использовать прерывания
     aa6:	f8 94       	cli
    unsigned char i;						// Переменная для цикла
    OWIRE_0;								// Прижимаем линию к GND
     aa8:	20 9a       	sbi	0x04, 0	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     aaa:	84 e7       	ldi	r24, 0x74	; 116
     aac:	93 e0       	ldi	r25, 0x03	; 3
     aae:	01 97       	sbiw	r24, 0x01	; 1
     ab0:	f1 f7       	brne	.-4      	; 0xaae <owire_init+0x8>
     ab2:	00 c0       	rjmp	.+0      	; 0xab4 <owire_init+0xe>
    _delay_us(480);							// Топчимся 480 мкс
    OWIRE_1;								// Отпускаем линию
     ab4:	20 98       	cbi	0x04, 0	; 4
     ab6:	95 e0       	ldi	r25, 0x05	; 5
     ab8:	9a 95       	dec	r25
     aba:	f1 f7       	brne	.-4      	; 0xab8 <owire_init+0x12>
     abc:	84 e6       	ldi	r24, 0x64	; 100
    _delay_us(2);							// Тпчимся 2 мкс

    for (i=0; i<100; i++)					// Ждём не менее 60 мкс до появления импульса присутствия. (Линия должна прижаться Слейвом к GND)
    {
        if (!(PIN_W & (1<<PIN_N)))			// Читаем уровень на линии. Если 0 то бежим в цикл ниже
     abe:	18 9b       	sbis	0x03, 0	; 3
     ac0:	08 c0       	rjmp	.+16     	; 0xad2 <owire_init+0x2c>
     ac2:	92 e0       	ldi	r25, 0x02	; 2
     ac4:	9a 95       	dec	r25
     ac6:	f1 f7       	brne	.-4      	; 0xac4 <owire_init+0x1e>
     ac8:	00 c0       	rjmp	.+0      	; 0xaca <owire_init+0x24>
    for (i=0; i<100; i++)					// Ждём не менее 60 мкс до появления импульса присутствия. (Линия должна прижаться Слейвом к GND)
     aca:	81 50       	subi	r24, 0x01	; 1
     acc:	c1 f7       	brne	.-16     	; 0xabe <owire_init+0x18>
            sei();							// Разрешаем прерывания. Мы же их запрещали. Так же можно выкинуть от сюда
            return 1;						// Возвращаем 1 если хоть одно устройство присутствует на шине
        }
        _delay_us(1);						// Немного потупим
    }
    sei();									// Разрешаем прерывания. Это если устройств не обнаружено, то мы в тело ИФа не зайдем.
     ace:	78 94       	sei
    return 0;								// Возвращаем 0, устройств на шине нэма.
}
     ad0:	08 95       	ret
            while (!(PIN_W & (1<<PIN_N)));	// Если проишел импульс присутствия, ждём его окончания. То есть ждем 1
     ad2:	93 b1       	in	r25, 0x03	; 3
     ad4:	89 2f       	mov	r24, r25
     ad6:	81 70       	andi	r24, 0x01	; 1
     ad8:	90 ff       	sbrs	r25, 0
     ada:	fb cf       	rjmp	.-10     	; 0xad2 <owire_init+0x2c>
            sei();							// Разрешаем прерывания. Мы же их запрещали. Так же можно выкинуть от сюда
     adc:	78 94       	sei
            return 1;						// Возвращаем 1 если хоть одно устройство присутствует на шине
     ade:	08 95       	ret

00000ae0 <owire_write>:


void owire_write(unsigned char b)			// Функция для передачи байта в шину
{
    cli();									// Запрещаем прерывания. Чтоб не мешали.
     ae0:	f8 94       	cli
     ae2:	98 e0       	ldi	r25, 0x08	; 8
     ae4:	0d c0       	rjmp	.+26     	; 0xb00 <owire_write+0x20>
            OWIRE_1;						// Теперь отпускаем линию, пусть резистор работает
            _delay_us(64);					// Выжидаем в таком состоянии 64 мкс.
        }
        else								// Если бит был равен 0
        {
            OWIRE_0;						// Прижимаем линию к GND
     ae6:	20 9a       	sbi	0x04, 0	; 4
     ae8:	23 e9       	ldi	r18, 0x93	; 147
     aea:	2a 95       	dec	r18
     aec:	f1 f7       	brne	.-4      	; 0xaea <owire_write+0xa>
     aee:	00 c0       	rjmp	.+0      	; 0xaf0 <owire_write+0x10>
            _delay_us(60);					// Ждем 60 мкс
            OWIRE_1;						// Отпускаем линию
     af0:	20 98       	cbi	0x04, 0	; 4
     af2:	28 e1       	ldi	r18, 0x18	; 24
     af4:	2a 95       	dec	r18
     af6:	f1 f7       	brne	.-4      	; 0xaf4 <owire_write+0x14>
     af8:	00 c0       	rjmp	.+0      	; 0xafa <owire_write+0x1a>
            _delay_us(10);					// Ждем 10 мкс
        }
        b>>=1;								// Двигаем вправо наш передоваемый байт на 1 разряд дабы передать следующий байт
     afa:	86 95       	lsr	r24
    for(i=0; i<8; i++)						// Восемь раз выполняем код
     afc:	91 50       	subi	r25, 0x01	; 1
     afe:	61 f0       	breq	.+24     	; 0xb18 <owire_write+0x38>
        if(temp)							// Если этот бит равен 1 то пихаем 1 в шину. Делается это так
     b00:	80 ff       	sbrs	r24, 0
     b02:	f1 cf       	rjmp	.-30     	; 0xae6 <owire_write+0x6>
            OWIRE_0;						// Сначала прижимаем линию к GND
     b04:	20 9a       	sbi	0x04, 0	; 4
     b06:	2f e0       	ldi	r18, 0x0F	; 15
     b08:	2a 95       	dec	r18
     b0a:	f1 f7       	brne	.-4      	; 0xb08 <owire_write+0x28>
            OWIRE_1;						// Теперь отпускаем линию, пусть резистор работает
     b0c:	20 98       	cbi	0x04, 0	; 4
     b0e:	2d e9       	ldi	r18, 0x9D	; 157
     b10:	2a 95       	dec	r18
     b12:	f1 f7       	brne	.-4      	; 0xb10 <owire_write+0x30>
     b14:	00 00       	nop
	}
	else
		__ticks = (uint8_t)__tmp;
	_delay_loop_1(__ticks);
#endif
}
     b16:	f1 cf       	rjmp	.-30     	; 0xafa <owire_write+0x1a>
    }
    sei();									// Разрешаем прерывания
     b18:	78 94       	sei
}
     b1a:	08 95       	ret

00000b1c <owire_read_bit>:

unsigned char owire_read_bit()				// Функция чтения бита из шины. По сути эту функцию можно интегрировать в функцию чтения байта. Я ее создал для чтения уровня, но не использую
{
    cli();									// Запрещаем прерывания
     b1c:	f8 94       	cli
    unsigned char bit;						// Переменная в которой будет хрониться	бит
    OWIRE_0;								// Прижимаем линию к GND
     b1e:	20 9a       	sbi	0x04, 0	; 4
	__builtin_avr_delay_cycles(__ticks_dc);
     b20:	85 e0       	ldi	r24, 0x05	; 5
     b22:	8a 95       	dec	r24
     b24:	f1 f7       	brne	.-4      	; 0xb22 <owire_read_bit+0x6>
    _delay_us(2);							// Ждем 2 мкс
    OWIRE_1;								// Отпускаем линию
     b26:	20 98       	cbi	0x04, 0	; 4
     b28:	9c e0       	ldi	r25, 0x0C	; 12
     b2a:	9a 95       	dec	r25
     b2c:	f1 f7       	brne	.-4      	; 0xb2a <owire_read_bit+0xe>
     b2e:	00 00       	nop
    _delay_us(5);							// Ждем 5 мкс
    bit = PIN_W & (1<<PIN_N);					// Читаем уровень на линии и записываем значение в переменную
     b30:	83 b1       	in	r24, 0x03	; 3
     b32:	94 ec       	ldi	r25, 0xC4	; 196
     b34:	9a 95       	dec	r25
     b36:	f1 f7       	brne	.-4      	; 0xb34 <owire_read_bit+0x18>
     b38:	00 c0       	rjmp	.+0      	; 0xb3a <owire_read_bit+0x1e>
    _delay_us(80);							// Ждем 80 мкс. Длинна передачи бита
    sei();									// Разрешаем прерывания
     b3a:	78 94       	sei
    return bit;								// Возвращаем значение бита
}
     b3c:	81 70       	andi	r24, 0x01	; 1
     b3e:	08 95       	ret

00000b40 <owire_read>:


unsigned char owire_read()					// Функция чтения байта
{
     b40:	0f 93       	push	r16
     b42:	1f 93       	push	r17
     b44:	cf 93       	push	r28
     b46:	df 93       	push	r29
    cli();									// Запрещаем прерывания
     b48:	f8 94       	cli
     b4a:	08 e0       	ldi	r16, 0x08	; 8
     b4c:	10 e0       	ldi	r17, 0x00	; 0
    unsigned byte = 0, i;					// Создаем переменные буфера(обязательно обнулить, а то запишется мусор) и для цикла
     b4e:	d0 e0       	ldi	r29, 0x00	; 0
     b50:	c0 e0       	ldi	r28, 0x00	; 0
     b52:	03 c0       	rjmp	.+6      	; 0xb5a <owire_read+0x1a>
    for (i=0; i<8; i++)						// Условие цикла
     b54:	01 50       	subi	r16, 0x01	; 1
     b56:	11 09       	sbc	r17, r1
     b58:	41 f0       	breq	.+16     	; 0xb6a <owire_read+0x2a>
    {
        byte >>= 1;							// Двигаем бит по нашему байту вправо
     b5a:	d6 95       	lsr	r29
     b5c:	c7 95       	ror	r28
        if (owire_read_bit())				// Читаем бит. Вот здесь можно читать уровень, а битовую функцию выкинуть. Лишний код етит
     b5e:	0e 94 8e 05 	call	0xb1c	; 0xb1c <owire_read_bit>
     b62:	88 23       	and	r24, r24
     b64:	b9 f3       	breq	.-18     	; 0xb54 <owire_read+0x14>
            byte |= 0x80;						// Логическое или с нашим байтом. Если пришла 1, то запишем ее
     b66:	c0 68       	ori	r28, 0x80	; 128
     b68:	f5 cf       	rjmp	.-22     	; 0xb54 <owire_read+0x14>
    }
    sei();									// Разрешить прерывания
     b6a:	78 94       	sei
    return byte;							// Возвращаем принятый байт
}
     b6c:	8c 2f       	mov	r24, r28
     b6e:	df 91       	pop	r29
     b70:	cf 91       	pop	r28
     b72:	1f 91       	pop	r17
     b74:	0f 91       	pop	r16
     b76:	08 95       	ret

00000b78 <get_18x20_temperature>:

int8_t get_18x20_temperature(void)
{
     b78:	cf 93       	push	r28
     b7a:	df 93       	push	r29
    unsigned char temp[2];							// Массив для получения данных из датчика. Смешно, да. Вообще он должен быть на 9 ячеек, так как память датчика содержит 9 байт
    int8_t temper;
    owire_init();							// Сброс датчика
     b7c:	0e 94 53 05 	call	0xaa6	; 0xaa6 <owire_init>
    owire_write(0xCC);						// Без РОМ кода. Широковещательная команда
     b80:	8c ec       	ldi	r24, 0xCC	; 204
     b82:	0e 94 70 05 	call	0xae0	; 0xae0 <owire_write>
    owire_write(0x44);						// Команда начать преобразование температуры
     b86:	84 e4       	ldi	r24, 0x44	; 68
     b88:	0e 94 70 05 	call	0xae0	; 0xae0 <owire_write>
    // Тупим пока датчик пыхтит с преобразованием и укладки данных к себе в память
    while (!(PIN_W & (1<<PIN_N))){;};
     b8c:	18 9b       	sbis	0x03, 0	; 3
     b8e:	fe cf       	rjmp	.-4      	; 0xb8c <get_18x20_temperature+0x14>
    owire_init();							// Сброс датчика.
     b90:	0e 94 53 05 	call	0xaa6	; 0xaa6 <owire_init>
    owire_write(0xCC);						// Опять орем на всех сразу
     b94:	8c ec       	ldi	r24, 0xCC	; 204
     b96:	0e 94 70 05 	call	0xae0	; 0xae0 <owire_write>
    owire_write(0xBE);						// Команда передать данные от датчика к мастеру
     b9a:	8e eb       	ldi	r24, 0xBE	; 190
     b9c:	0e 94 70 05 	call	0xae0	; 0xae0 <owire_write>

    temp[0]=owire_read();					// Читаем младший байт температуры
     ba0:	0e 94 a0 05 	call	0xb40	; 0xb40 <owire_read>
     ba4:	c8 2f       	mov	r28, r24
    temp[1]=owire_read();					// Читаем старший байт температуры
     ba6:	0e 94 a0 05 	call	0xb40	; 0xb40 <owire_read>
     baa:	48 2f       	mov	r20, r24

    if(temp[1]&0x80)						// Если температура минусовая
     bac:	88 23       	and	r24, r24
     bae:	8c f0       	brlt	.+34     	; 0xbd2 <get_18x20_temperature+0x5a>
    {
        temp[0] = (~temp[0])+1;				// Побитное или + 1
        temp[1] = ~temp[1];					// Побитное или
    }

    temper = (int8_t) (((temp[1]<<8)|(temp[0]*5))/10);	// Эта абра-кадабра кладет в переменную temper значение температуры умноженной на 10. Например 23,5 градусов будут в виде 235
     bb0:	d0 e0       	ldi	r29, 0x00	; 0
     bb2:	ce 01       	movw	r24, r28
     bb4:	88 0f       	add	r24, r24
     bb6:	99 1f       	adc	r25, r25
     bb8:	88 0f       	add	r24, r24
     bba:	99 1f       	adc	r25, r25
     bbc:	8c 0f       	add	r24, r28
     bbe:	9d 1f       	adc	r25, r29
     bc0:	94 2b       	or	r25, r20
     bc2:	6a e0       	ldi	r22, 0x0A	; 10
     bc4:	70 e0       	ldi	r23, 0x00	; 0
     bc6:	0e 94 87 29 	call	0x530e	; 0x530e <__divmodhi4>
     bca:	86 2f       	mov	r24, r22
    return temper;
}
     bcc:	df 91       	pop	r29
     bce:	cf 91       	pop	r28
     bd0:	08 95       	ret
        temp[0] = (~temp[0])+1;				// Побитное или + 1
     bd2:	c1 95       	neg	r28
        temp[1] = ~temp[1];					// Побитное или
     bd4:	40 95       	com	r20
     bd6:	ec cf       	rjmp	.-40     	; 0xbb0 <get_18x20_temperature+0x38>

00000bd8 <check_guard>:
    }
}

//*******************************************************************************************************************
void check_guard(void)
{
     bd8:	cf 92       	push	r12
     bda:	df 92       	push	r13
     bdc:	ef 92       	push	r14
     bde:	ff 92       	push	r15
     be0:	cf 93       	push	r28
     be2:	df 93       	push	r29
     be4:	00 d0       	rcall	.+0      	; 0xbe6 <check_guard+0xe>
     be6:	00 d0       	rcall	.+0      	; 0xbe8 <check_guard+0x10>
     be8:	cd b7       	in	r28, 0x3d	; 61
     bea:	de b7       	in	r29, 0x3e	; 62
    if(get_guard() == 0)
     bec:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <get_guard>
     bf0:	88 23       	and	r24, r24
     bf2:	b9 f0       	breq	.+46     	; 0xc22 <check_guard+0x4a>
    guard_timer();
    if(get_guard() == 1)
     bf4:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <get_guard>
     bf8:	81 30       	cpi	r24, 0x01	; 1
     bfa:	09 f4       	brne	.+2      	; 0xbfe <check_guard+0x26>
     bfc:	66 c0       	rjmp	.+204    	; 0xcca <check_guard+0xf2>
}
//**********************************************************************************

static void check_btn_SOS(void)
{
    if(flag_alarm == FLAG_ALARM_SOS)
     bfe:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <flag_alarm>
     c02:	8c 30       	cpi	r24, 0x0C	; 12
     c04:	09 f4       	brne	.+2      	; 0xc08 <check_guard+0x30>
     c06:	dd c1       	rjmp	.+954    	; 0xfc2 <check_guard+0x3ea>
        flag_alarm = 0;
     c08:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <flag_alarm>
}
     c0c:	0f 90       	pop	r0
     c0e:	0f 90       	pop	r0
     c10:	0f 90       	pop	r0
     c12:	0f 90       	pop	r0
     c14:	df 91       	pop	r29
     c16:	cf 91       	pop	r28
     c18:	ff 90       	pop	r15
     c1a:	ef 90       	pop	r14
     c1c:	df 90       	pop	r13
     c1e:	cf 90       	pop	r12
     c20:	08 95       	ret
        uint16_t t = get_time_from_button_s();
     c22:	0e 94 94 28 	call	0x5128	; 0x5128 <get_time_from_button_s>
     c26:	89 83       	std	Y+1, r24	; 0x01
     c28:	9a 83       	std	Y+2, r25	; 0x02
        if(get_autoguard() == 0 && t!=0xFFFF)
     c2a:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <get_autoguard>
     c2e:	81 11       	cpse	r24, r1
     c30:	19 c0       	rjmp	.+50     	; 0xc64 <check_guard+0x8c>
     c32:	29 81       	ldd	r18, Y+1	; 0x01
     c34:	3a 81       	ldd	r19, Y+2	; 0x02
     c36:	2f 3f       	cpi	r18, 0xFF	; 255
     c38:	3f 4f       	sbci	r19, 0xFF	; 255
     c3a:	19 f4       	brne	.+6      	; 0xc42 <check_guard+0x6a>
        if((t > 60*get_interval_after_button_m()) && (t != 0xFFFF))
     c3c:	0e 94 fe 10 	call	0x21fc	; 0x21fc <get_interval_after_button_m>
     c40:	d9 cf       	rjmp	.-78     	; 0xbf4 <check_guard+0x1c>
            set_autoguard(1);
     c42:	81 e0       	ldi	r24, 0x01	; 1
     c44:	0e 94 f5 10 	call	0x21ea	; 0x21ea <set_autoguard>
            EEPROM_update();
     c48:	0e 94 c8 10 	call	0x2190	; 0x2190 <EEPROM_update>
        if((t > 60*get_interval_after_button_m()) && (t != 0xFFFF))
     c4c:	0e 94 fe 10 	call	0x21fc	; 0x21fc <get_interval_after_button_m>
     c50:	5c e3       	ldi	r21, 0x3C	; 60
     c52:	85 9f       	mul	r24, r21
     c54:	c0 01       	movw	r24, r0
     c56:	11 24       	eor	r1, r1
     c58:	a9 81       	ldd	r26, Y+1	; 0x01
     c5a:	ba 81       	ldd	r27, Y+2	; 0x02
     c5c:	8a 17       	cp	r24, r26
     c5e:	9b 07       	cpc	r25, r27
     c60:	48 f6       	brcc	.-110    	; 0xbf4 <check_guard+0x1c>
     c62:	10 c0       	rjmp	.+32     	; 0xc84 <check_guard+0xac>
     c64:	0e 94 fe 10 	call	0x21fc	; 0x21fc <get_interval_after_button_m>
     c68:	bc e3       	ldi	r27, 0x3C	; 60
     c6a:	8b 9f       	mul	r24, r27
     c6c:	c0 01       	movw	r24, r0
     c6e:	11 24       	eor	r1, r1
     c70:	29 81       	ldd	r18, Y+1	; 0x01
     c72:	3a 81       	ldd	r19, Y+2	; 0x02
     c74:	82 17       	cp	r24, r18
     c76:	93 07       	cpc	r25, r19
     c78:	08 f0       	brcs	.+2      	; 0xc7c <check_guard+0xa4>
     c7a:	bc cf       	rjmp	.-136    	; 0xbf4 <check_guard+0x1c>
     c7c:	2f 3f       	cpi	r18, 0xFF	; 255
     c7e:	3f 4f       	sbci	r19, 0xFF	; 255
     c80:	09 f4       	brne	.+2      	; 0xc84 <check_guard+0xac>
     c82:	b8 cf       	rjmp	.-144    	; 0xbf4 <check_guard+0x1c>
            set_guard(1);
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	0e 94 e6 10 	call	0x21cc	; 0x21cc <set_guard>
            softuart_puts_p(PSTR("ON"));
     c8a:	82 e1       	ldi	r24, 0x12	; 18
     c8c:	93 e0       	ldi	r25, 0x03	; 3
     c8e:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <softuart_puts_p>
            EEPROM_update();
     c92:	0e 94 c8 10 	call	0x2190	; 0x2190 <EEPROM_update>
            set_time_from_button_s(0xFFFF);
     c96:	8f ef       	ldi	r24, 0xFF	; 255
     c98:	9f ef       	ldi	r25, 0xFF	; 255
     c9a:	0e 94 8c 28 	call	0x5118	; 0x5118 <set_time_from_button_s>
            beep_non_block(150);
     c9e:	86 e9       	ldi	r24, 0x96	; 150
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <beep_non_block>
            delay_ms(300);
     ca6:	8c e2       	ldi	r24, 0x2C	; 44
     ca8:	91 e0       	ldi	r25, 0x01	; 1
     caa:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
            beep_non_block(150);
     cae:	86 e9       	ldi	r24, 0x96	; 150
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <beep_non_block>
            if(get_report_on_guard() == 1)
     cb6:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <get_report_on_guard>
     cba:	81 30       	cpi	r24, 0x01	; 1
     cbc:	09 f0       	breq	.+2      	; 0xcc0 <check_guard+0xe8>
     cbe:	9a cf       	rjmp	.-204    	; 0xbf4 <check_guard+0x1c>
                send_sms_admins(PSTR("Guard is on by button."));
     cc0:	8b ef       	ldi	r24, 0xFB	; 251
     cc2:	92 e0       	ldi	r25, 0x02	; 2
     cc4:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <send_sms_admins>
     cc8:	95 cf       	rjmp	.-214    	; 0xbf4 <check_guard+0x1c>
    uint8_t motion_d = get_single_motion_detected();
     cca:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <get_single_motion_detected>
    if(motion_d && flag_alarm == 0)
     cce:	88 23       	and	r24, r24
     cd0:	29 f0       	breq	.+10     	; 0xcdc <check_guard+0x104>
     cd2:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <flag_alarm>
     cd6:	88 23       	and	r24, r24
     cd8:	09 f4       	brne	.+2      	; 0xcdc <check_guard+0x104>
     cda:	42 c0       	rjmp	.+132    	; 0xd60 <check_guard+0x188>
    if(motion_cnt == 1 && (get_time_from_motion_s() > 8))
     cdc:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <motion_cnt.54>
     ce0:	81 30       	cpi	r24, 0x01	; 1
     ce2:	09 f4       	brne	.+2      	; 0xce6 <check_guard+0x10e>
     ce4:	7c c0       	rjmp	.+248    	; 0xdde <check_guard+0x206>

//*******************************************************************************************************************

static void door_sensors(void)
{
    if(get_flag_open_door() && flag_alarm == 0)
     ce6:	0e 94 9a 1f 	call	0x3f34	; 0x3f34 <get_flag_open_door>
     cea:	88 23       	and	r24, r24
     cec:	29 f0       	breq	.+10     	; 0xcf8 <check_guard+0x120>
     cee:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <flag_alarm>
     cf2:	88 23       	and	r24, r24
     cf4:	09 f4       	brne	.+2      	; 0xcf8 <check_guard+0x120>
     cf6:	82 c0       	rjmp	.+260    	; 0xdfc <check_guard+0x224>
//*******************************************************************************************************************

static void ext_motion_sensor(void)
{
    static uint8_t motion_cnt = 0;
    uint8_t motion_d = get_flag_ext_mot_sens_detected();
     cf8:	0e 94 c2 1f 	call	0x3f84	; 0x3f84 <get_flag_ext_mot_sens_detected>
    if(motion_d && flag_alarm == 0)
     cfc:	88 23       	and	r24, r24
     cfe:	09 f4       	brne	.+2      	; 0xd02 <check_guard+0x12a>
     d00:	dd c0       	rjmp	.+442    	; 0xebc <check_guard+0x2e4>
     d02:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <flag_alarm>
     d06:	88 23       	and	r24, r24
     d08:	09 f4       	brne	.+2      	; 0xd0c <check_guard+0x134>
     d0a:	9a c0       	rjmp	.+308    	; 0xe40 <check_guard+0x268>
        start_time_alarm = get_time_s() + get_pause_alarm_report_s();
        flag_alarm = FLAG_ALARM_EXT_MOT;
        beep_non_block(500);
        softuart_puts_p(PSTR("FLAG_ALARM_EXT_MOT\r\n"));
    }
    if(motion_cnt == 1 && (get_time_from_motion_s() > 8))
     d0c:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <motion_cnt.49>
     d10:	81 30       	cpi	r24, 0x01	; 1
     d12:	09 f4       	brne	.+2      	; 0xd16 <check_guard+0x13e>
     d14:	dd c0       	rjmp	.+442    	; 0xed0 <check_guard+0x2f8>
    if(get_pause_alarm_report_s() > 0)
     d16:	0e 94 22 11 	call	0x2244	; 0x2244 <get_pause_alarm_report_s>
     d1a:	81 11       	cpse	r24, r1
     d1c:	e7 c0       	rjmp	.+462    	; 0xeec <check_guard+0x314>
    if(flag_alarm == FLAG_ALARM_SINGLE)
     d1e:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <flag_alarm>
     d22:	8b 30       	cpi	r24, 0x0B	; 11
     d24:	09 f4       	brne	.+2      	; 0xd28 <check_guard+0x150>
     d26:	fb c0       	rjmp	.+502    	; 0xf1e <check_guard+0x346>
    else if(flag_alarm == FLAG_ALARM_DOOR)
     d28:	81 30       	cpi	r24, 0x01	; 1
     d2a:	09 f4       	brne	.+2      	; 0xd2e <check_guard+0x156>
     d2c:	1a c1       	rjmp	.+564    	; 0xf62 <check_guard+0x38a>
    else if(flag_alarm == FLAG_ALARM_EXT_MOT)
     d2e:	82 30       	cpi	r24, 0x02	; 2
     d30:	09 f0       	breq	.+2      	; 0xd34 <check_guard+0x15c>
     d32:	6c cf       	rjmp	.-296    	; 0xc0c <check_guard+0x34>
        softuart_puts_p(PSTR("alarm...EXT_MOT\r\n"));
     d34:	8d e2       	ldi	r24, 0x2D	; 45
     d36:	92 e0       	ldi	r25, 0x02	; 2
     d38:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <softuart_puts_p>
        if(get_accept_calls() == 1)
     d3c:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <get_accept_calls>
     d40:	81 30       	cpi	r24, 0x01	; 1
     d42:	09 f4       	brne	.+2      	; 0xd46 <check_guard+0x16e>
     d44:	30 c1       	rjmp	.+608    	; 0xfa6 <check_guard+0x3ce>
        if(get_accept_sms() == 1)
     d46:	0e 94 da 10 	call	0x21b4	; 0x21b4 <get_accept_sms>
     d4a:	81 30       	cpi	r24, 0x01	; 1
     d4c:	09 f4       	brne	.+2      	; 0xd50 <check_guard+0x178>
     d4e:	34 c1       	rjmp	.+616    	; 0xfb8 <check_guard+0x3e0>
        flag_alarm = 0;
     d50:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <flag_alarm>
        set_guard(0);
     d54:	80 e0       	ldi	r24, 0x00	; 0
     d56:	0e 94 e6 10 	call	0x21cc	; 0x21cc <set_guard>
        EEPROM_update();
     d5a:	0e 94 c8 10 	call	0x2190	; 0x2190 <EEPROM_update>
     d5e:	56 cf       	rjmp	.-340    	; 0xc0c <check_guard+0x34>
        if(get_first_m() == 0)
     d60:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <get_first_m>
     d64:	81 11       	cpse	r24, r1
     d66:	19 c0       	rjmp	.+50     	; 0xd9a <check_guard+0x1c2>
            if(motion_cnt == 0)//if first motion - return
     d68:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <motion_cnt.54>
     d6c:	88 23       	and	r24, r24
     d6e:	51 f0       	breq	.+20     	; 0xd84 <check_guard+0x1ac>
        if(motion_cnt == 1 && (get_time_from_motion_s() < 2)) // 2 seconds return
     d70:	81 30       	cpi	r24, 0x01	; 1
     d72:	a9 f4       	brne	.+42     	; 0xd9e <check_guard+0x1c6>
     d74:	0e 94 4c 28 	call	0x5098	; 0x5098 <get_time_from_motion_s>
     d78:	62 30       	cpi	r22, 0x02	; 2
     d7a:	71 05       	cpc	r23, r1
     d7c:	81 05       	cpc	r24, r1
     d7e:	91 05       	cpc	r25, r1
     d80:	70 f4       	brcc	.+28     	; 0xd9e <check_guard+0x1c6>
     d82:	b1 cf       	rjmp	.-158    	; 0xce6 <check_guard+0x10e>
                motion_cnt = 1;
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <motion_cnt.54>
                set_time_from_motion_s(0); // обнуляем таймер с момента последнего зафиксированного движения
     d8a:	80 e0       	ldi	r24, 0x00	; 0
     d8c:	0e 94 3d 28 	call	0x507a	; 0x507a <set_time_from_motion_s>
                softuart_puts_p(PSTR("single_first_motion"));
     d90:	87 ee       	ldi	r24, 0xE7	; 231
     d92:	92 e0       	ldi	r25, 0x02	; 2
     d94:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <softuart_puts_p>
                return;
     d98:	a6 cf       	rjmp	.-180    	; 0xce6 <check_guard+0x10e>
        else motion_cnt = 0;
     d9a:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <motion_cnt.54>
        start_time_alarm = get_time_s() + get_pause_alarm_report_s();
     d9e:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <get_time_s>
     da2:	c6 2e       	mov	r12, r22
     da4:	d7 2e       	mov	r13, r23
     da6:	e8 2e       	mov	r14, r24
     da8:	f9 2e       	mov	r15, r25
     daa:	0e 94 22 11 	call	0x2244	; 0x2244 <get_pause_alarm_report_s>
     dae:	c8 0e       	add	r12, r24
     db0:	d1 1c       	adc	r13, r1
     db2:	e1 1c       	adc	r14, r1
     db4:	f1 1c       	adc	r15, r1
     db6:	c0 92 f8 01 	sts	0x01F8, r12	; 0x8001f8 <start_time_alarm>
     dba:	d0 92 f9 01 	sts	0x01F9, r13	; 0x8001f9 <start_time_alarm+0x1>
     dbe:	e0 92 fa 01 	sts	0x01FA, r14	; 0x8001fa <start_time_alarm+0x2>
     dc2:	f0 92 fb 01 	sts	0x01FB, r15	; 0x8001fb <start_time_alarm+0x3>
        flag_alarm = FLAG_ALARM_SINGLE;
     dc6:	8b e0       	ldi	r24, 0x0B	; 11
     dc8:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <flag_alarm>
        beep_non_block(500);
     dcc:	84 ef       	ldi	r24, 0xF4	; 244
     dce:	91 e0       	ldi	r25, 0x01	; 1
     dd0:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <beep_non_block>
        softuart_puts_p(PSTR("FLAG_ALARM_SINGLE\r\n"));
     dd4:	83 ed       	ldi	r24, 0xD3	; 211
     dd6:	92 e0       	ldi	r25, 0x02	; 2
     dd8:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <softuart_puts_p>
     ddc:	7f cf       	rjmp	.-258    	; 0xcdc <check_guard+0x104>
    if(motion_cnt == 1 && (get_time_from_motion_s() > 8))
     dde:	0e 94 4c 28 	call	0x5098	; 0x5098 <get_time_from_motion_s>
     de2:	69 30       	cpi	r22, 0x09	; 9
     de4:	71 05       	cpc	r23, r1
     de6:	81 05       	cpc	r24, r1
     de8:	91 05       	cpc	r25, r1
     dea:	08 f4       	brcc	.+2      	; 0xdee <check_guard+0x216>
     dec:	7c cf       	rjmp	.-264    	; 0xce6 <check_guard+0x10e>
        softuart_puts_p(PSTR("rst motion")); //in 3 sec 2 motions
     dee:	88 ec       	ldi	r24, 0xC8	; 200
     df0:	92 e0       	ldi	r25, 0x02	; 2
     df2:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <softuart_puts_p>
        motion_cnt = 0;
     df6:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <motion_cnt.54>
     dfa:	75 cf       	rjmp	.-278    	; 0xce6 <check_guard+0x10e>
        set_time_from_motion_s(0); // обнуляем таймер с момента последнего зафиксированного движения
     dfc:	0e 94 3d 28 	call	0x507a	; 0x507a <set_time_from_motion_s>
        start_time_alarm = get_time_s() + get_pause_alarm_report_s();
     e00:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <get_time_s>
     e04:	c6 2e       	mov	r12, r22
     e06:	d7 2e       	mov	r13, r23
     e08:	e8 2e       	mov	r14, r24
     e0a:	f9 2e       	mov	r15, r25
     e0c:	0e 94 22 11 	call	0x2244	; 0x2244 <get_pause_alarm_report_s>
     e10:	c8 0e       	add	r12, r24
     e12:	d1 1c       	adc	r13, r1
     e14:	e1 1c       	adc	r14, r1
     e16:	f1 1c       	adc	r15, r1
     e18:	c0 92 f8 01 	sts	0x01F8, r12	; 0x8001f8 <start_time_alarm>
     e1c:	d0 92 f9 01 	sts	0x01F9, r13	; 0x8001f9 <start_time_alarm+0x1>
     e20:	e0 92 fa 01 	sts	0x01FA, r14	; 0x8001fa <start_time_alarm+0x2>
     e24:	f0 92 fb 01 	sts	0x01FB, r15	; 0x8001fb <start_time_alarm+0x3>
        flag_alarm = FLAG_ALARM_DOOR;
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <flag_alarm>
        beep_non_block(500);
     e2e:	84 ef       	ldi	r24, 0xF4	; 244
     e30:	91 e0       	ldi	r25, 0x01	; 1
     e32:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <beep_non_block>
        softuart_puts_p(PSTR("FLAG_ALARM_DOOR\r\n"));
     e36:	86 eb       	ldi	r24, 0xB6	; 182
     e38:	92 e0       	ldi	r25, 0x02	; 2
     e3a:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <softuart_puts_p>
     e3e:	5c cf       	rjmp	.-328    	; 0xcf8 <check_guard+0x120>
        if(get_first_m() == 0)
     e40:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <get_first_m>
     e44:	81 11       	cpse	r24, r1
     e46:	19 c0       	rjmp	.+50     	; 0xe7a <check_guard+0x2a2>
            if(motion_cnt == 0)//if first motion - return
     e48:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <motion_cnt.49>
     e4c:	88 23       	and	r24, r24
     e4e:	51 f0       	breq	.+20     	; 0xe64 <check_guard+0x28c>
        if(motion_cnt == 1 && (get_time_from_motion_s() < 2)) // 2 seconds return
     e50:	81 30       	cpi	r24, 0x01	; 1
     e52:	a9 f4       	brne	.+42     	; 0xe7e <check_guard+0x2a6>
     e54:	0e 94 4c 28 	call	0x5098	; 0x5098 <get_time_from_motion_s>
     e58:	62 30       	cpi	r22, 0x02	; 2
     e5a:	71 05       	cpc	r23, r1
     e5c:	81 05       	cpc	r24, r1
     e5e:	91 05       	cpc	r25, r1
     e60:	70 f4       	brcc	.+28     	; 0xe7e <check_guard+0x2a6>
     e62:	30 c0       	rjmp	.+96     	; 0xec4 <check_guard+0x2ec>
                motion_cnt = 1;
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <motion_cnt.49>
                set_time_from_motion_s(0); // обнуляем таймер с момента последнего зафиксированного движения
     e6a:	80 e0       	ldi	r24, 0x00	; 0
     e6c:	0e 94 3d 28 	call	0x507a	; 0x507a <set_time_from_motion_s>
                softuart_puts_p(PSTR("ext_first_motion"));
     e70:	85 ea       	ldi	r24, 0xA5	; 165
     e72:	92 e0       	ldi	r25, 0x02	; 2
     e74:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <softuart_puts_p>
                return;
     e78:	25 c0       	rjmp	.+74     	; 0xec4 <check_guard+0x2ec>
        else motion_cnt = 0;
     e7a:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <motion_cnt.49>
        start_time_alarm = get_time_s() + get_pause_alarm_report_s();
     e7e:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <get_time_s>
     e82:	c6 2e       	mov	r12, r22
     e84:	d7 2e       	mov	r13, r23
     e86:	e8 2e       	mov	r14, r24
     e88:	f9 2e       	mov	r15, r25
     e8a:	0e 94 22 11 	call	0x2244	; 0x2244 <get_pause_alarm_report_s>
     e8e:	c8 0e       	add	r12, r24
     e90:	d1 1c       	adc	r13, r1
     e92:	e1 1c       	adc	r14, r1
     e94:	f1 1c       	adc	r15, r1
     e96:	c0 92 f8 01 	sts	0x01F8, r12	; 0x8001f8 <start_time_alarm>
     e9a:	d0 92 f9 01 	sts	0x01F9, r13	; 0x8001f9 <start_time_alarm+0x1>
     e9e:	e0 92 fa 01 	sts	0x01FA, r14	; 0x8001fa <start_time_alarm+0x2>
     ea2:	f0 92 fb 01 	sts	0x01FB, r15	; 0x8001fb <start_time_alarm+0x3>
        flag_alarm = FLAG_ALARM_EXT_MOT;
     ea6:	82 e0       	ldi	r24, 0x02	; 2
     ea8:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <flag_alarm>
        beep_non_block(500);
     eac:	84 ef       	ldi	r24, 0xF4	; 244
     eae:	91 e0       	ldi	r25, 0x01	; 1
     eb0:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <beep_non_block>
        softuart_puts_p(PSTR("FLAG_ALARM_EXT_MOT\r\n"));
     eb4:	80 e9       	ldi	r24, 0x90	; 144
     eb6:	92 e0       	ldi	r25, 0x02	; 2
     eb8:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <softuart_puts_p>
    if(motion_cnt == 1 && (get_time_from_motion_s() > 8))
     ebc:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <motion_cnt.49>
     ec0:	81 30       	cpi	r24, 0x01	; 1
     ec2:	31 f0       	breq	.+12     	; 0xed0 <check_guard+0x2f8>
    if(flag_alarm == 0)
     ec4:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <flag_alarm>
     ec8:	88 23       	and	r24, r24
     eca:	09 f4       	brne	.+2      	; 0xece <check_guard+0x2f6>
     ecc:	9f ce       	rjmp	.-706    	; 0xc0c <check_guard+0x34>
     ece:	23 cf       	rjmp	.-442    	; 0xd16 <check_guard+0x13e>
    if(motion_cnt == 1 && (get_time_from_motion_s() > 8))
     ed0:	0e 94 4c 28 	call	0x5098	; 0x5098 <get_time_from_motion_s>
     ed4:	69 30       	cpi	r22, 0x09	; 9
     ed6:	71 05       	cpc	r23, r1
     ed8:	81 05       	cpc	r24, r1
     eda:	91 05       	cpc	r25, r1
     edc:	98 f3       	brcs	.-26     	; 0xec4 <check_guard+0x2ec>
    {
        softuart_puts_p(PSTR("rst motion")); //in 3 sec 2 motions
     ede:	85 e8       	ldi	r24, 0x85	; 133
     ee0:	92 e0       	ldi	r25, 0x02	; 2
     ee2:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <softuart_puts_p>
        motion_cnt = 0;
     ee6:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <motion_cnt.49>
     eea:	ec cf       	rjmp	.-40     	; 0xec4 <check_guard+0x2ec>
        if(get_time_s() < start_time_alarm)
     eec:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <get_time_s>
     ef0:	69 83       	std	Y+1, r22	; 0x01
     ef2:	7a 83       	std	Y+2, r23	; 0x02
     ef4:	8b 83       	std	Y+3, r24	; 0x03
     ef6:	9c 83       	std	Y+4, r25	; 0x04
     ef8:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <start_time_alarm>
     efc:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <start_time_alarm+0x1>
     f00:	a0 91 fa 01 	lds	r26, 0x01FA	; 0x8001fa <start_time_alarm+0x2>
     f04:	b0 91 fb 01 	lds	r27, 0x01FB	; 0x8001fb <start_time_alarm+0x3>
     f08:	29 81       	ldd	r18, Y+1	; 0x01
     f0a:	3a 81       	ldd	r19, Y+2	; 0x02
     f0c:	4b 81       	ldd	r20, Y+3	; 0x03
     f0e:	5c 81       	ldd	r21, Y+4	; 0x04
     f10:	28 17       	cp	r18, r24
     f12:	39 07       	cpc	r19, r25
     f14:	4a 07       	cpc	r20, r26
     f16:	5b 07       	cpc	r21, r27
     f18:	08 f0       	brcs	.+2      	; 0xf1c <check_guard+0x344>
     f1a:	01 cf       	rjmp	.-510    	; 0xd1e <check_guard+0x146>
     f1c:	77 ce       	rjmp	.-786    	; 0xc0c <check_guard+0x34>
        softuart_puts_p(PSTR("alarm...SINGLE\r\n"));
     f1e:	84 e7       	ldi	r24, 0x74	; 116
     f20:	92 e0       	ldi	r25, 0x02	; 2
     f22:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <softuart_puts_p>
        if(get_accept_calls() == 1)
     f26:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <get_accept_calls>
     f2a:	81 30       	cpi	r24, 0x01	; 1
     f2c:	61 f0       	breq	.+24     	; 0xf46 <check_guard+0x36e>
        if(get_accept_sms() == 1)
     f2e:	0e 94 da 10 	call	0x21b4	; 0x21b4 <get_accept_sms>
     f32:	81 30       	cpi	r24, 0x01	; 1
     f34:	89 f0       	breq	.+34     	; 0xf58 <check_guard+0x380>
        set_guard(0);
     f36:	80 e0       	ldi	r24, 0x00	; 0
     f38:	0e 94 e6 10 	call	0x21cc	; 0x21cc <set_guard>
        EEPROM_update();
     f3c:	0e 94 c8 10 	call	0x2190	; 0x2190 <EEPROM_update>
        flag_alarm = 0;
     f40:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <flag_alarm>
     f44:	63 ce       	rjmp	.-826    	; 0xc0c <check_guard+0x34>
            alarm_play_file(AUDIO_ALARM_MOTION);
     f46:	8b e0       	ldi	r24, 0x0B	; 11
     f48:	91 e0       	ldi	r25, 0x01	; 1
     f4a:	0e 94 98 17 	call	0x2f30	; 0x2f30 <alarm_play_file>
            delay_ms(2000);
     f4e:	80 ed       	ldi	r24, 0xD0	; 208
     f50:	97 e0       	ldi	r25, 0x07	; 7
     f52:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
     f56:	eb cf       	rjmp	.-42     	; 0xf2e <check_guard+0x356>
            send_sms_admins(PSTR("ALARM! Invasion!!!"));
     f58:	81 e6       	ldi	r24, 0x61	; 97
     f5a:	92 e0       	ldi	r25, 0x02	; 2
     f5c:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <send_sms_admins>
     f60:	ea cf       	rjmp	.-44     	; 0xf36 <check_guard+0x35e>
        softuart_puts_p(PSTR("alarm...DOOR\r\n"));
     f62:	82 e5       	ldi	r24, 0x52	; 82
     f64:	92 e0       	ldi	r25, 0x02	; 2
     f66:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <softuart_puts_p>
        if(get_accept_calls() == 1)
     f6a:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <get_accept_calls>
     f6e:	81 30       	cpi	r24, 0x01	; 1
     f70:	61 f0       	breq	.+24     	; 0xf8a <check_guard+0x3b2>
        if(get_accept_sms() == 1)
     f72:	0e 94 da 10 	call	0x21b4	; 0x21b4 <get_accept_sms>
     f76:	81 30       	cpi	r24, 0x01	; 1
     f78:	89 f0       	breq	.+34     	; 0xf9c <check_guard+0x3c4>
        flag_alarm = 0;
     f7a:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <flag_alarm>
        set_guard(0);
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	0e 94 e6 10 	call	0x21cc	; 0x21cc <set_guard>
        EEPROM_update();
     f84:	0e 94 c8 10 	call	0x2190	; 0x2190 <EEPROM_update>
     f88:	41 ce       	rjmp	.-894    	; 0xc0c <check_guard+0x34>
            alarm_play_file(AUDIO_ALARM_DOOR);
     f8a:	85 e1       	ldi	r24, 0x15	; 21
     f8c:	91 e0       	ldi	r25, 0x01	; 1
     f8e:	0e 94 98 17 	call	0x2f30	; 0x2f30 <alarm_play_file>
            delay_ms(2000);
     f92:	80 ed       	ldi	r24, 0xD0	; 208
     f94:	97 e0       	ldi	r25, 0x07	; 7
     f96:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
     f9a:	eb cf       	rjmp	.-42     	; 0xf72 <check_guard+0x39a>
            send_sms_admins(PSTR("ALARM! Invasion!!!"));
     f9c:	8f e3       	ldi	r24, 0x3F	; 63
     f9e:	92 e0       	ldi	r25, 0x02	; 2
     fa0:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <send_sms_admins>
     fa4:	ea cf       	rjmp	.-44     	; 0xf7a <check_guard+0x3a2>
            alarm_play_file(AUDIO_ALARM_MOTION);
     fa6:	8b e0       	ldi	r24, 0x0B	; 11
     fa8:	91 e0       	ldi	r25, 0x01	; 1
     faa:	0e 94 98 17 	call	0x2f30	; 0x2f30 <alarm_play_file>
            delay_ms(2000);
     fae:	80 ed       	ldi	r24, 0xD0	; 208
     fb0:	97 e0       	ldi	r25, 0x07	; 7
     fb2:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
     fb6:	c7 ce       	rjmp	.-626    	; 0xd46 <check_guard+0x16e>
            send_sms_admins(PSTR("ALARM! Invasion!!!"));
     fb8:	8a e1       	ldi	r24, 0x1A	; 26
     fba:	92 e0       	ldi	r25, 0x02	; 2
     fbc:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <send_sms_admins>
     fc0:	c7 ce       	rjmp	.-626    	; 0xd50 <check_guard+0x178>
        softuart_puts_p(PSTR("FLAG_ALARM_SOS\r\n"));
     fc2:	89 e0       	ldi	r24, 0x09	; 9
     fc4:	92 e0       	ldi	r25, 0x02	; 2
     fc6:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <softuart_puts_p>
        flag_alarm = 0;
     fca:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <flag_alarm>
        alarm_play_file(AUDIO_SOS);
     fce:	8d e1       	ldi	r24, 0x1D	; 29
     fd0:	91 e0       	ldi	r25, 0x01	; 1
     fd2:	0e 94 98 17 	call	0x2f30	; 0x2f30 <alarm_play_file>
     fd6:	18 ce       	rjmp	.-976    	; 0xc08 <check_guard+0x30>

00000fd8 <set_flag_alarm>:
    flag_alarm = flag;
     fd8:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <flag_alarm>
}
     fdc:	08 95       	ret

00000fde <get_flag_alarm>:
    return get_val(flag_alarm);
     fde:	9f b7       	in	r25, 0x3f	; 63
     fe0:	f8 94       	cli
     fe2:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <flag_alarm>
     fe6:	9f bf       	out	0x3f, r25	; 63
}
     fe8:	08 95       	ret

00000fea <get_time_without_power_s>:
{
     fea:	cf 93       	push	r28
     fec:	df 93       	push	r29
     fee:	00 d0       	rcall	.+0      	; 0xff0 <get_time_without_power_s+0x6>
     ff0:	00 d0       	rcall	.+0      	; 0xff2 <get_time_without_power_s+0x8>
     ff2:	cd b7       	in	r28, 0x3d	; 61
     ff4:	de b7       	in	r29, 0x3e	; 62
    return time_without_power_s;
     ff6:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <time_without_power_s>
     ffa:	90 91 f5 01 	lds	r25, 0x01F5	; 0x8001f5 <time_without_power_s+0x1>
     ffe:	a0 91 f6 01 	lds	r26, 0x01F6	; 0x8001f6 <time_without_power_s+0x2>
    1002:	b0 91 f7 01 	lds	r27, 0x01F7	; 0x8001f7 <time_without_power_s+0x3>
}
    1006:	bc 01       	movw	r22, r24
    1008:	cd 01       	movw	r24, r26
    100a:	0f 90       	pop	r0
    100c:	0f 90       	pop	r0
    100e:	0f 90       	pop	r0
    1010:	0f 90       	pop	r0
    1012:	df 91       	pop	r29
    1014:	cf 91       	pop	r28
    1016:	08 95       	ret

00001018 <init_internal_temperature>:
    ADMUX |= (1<<REFS1) | (1<<REFS0); //Internal 1.1V Voltage Reference
    1018:	ec e7       	ldi	r30, 0x7C	; 124
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	80 6c       	ori	r24, 0xC0	; 192
    1020:	80 83       	st	Z, r24
        ADCSRA |= (1 << ADPS2) | (1 << ADPS1); // 8Mhz F_CPU / 64 prescaler = 125Khz ADC clock source
    1022:	ea e7       	ldi	r30, 0x7A	; 122
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	86 60       	ori	r24, 0x06	; 6
    102a:	80 83       	st	Z, r24
        ADCSRA &= ~(1 << ADPS0);
    102c:	80 81       	ld	r24, Z
    102e:	8e 7f       	andi	r24, 0xFE	; 254
    1030:	80 83       	st	Z, r24
}
    1032:	08 95       	ret

00001034 <analog_read>:
{
    1034:	1f 93       	push	r17
    1036:	cf 93       	push	r28
    1038:	df 93       	push	r29
    103a:	18 2f       	mov	r17, r24
    ADMUX &=  (~(1<<MUX3)) & (~(1<<MUX2)) & (~(1<<MUX1)) & (~(1<<MUX0));
    103c:	ec e7       	ldi	r30, 0x7C	; 124
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	80 7f       	andi	r24, 0xF0	; 240
    1044:	80 83       	st	Z, r24
    switch(input)
    1046:	19 30       	cpi	r17, 0x09	; 9
    1048:	08 f0       	brcs	.+2      	; 0x104c <analog_read+0x18>
    104a:	7e c0       	rjmp	.+252    	; 0x1148 <analog_read+0x114>
    104c:	e1 2f       	mov	r30, r17
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	e5 50       	subi	r30, 0x05	; 5
    1052:	fe 4c       	sbci	r31, 0xCE	; 206
    1054:	0c 94 dc 29 	jmp	0x53b8	; 0x53b8 <__tablejump2__>
        ADMUX &=  (~(1<<MUX3)) & (~(1<<MUX2)) & (~(1<<MUX1)) & (~(1<<MUX0)); //---------- 0 0 0 0 0
    1058:	ec e7       	ldi	r30, 0x7C	; 124
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	80 7f       	andi	r24, 0xF0	; 240
    1060:	80 83       	st	Z, r24
    ADCSRA |= (1 << ADEN);  // Power up the ADC
    1062:	ca e7       	ldi	r28, 0x7A	; 122
    1064:	d0 e0       	ldi	r29, 0x00	; 0
    1066:	88 81       	ld	r24, Y
    1068:	80 68       	ori	r24, 0x80	; 128
    106a:	88 83       	st	Y, r24
    ADCSRA |= (1 << ADIE);  // Enable the ADC Interrupt
    106c:	88 81       	ld	r24, Y
    106e:	88 60       	ori	r24, 0x08	; 8
    1070:	88 83       	st	Y, r24
    SMCR |= (1 << SM0);    // ADC Noise Reduction Sleep Mode
    1072:	83 b7       	in	r24, 0x33	; 51
    1074:	82 60       	ori	r24, 0x02	; 2
    1076:	83 bf       	out	0x33, r24	; 51
    delay_ms(20);         // Wait for voltages to become stable
    1078:	84 e1       	ldi	r24, 0x14	; 20
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
    ADCSRA |= (1 << ADSC);  // Start converting
    1080:	88 81       	ld	r24, Y
    1082:	80 64       	ori	r24, 0x40	; 64
    1084:	88 83       	st	Y, r24
    while(ADCSRA & (1 << ADSC));
    1086:	ea e7       	ldi	r30, 0x7A	; 122
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	90 81       	ld	r25, Z
    108c:	96 fd       	sbrc	r25, 6
    108e:	fd cf       	rjmp	.-6      	; 0x108a <analog_read+0x56>
    1090:	2e e1       	ldi	r18, 0x1E	; 30
    long buffer=0;
    1092:	40 e0       	ldi	r20, 0x00	; 0
    1094:	50 e0       	ldi	r21, 0x00	; 0
    1096:	ba 01       	movw	r22, r20
        while(ADCSRA & (1 << ADSC)); // ADSC is cleared when the conversion finishes
    1098:	ea e7       	ldi	r30, 0x7A	; 122
    109a:	f0 e0       	ldi	r31, 0x00	; 0
        ADC_cache = ADCW;
    109c:	c8 e7       	ldi	r28, 0x78	; 120
    109e:	d0 e0       	ldi	r29, 0x00	; 0
        SMCR |= (1 << SE);
    10a0:	93 b7       	in	r25, 0x33	; 51
    10a2:	91 60       	ori	r25, 0x01	; 1
    10a4:	93 bf       	out	0x33, r25	; 51
        while(ADCSRA & (1 << ADSC)); // ADSC is cleared when the conversion finishes
    10a6:	90 81       	ld	r25, Z
    10a8:	96 fd       	sbrc	r25, 6
    10aa:	fd cf       	rjmp	.-6      	; 0x10a6 <analog_read+0x72>
        SMCR &= ~(1 << SE);
    10ac:	93 b7       	in	r25, 0x33	; 51
    10ae:	9e 7f       	andi	r25, 0xFE	; 254
    10b0:	93 bf       	out	0x33, r25	; 51
        cli();
    10b2:	f8 94       	cli
        ADC_cache = ADCW;
    10b4:	a8 81       	ld	r26, Y
    10b6:	b9 81       	ldd	r27, Y+1	; 0x01
        sei();
    10b8:	78 94       	sei
        buffer += ADC_cache;
    10ba:	4a 0f       	add	r20, r26
    10bc:	5b 1f       	adc	r21, r27
    10be:	61 1d       	adc	r22, r1
    10c0:	71 1d       	adc	r23, r1
    for(i=CHIP_TEMP_NR_OF_SAMPLES; i>0; i--)
    10c2:	21 50       	subi	r18, 0x01	; 1
    10c4:	69 f7       	brne	.-38     	; 0x10a0 <analog_read+0x6c>
    ADCSRA &= ~(1 << ADEN);
    10c6:	ea e7       	ldi	r30, 0x7A	; 122
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	8f 77       	andi	r24, 0x7F	; 127
    10ce:	80 83       	st	Z, r24
    if(input == INT_TEMP)
    10d0:	18 30       	cpi	r17, 0x08	; 8
    10d2:	09 f4       	brne	.+2      	; 0x10d6 <analog_read+0xa2>
    10d4:	3f c0       	rjmp	.+126    	; 0x1154 <analog_read+0x120>
    return 0;
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	80 e0       	ldi	r24, 0x00	; 0
    else if(input == BATTERY)
    10da:	11 23       	and	r17, r17
    10dc:	09 f4       	brne	.+2      	; 0x10e0 <analog_read+0xac>
    10de:	46 c0       	rjmp	.+140    	; 0x116c <analog_read+0x138>
}
    10e0:	df 91       	pop	r29
    10e2:	cf 91       	pop	r28
    10e4:	1f 91       	pop	r17
    10e6:	08 95       	ret
        ADMUX |= (1<<MUX0);//-------------------------------------------------------------------------- 0 0 0 0 1
    10e8:	ec e7       	ldi	r30, 0x7C	; 124
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	81 60       	ori	r24, 0x01	; 1
    10f0:	80 83       	st	Z, r24
        break;
    10f2:	b7 cf       	rjmp	.-146    	; 0x1062 <analog_read+0x2e>
        ADMUX |= (1<<MUX1);//-------------------------------------------------------------------------- 0 0 0 1 0
    10f4:	ec e7       	ldi	r30, 0x7C	; 124
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	82 60       	ori	r24, 0x02	; 2
    10fc:	80 83       	st	Z, r24
        break;
    10fe:	b1 cf       	rjmp	.-158    	; 0x1062 <analog_read+0x2e>
        ADMUX |= (1<<MUX1) | (1<<MUX0);//-------------------------------------------------------------- 0 0 0 1 1
    1100:	ec e7       	ldi	r30, 0x7C	; 124
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	83 60       	ori	r24, 0x03	; 3
    1108:	80 83       	st	Z, r24
        break;
    110a:	ab cf       	rjmp	.-170    	; 0x1062 <analog_read+0x2e>
        ADMUX |= (1<<MUX2);//-------------------------------------------------------------------------- 0 0 1 0 0
    110c:	ec e7       	ldi	r30, 0x7C	; 124
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	84 60       	ori	r24, 0x04	; 4
    1114:	80 83       	st	Z, r24
        break;
    1116:	a5 cf       	rjmp	.-182    	; 0x1062 <analog_read+0x2e>
        ADMUX |= (1<<MUX2) | (1<<MUX0);//-------------------------------------------------------------- 0 0 1 0 1
    1118:	ec e7       	ldi	r30, 0x7C	; 124
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	85 60       	ori	r24, 0x05	; 5
    1120:	80 83       	st	Z, r24
        break;
    1122:	9f cf       	rjmp	.-194    	; 0x1062 <analog_read+0x2e>
        ADMUX |= (1<<MUX2) | (1<<MUX1);//-------------------------------------------------------------- 0 0 1 1 0
    1124:	ec e7       	ldi	r30, 0x7C	; 124
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	86 60       	ori	r24, 0x06	; 6
    112c:	80 83       	st	Z, r24
        break;
    112e:	99 cf       	rjmp	.-206    	; 0x1062 <analog_read+0x2e>
        ADMUX |= (1<<MUX2) | (1<<MUX1) | (1<<MUX0);//-------------------------------------------------- 0 0 1 1 1
    1130:	ec e7       	ldi	r30, 0x7C	; 124
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	87 60       	ori	r24, 0x07	; 7
    1138:	80 83       	st	Z, r24
        break;
    113a:	93 cf       	rjmp	.-218    	; 0x1062 <analog_read+0x2e>
        ADMUX |= (1<<MUX3);         // ADC channel 8 - intelnal temperature sensor
    113c:	ec e7       	ldi	r30, 0x7C	; 124
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	88 60       	ori	r24, 0x08	; 8
    1144:	80 83       	st	Z, r24
        break;
    1146:	8d cf       	rjmp	.-230    	; 0x1062 <analog_read+0x2e>
        ADMUX &= (~(1<<MUX3)) & (~(1<<MUX2)) & (~(1<<MUX1)) & (~(1<<MUX0)); // set channel ADC0 default
    1148:	ec e7       	ldi	r30, 0x7C	; 124
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	80 7f       	andi	r24, 0xF0	; 240
    1150:	80 83       	st	Z, r24
    1152:	87 cf       	rjmp	.-242    	; 0x1062 <analog_read+0x2e>
        return ((buffer / CHIP_TEMP_NR_OF_SAMPLES) + CHIP_TEMP_ERROR_OFFSET) - 273;
    1154:	cb 01       	movw	r24, r22
    1156:	ba 01       	movw	r22, r20
    1158:	2e e1       	ldi	r18, 0x1E	; 30
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	40 e0       	ldi	r20, 0x00	; 0
    115e:	50 e0       	ldi	r21, 0x00	; 0
    1160:	0e 94 bd 29 	call	0x537a	; 0x537a <__divmodsi4>
    1164:	c9 01       	movw	r24, r18
    1166:	85 52       	subi	r24, 0x25	; 37
    1168:	91 40       	sbci	r25, 0x01	; 1
    116a:	ba cf       	rjmp	.-140    	; 0x10e0 <analog_read+0xac>
        return (buffer / CHIP_TEMP_NR_OF_SAMPLES);
    116c:	cb 01       	movw	r24, r22
    116e:	ba 01       	movw	r22, r20
    1170:	2e e1       	ldi	r18, 0x1E	; 30
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	40 e0       	ldi	r20, 0x00	; 0
    1176:	50 e0       	ldi	r21, 0x00	; 0
    1178:	0e 94 bd 29 	call	0x537a	; 0x537a <__divmodsi4>
    117c:	c9 01       	movw	r24, r18
    117e:	b0 cf       	rjmp	.-160    	; 0x10e0 <analog_read+0xac>

00001180 <level_battery>:
{
    1180:	0f 93       	push	r16
    int16_t bat = analog_read(BATTERY);
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	0e 94 1a 08 	call	0x1034	; 0x1034 <analog_read>
    1188:	28 2f       	mov	r18, r24
    118a:	39 2f       	mov	r19, r25
    if(bat < 570)
    118c:	2a 33       	cpi	r18, 0x3A	; 58
    118e:	82 e0       	ldi	r24, 0x02	; 2
    1190:	38 07       	cpc	r19, r24
    1192:	8c f0       	brlt	.+34     	; 0x11b6 <level_battery+0x36>
    return map_s(bat, 570, 640, 0, 100);
    1194:	c9 01       	movw	r24, r18
    1196:	81 38       	cpi	r24, 0x81	; 129
    1198:	22 e0       	ldi	r18, 0x02	; 2
    119a:	92 07       	cpc	r25, r18
    119c:	14 f0       	brlt	.+4      	; 0x11a2 <level_battery+0x22>
    119e:	80 e8       	ldi	r24, 0x80	; 128
    11a0:	92 e0       	ldi	r25, 0x02	; 2
    11a2:	04 e6       	ldi	r16, 0x64	; 100
    11a4:	20 e0       	ldi	r18, 0x00	; 0
    11a6:	40 e8       	ldi	r20, 0x80	; 128
    11a8:	52 e0       	ldi	r21, 0x02	; 2
    11aa:	6a e3       	ldi	r22, 0x3A	; 58
    11ac:	72 e0       	ldi	r23, 0x02	; 2
    11ae:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <map_s>
}
    11b2:	0f 91       	pop	r16
    11b4:	08 95       	ret
        reset_mcu(1);
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	0e 94 45 1b 	call	0x368a	; 0x368a <reset_mcu>
        return 0;
    11bc:	80 e0       	ldi	r24, 0x00	; 0
    11be:	f9 cf       	rjmp	.-14     	; 0x11b2 <level_battery+0x32>

000011c0 <debug_report>:
{
    11c0:	6f 92       	push	r6
    11c2:	7f 92       	push	r7
    11c4:	8f 92       	push	r8
    11c6:	9f 92       	push	r9
    11c8:	af 92       	push	r10
    11ca:	bf 92       	push	r11
    11cc:	cf 92       	push	r12
    11ce:	df 92       	push	r13
    11d0:	ef 92       	push	r14
    11d2:	ff 92       	push	r15
    11d4:	0f 93       	push	r16
    11d6:	1f 93       	push	r17
    11d8:	cf 93       	push	r28
    11da:	df 93       	push	r29
    11dc:	cd b7       	in	r28, 0x3d	; 61
    11de:	de b7       	in	r29, 0x3e	; 62
    11e0:	c4 5a       	subi	r28, 0xA4	; 164
    11e2:	d1 09       	sbc	r29, r1
    11e4:	0f b6       	in	r0, 0x3f	; 63
    11e6:	f8 94       	cli
    11e8:	de bf       	out	0x3e, r29	; 62
    11ea:	0f be       	out	0x3f, r0	; 63
    11ec:	cd bf       	out	0x3d, r28	; 61
    time = get_time_from_start_s();
    11ee:	0e 94 6c 28 	call	0x50d8	; 0x50d8 <get_time_from_start_s>
    time -= d*(3600UL*24UL);
    11f2:	20 e8       	ldi	r18, 0x80	; 128
    11f4:	31 e5       	ldi	r19, 0x51	; 81
    11f6:	41 e0       	ldi	r20, 0x01	; 1
    11f8:	50 e0       	ldi	r21, 0x00	; 0
    11fa:	0e 94 9b 29 	call	0x5336	; 0x5336 <__udivmodsi4>
    11fe:	d2 2e       	mov	r13, r18
    1200:	c3 2e       	mov	r12, r19
    time -= h*3600UL;
    1202:	20 e1       	ldi	r18, 0x10	; 16
    1204:	3e e0       	ldi	r19, 0x0E	; 14
    1206:	40 e0       	ldi	r20, 0x00	; 0
    1208:	50 e0       	ldi	r21, 0x00	; 0
    120a:	0e 94 9b 29 	call	0x5336	; 0x5336 <__udivmodsi4>
    120e:	72 2e       	mov	r7, r18
    1210:	63 2e       	mov	r6, r19
    1212:	cf 55       	subi	r28, 0x5F	; 95
    1214:	df 4f       	sbci	r29, 0xFF	; 255
    1216:	68 83       	st	Y, r22
    1218:	79 83       	std	Y+1, r23	; 0x01
    121a:	8a 83       	std	Y+2, r24	; 0x02
    121c:	9b 83       	std	Y+3, r25	; 0x03
    121e:	c1 5a       	subi	r28, 0xA1	; 161
    1220:	d0 40       	sbci	r29, 0x00	; 0
    m = time/60;
    1222:	2c e3       	ldi	r18, 0x3C	; 60
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	40 e0       	ldi	r20, 0x00	; 0
    1228:	50 e0       	ldi	r21, 0x00	; 0
    122a:	0e 94 9b 29 	call	0x5336	; 0x5336 <__udivmodsi4>
    122e:	49 01       	movw	r8, r18
    s = time - m*60;
    1230:	2c e3       	ldi	r18, 0x3C	; 60
    1232:	28 9d       	mul	r18, r8
    1234:	c0 01       	movw	r24, r0
    1236:	29 9d       	mul	r18, r9
    1238:	90 0d       	add	r25, r0
    123a:	11 24       	eor	r1, r1
    123c:	cf 55       	subi	r28, 0x5F	; 95
    123e:	df 4f       	sbci	r29, 0xFF	; 255
    1240:	e8 80       	ld	r14, Y
    1242:	f9 80       	ldd	r15, Y+1	; 0x01
    1244:	c1 5a       	subi	r28, 0xA1	; 161
    1246:	d0 40       	sbci	r29, 0x00	; 0
    1248:	e8 1a       	sub	r14, r24
    124a:	f9 0a       	sbc	r15, r25
    ptr += sprintf_P(ptr, PSTR("deposit=%s;"), get_arr_dep());
    124c:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <get_arr_dep>
    1250:	9f 93       	push	r25
    1252:	8f 93       	push	r24
    1254:	85 e3       	ldi	r24, 0x35	; 53
    1256:	91 e0       	ldi	r25, 0x01	; 1
    1258:	9f 93       	push	r25
    125a:	8f 93       	push	r24
    125c:	8e 01       	movw	r16, r28
    125e:	0f 5f       	subi	r16, 0xFF	; 255
    1260:	1f 4f       	sbci	r17, 0xFF	; 255
    1262:	1f 93       	push	r17
    1264:	0f 93       	push	r16
    1266:	0e 94 a7 2e 	call	0x5d4e	; 0x5d4e <sprintf_P>
    126a:	08 0f       	add	r16, r24
    126c:	19 1f       	adc	r17, r25
    ptr += sprintf_P(ptr, PSTR("t=%ud%uh%um%us;"), d, h, m, s);
    126e:	ff 92       	push	r15
    1270:	ef 92       	push	r14
    1272:	9f 92       	push	r9
    1274:	8f 92       	push	r8
    1276:	6f 92       	push	r6
    1278:	7f 92       	push	r7
    127a:	cf 92       	push	r12
    127c:	df 92       	push	r13
    127e:	85 e2       	ldi	r24, 0x25	; 37
    1280:	91 e0       	ldi	r25, 0x01	; 1
    1282:	9f 93       	push	r25
    1284:	8f 93       	push	r24
    1286:	1f 93       	push	r17
    1288:	0f 93       	push	r16
    128a:	0e 94 a7 2e 	call	0x5d4e	; 0x5d4e <sprintf_P>
    128e:	08 0f       	add	r16, r24
    1290:	19 1f       	adc	r17, r25
    ptr += sprintf_P(ptr, PSTR("guard=%d;"), get_guard());
    1292:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <get_guard>
    1296:	1f 92       	push	r1
    1298:	8f 93       	push	r24
    129a:	8b e1       	ldi	r24, 0x1B	; 27
    129c:	91 e0       	ldi	r25, 0x01	; 1
    129e:	9f 93       	push	r25
    12a0:	8f 93       	push	r24
    12a2:	1f 93       	push	r17
    12a4:	0f 93       	push	r16
    12a6:	0e 94 a7 2e 	call	0x5d4e	; 0x5d4e <sprintf_P>
    12aa:	08 0f       	add	r16, r24
    12ac:	19 1f       	adc	r17, r25
    ptr += sprintf_P(ptr, PSTR("temp=%dC;"), get_temperature());
    12ae:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <get_temperature>
    12b2:	28 2f       	mov	r18, r24
    12b4:	08 2e       	mov	r0, r24
    12b6:	00 0c       	add	r0, r0
    12b8:	33 0b       	sbc	r19, r19
    12ba:	3f 93       	push	r19
    12bc:	8f 93       	push	r24
    12be:	81 e1       	ldi	r24, 0x11	; 17
    12c0:	91 e0       	ldi	r25, 0x01	; 1
    12c2:	9f 93       	push	r25
    12c4:	8f 93       	push	r24
    12c6:	1f 93       	push	r17
    12c8:	0f 93       	push	r16
    12ca:	0e 94 a7 2e 	call	0x5d4e	; 0x5d4e <sprintf_P>
    12ce:	08 0f       	add	r16, r24
    12d0:	19 1f       	adc	r17, r25
    ptr += sprintf_P(ptr, PSTR("mcu=%u;"), get_reset_count_mcu());
    12d2:	0e 94 04 11 	call	0x2208	; 0x2208 <get_reset_count_mcu>
    12d6:	1f 92       	push	r1
    12d8:	8f 93       	push	r24
    12da:	89 e0       	ldi	r24, 0x09	; 9
    12dc:	91 e0       	ldi	r25, 0x01	; 1
    12de:	9f 93       	push	r25
    12e0:	8f 93       	push	r24
    12e2:	1f 93       	push	r17
    12e4:	0f 93       	push	r16
    12e6:	0e 94 a7 2e 	call	0x5d4e	; 0x5d4e <sprintf_P>
    12ea:	08 0f       	add	r16, r24
    12ec:	19 1f       	adc	r17, r25
    ptr += sprintf_P(ptr, PSTR("signal_gsm=%d%%;"), mdm_get_signal_strength());
    12ee:	0f b6       	in	r0, 0x3f	; 63
    12f0:	f8 94       	cli
    12f2:	de bf       	out	0x3e, r29	; 62
    12f4:	0f be       	out	0x3f, r0	; 63
    12f6:	cd bf       	out	0x3d, r28	; 61
    12f8:	0e 94 a3 13 	call	0x2746	; 0x2746 <mdm_get_signal_strength>
    12fc:	1f 92       	push	r1
    12fe:	8f 93       	push	r24
    1300:	88 ef       	ldi	r24, 0xF8	; 248
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	9f 93       	push	r25
    1306:	8f 93       	push	r24
    1308:	1f 93       	push	r17
    130a:	0f 93       	push	r16
    130c:	0e 94 a7 2e 	call	0x5d4e	; 0x5d4e <sprintf_P>
    1310:	e8 2e       	mov	r14, r24
    1312:	f9 2e       	mov	r15, r25
    if(get_time_without_power_s() != 0)
    1314:	0f 90       	pop	r0
    1316:	0f 90       	pop	r0
    1318:	0f 90       	pop	r0
    131a:	0f 90       	pop	r0
    131c:	0f 90       	pop	r0
    131e:	0f 90       	pop	r0
    1320:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <time_without_power_s>
    1324:	90 91 f5 01 	lds	r25, 0x01F5	; 0x8001f5 <time_without_power_s+0x1>
    1328:	a0 91 f6 01 	lds	r26, 0x01F6	; 0x8001f6 <time_without_power_s+0x2>
    132c:	b0 91 f7 01 	lds	r27, 0x01F7	; 0x8001f7 <time_without_power_s+0x3>
    1330:	89 2b       	or	r24, r25
    1332:	8a 2b       	or	r24, r26
    1334:	8b 2b       	or	r24, r27
    1336:	d1 f4       	brne	.+52     	; 0x136c <debug_report+0x1ac>
    softuart_puts_ln(sms);
    1338:	ce 01       	movw	r24, r28
    133a:	01 96       	adiw	r24, 0x01	; 1
    133c:	0e 94 f3 25 	call	0x4be6	; 0x4be6 <softuart_puts_ln>
}
    1340:	cc 55       	subi	r28, 0x5C	; 92
    1342:	df 4f       	sbci	r29, 0xFF	; 255
    1344:	0f b6       	in	r0, 0x3f	; 63
    1346:	f8 94       	cli
    1348:	de bf       	out	0x3e, r29	; 62
    134a:	0f be       	out	0x3f, r0	; 63
    134c:	cd bf       	out	0x3d, r28	; 61
    134e:	df 91       	pop	r29
    1350:	cf 91       	pop	r28
    1352:	1f 91       	pop	r17
    1354:	0f 91       	pop	r16
    1356:	ff 90       	pop	r15
    1358:	ef 90       	pop	r14
    135a:	df 90       	pop	r13
    135c:	cf 90       	pop	r12
    135e:	bf 90       	pop	r11
    1360:	af 90       	pop	r10
    1362:	9f 90       	pop	r9
    1364:	8f 90       	pop	r8
    1366:	7f 90       	pop	r7
    1368:	6f 90       	pop	r6
    136a:	08 95       	ret
        ptr += sprintf_P(ptr, PSTR("Battery=%d%%, "), level_battery());
    136c:	0e 94 c0 08 	call	0x1180	; 0x1180 <level_battery>
    1370:	1f 92       	push	r1
    1372:	8f 93       	push	r24
    1374:	89 ee       	ldi	r24, 0xE9	; 233
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	9f 93       	push	r25
    137a:	8f 93       	push	r24
    ptr += sprintf_P(ptr, PSTR("signal_gsm=%d%%;"), mdm_get_signal_strength());
    137c:	0e 0d       	add	r16, r14
    137e:	1f 1d       	adc	r17, r15
        ptr += sprintf_P(ptr, PSTR("Battery=%d%%, "), level_battery());
    1380:	1f 93       	push	r17
    1382:	0f 93       	push	r16
    1384:	0e 94 a7 2e 	call	0x5d4e	; 0x5d4e <sprintf_P>
    1388:	0f 90       	pop	r0
    138a:	0f 90       	pop	r0
    138c:	0f 90       	pop	r0
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	0f 90       	pop	r0
    1394:	d1 cf       	rjmp	.-94     	; 0x1338 <debug_report+0x178>

00001396 <power_control>:
{
    1396:	cf 93       	push	r28
    1398:	df 93       	push	r29
    139a:	00 d0       	rcall	.+0      	; 0x139c <power_control+0x6>
    139c:	00 d0       	rcall	.+0      	; 0x139e <power_control+0x8>
    139e:	cd b7       	in	r28, 0x3d	; 61
    13a0:	de b7       	in	r29, 0x3e	; 62
    if(time_without_power_s == 0)   // power+++
    13a2:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <time_without_power_s>
    13a6:	90 91 f5 01 	lds	r25, 0x01F5	; 0x8001f5 <time_without_power_s+0x1>
    13aa:	a0 91 f6 01 	lds	r26, 0x01F6	; 0x8001f6 <time_without_power_s+0x2>
    13ae:	b0 91 f7 01 	lds	r27, 0x01F7	; 0x8001f7 <time_without_power_s+0x3>
    13b2:	89 2b       	or	r24, r25
    13b4:	8a 2b       	or	r24, r26
    13b6:	8b 2b       	or	r24, r27
    13b8:	61 f0       	breq	.+24     	; 0x13d2 <power_control+0x3c>
    if(get_power_report() == 1)  ///  power---
    13ba:	0e 94 dd 10 	call	0x21ba	; 0x21ba <get_power_report>
    13be:	81 30       	cpi	r24, 0x01	; 1
    13c0:	09 f4       	brne	.+2      	; 0x13c4 <power_control+0x2e>
    13c2:	63 c0       	rjmp	.+198    	; 0x148a <power_control+0xf4>
}
    13c4:	0f 90       	pop	r0
    13c6:	0f 90       	pop	r0
    13c8:	0f 90       	pop	r0
    13ca:	0f 90       	pop	r0
    13cc:	df 91       	pop	r29
    13ce:	cf 91       	pop	r28
    13d0:	08 95       	ret
        if(get_power_report() == 1)
    13d2:	0e 94 dd 10 	call	0x21ba	; 0x21ba <get_power_report>
    13d6:	81 30       	cpi	r24, 0x01	; 1
    13d8:	a9 f7       	brne	.-22     	; 0x13c4 <power_control+0x2e>
            if(flag_guard == 0)
    13da:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <flag_guard.18>
    13de:	88 23       	and	r24, r24
    13e0:	69 f0       	breq	.+26     	; 0x13fc <power_control+0x66>
            if(flag_time_on == 0)
    13e2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <flag_time_on.15>
    13e6:	88 23       	and	r24, r24
    13e8:	99 f0       	breq	.+38     	; 0x1410 <power_control+0x7a>
            if(report_on == 1)
    13ea:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <report_on.13>
    13ee:	81 30       	cpi	r24, 0x01	; 1
    13f0:	49 f7       	brne	.-46     	; 0x13c4 <power_control+0x2e>
                if(flag_time_on == 1 && (time_stamp_on < get_time_s()))
    13f2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <flag_time_on.15>
    13f6:	81 30       	cpi	r24, 0x01	; 1
    13f8:	29 f7       	brne	.-54     	; 0x13c4 <power_control+0x2e>
    13fa:	1f c0       	rjmp	.+62     	; 0x143a <power_control+0xa4>
                flag_guard = 1;
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <flag_guard.18>
                report_bat = 0;
    1402:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <report_bat.17>
                softuart_puts_p(PSTR("power+++"));
    1406:	80 ee       	ldi	r24, 0xE0	; 224
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <softuart_puts_p>
    140e:	e9 cf       	rjmp	.-46     	; 0x13e2 <power_control+0x4c>
                time_stamp_on = get_time_s() + PAUSE_SMS_PWR_ON;
    1410:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <get_time_s>
    1414:	dc 01       	movw	r26, r24
    1416:	cb 01       	movw	r24, r22
    1418:	88 58       	subi	r24, 0x88	; 136
    141a:	9f 4f       	sbci	r25, 0xFF	; 255
    141c:	af 4f       	sbci	r26, 0xFF	; 255
    141e:	bf 4f       	sbci	r27, 0xFF	; 255
    1420:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <time_stamp_on.14>
    1424:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <time_stamp_on.14+0x1>
    1428:	a0 93 e9 01 	sts	0x01E9, r26	; 0x8001e9 <time_stamp_on.14+0x2>
    142c:	b0 93 ea 01 	sts	0x01EA, r27	; 0x8001ea <time_stamp_on.14+0x3>
                flag_time_on = 1;
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <flag_time_on.15>
                report_on = 1;
    1436:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <report_on.13>
                if(flag_time_on == 1 && (time_stamp_on < get_time_s()))
    143a:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <get_time_s>
    143e:	69 83       	std	Y+1, r22	; 0x01
    1440:	7a 83       	std	Y+2, r23	; 0x02
    1442:	8b 83       	std	Y+3, r24	; 0x03
    1444:	9c 83       	std	Y+4, r25	; 0x04
    1446:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <time_stamp_on.14>
    144a:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <time_stamp_on.14+0x1>
    144e:	a0 91 e9 01 	lds	r26, 0x01E9	; 0x8001e9 <time_stamp_on.14+0x2>
    1452:	b0 91 ea 01 	lds	r27, 0x01EA	; 0x8001ea <time_stamp_on.14+0x3>
    1456:	29 81       	ldd	r18, Y+1	; 0x01
    1458:	3a 81       	ldd	r19, Y+2	; 0x02
    145a:	4b 81       	ldd	r20, Y+3	; 0x03
    145c:	5c 81       	ldd	r21, Y+4	; 0x04
    145e:	82 17       	cp	r24, r18
    1460:	93 07       	cpc	r25, r19
    1462:	a4 07       	cpc	r26, r20
    1464:	b5 07       	cpc	r27, r21
    1466:	08 f0       	brcs	.+2      	; 0x146a <power_control+0xd4>
    1468:	ad cf       	rjmp	.-166    	; 0x13c4 <power_control+0x2e>
                    report_on = 0;
    146a:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <report_on.13>
                    flag_time_off = 1;
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <flag_time_off.12>
                    flag_sms = 0;
    1474:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <flag_sms.11>
                    softuart_puts_p(PSTR("sms=power on"));
    1478:	83 ed       	ldi	r24, 0xD3	; 211
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <softuart_puts_p>
                    send_sms_admins(PSTR("External power is on"));
    1480:	8e eb       	ldi	r24, 0xBE	; 190
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <send_sms_admins>
    1488:	9d cf       	rjmp	.-198    	; 0x13c4 <power_control+0x2e>
        time_stamp_off = get_val(time_without_power_s);
    148a:	2f b7       	in	r18, 0x3f	; 63
    148c:	f8 94       	cli
    148e:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <time_without_power_s>
    1492:	90 91 f5 01 	lds	r25, 0x01F5	; 0x8001f5 <time_without_power_s+0x1>
    1496:	a0 91 f6 01 	lds	r26, 0x01F6	; 0x8001f6 <time_without_power_s+0x2>
    149a:	b0 91 f7 01 	lds	r27, 0x01F7	; 0x8001f7 <time_without_power_s+0x3>
    149e:	2f bf       	out	0x3f, r18	; 63
    14a0:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <time_stamp_off.8>
    14a4:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <time_stamp_off.8+0x1>
    14a8:	a0 93 e3 01 	sts	0x01E3, r26	; 0x8001e3 <time_stamp_off.8+0x2>
    14ac:	b0 93 e4 01 	sts	0x01E4, r27	; 0x8001e4 <time_stamp_off.8+0x3>
        time_stamp_on = get_time_s() + PAUSE_SMS_PWR_ON;
    14b0:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <get_time_s>
    14b4:	dc 01       	movw	r26, r24
    14b6:	cb 01       	movw	r24, r22
    14b8:	88 58       	subi	r24, 0x88	; 136
    14ba:	9f 4f       	sbci	r25, 0xFF	; 255
    14bc:	af 4f       	sbci	r26, 0xFF	; 255
    14be:	bf 4f       	sbci	r27, 0xFF	; 255
    14c0:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <time_stamp_on.14>
    14c4:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <time_stamp_on.14+0x1>
    14c8:	a0 93 e9 01 	sts	0x01E9, r26	; 0x8001e9 <time_stamp_on.14+0x2>
    14cc:	b0 93 ea 01 	sts	0x01EA, r27	; 0x8001ea <time_stamp_on.14+0x3>
        if(flag_guard == 1)
    14d0:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <flag_guard.18>
    14d4:	81 30       	cpi	r24, 0x01	; 1
    14d6:	09 f4       	brne	.+2      	; 0x14da <power_control+0x144>
    14d8:	50 c0       	rjmp	.+160    	; 0x157a <power_control+0x1e4>
        if(flag_time_off == 1 && time_stamp_off > PAUSE_SMS_PWR_OFF)
    14da:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <flag_time_off.12>
    14de:	81 30       	cpi	r24, 0x01	; 1
    14e0:	09 f4       	brne	.+2      	; 0x14e4 <power_control+0x14e>
    14e2:	52 c0       	rjmp	.+164    	; 0x1588 <power_control+0x1f2>
        if(report_off == 1)
    14e4:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <report_off.6>
    14e8:	81 30       	cpi	r24, 0x01	; 1
    14ea:	09 f4       	brne	.+2      	; 0x14ee <power_control+0x158>
    14ec:	5b c0       	rjmp	.+182    	; 0x15a4 <power_control+0x20e>
        if(report_bat == 1 && (get_time_s() > time_stamp_bat))
    14ee:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <report_bat.17>
    14f2:	81 30       	cpi	r24, 0x01	; 1
    14f4:	09 f0       	breq	.+2      	; 0x14f8 <power_control+0x162>
    14f6:	66 cf       	rjmp	.-308    	; 0x13c4 <power_control+0x2e>
    14f8:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <get_time_s>
    14fc:	69 83       	std	Y+1, r22	; 0x01
    14fe:	7a 83       	std	Y+2, r23	; 0x02
    1500:	8b 83       	std	Y+3, r24	; 0x03
    1502:	9c 83       	std	Y+4, r25	; 0x04
    1504:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <time_stamp_bat.3>
    1508:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <time_stamp_bat.3+0x1>
    150c:	a0 91 de 01 	lds	r26, 0x01DE	; 0x8001de <time_stamp_bat.3+0x2>
    1510:	b0 91 df 01 	lds	r27, 0x01DF	; 0x8001df <time_stamp_bat.3+0x3>
    1514:	29 81       	ldd	r18, Y+1	; 0x01
    1516:	3a 81       	ldd	r19, Y+2	; 0x02
    1518:	4b 81       	ldd	r20, Y+3	; 0x03
    151a:	5c 81       	ldd	r21, Y+4	; 0x04
    151c:	82 17       	cp	r24, r18
    151e:	93 07       	cpc	r25, r19
    1520:	a4 07       	cpc	r26, r20
    1522:	b5 07       	cpc	r27, r21
    1524:	08 f0       	brcs	.+2      	; 0x1528 <power_control+0x192>
    1526:	4e cf       	rjmp	.-356    	; 0x13c4 <power_control+0x2e>
            softuart_puts_p(PSTR("check battery"));
    1528:	83 e8       	ldi	r24, 0x83	; 131
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <softuart_puts_p>
            time_stamp_bat = get_time_s() + INTERVAL_CHECK_BAT;
    1530:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <get_time_s>
    1534:	dc 01       	movw	r26, r24
    1536:	cb 01       	movw	r24, r22
    1538:	86 5a       	subi	r24, 0xA6	; 166
    153a:	9f 4f       	sbci	r25, 0xFF	; 255
    153c:	af 4f       	sbci	r26, 0xFF	; 255
    153e:	bf 4f       	sbci	r27, 0xFF	; 255
    1540:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <time_stamp_bat.3>
    1544:	90 93 dd 01 	sts	0x01DD, r25	; 0x8001dd <time_stamp_bat.3+0x1>
    1548:	a0 93 de 01 	sts	0x01DE, r26	; 0x8001de <time_stamp_bat.3+0x2>
    154c:	b0 93 df 01 	sts	0x01DF, r27	; 0x8001df <time_stamp_bat.3+0x3>
            if(level_battery() < 25 && flag_sms == 0)
    1550:	0e 94 c0 08 	call	0x1180	; 0x1180 <level_battery>
    1554:	89 31       	cpi	r24, 0x19	; 25
    1556:	08 f0       	brcs	.+2      	; 0x155a <power_control+0x1c4>
    1558:	35 cf       	rjmp	.-406    	; 0x13c4 <power_control+0x2e>
    155a:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <flag_sms.11>
    155e:	81 11       	cpse	r24, r1
    1560:	31 cf       	rjmp	.-414    	; 0x13c4 <power_control+0x2e>
                flag_sms = 1;
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <flag_sms.11>
                if(get_accept_sms() == 1)
    1568:	0e 94 da 10 	call	0x21b4	; 0x21b4 <get_accept_sms>
    156c:	81 30       	cpi	r24, 0x01	; 1
    156e:	61 f1       	breq	.+88     	; 0x15c8 <power_control+0x232>
                softuart_puts_p(PSTR("sms=low bat"));
    1570:	88 e6       	ldi	r24, 0x68	; 104
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <softuart_puts_p>
    1578:	25 cf       	rjmp	.-438    	; 0x13c4 <power_control+0x2e>
            flag_guard = 0;
    157a:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <flag_guard.18>
            softuart_puts_p(PSTR("power---"));
    157e:	85 eb       	ldi	r24, 0xB5	; 181
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <softuart_puts_p>
    1586:	a9 cf       	rjmp	.-174    	; 0x14da <power_control+0x144>
        if(flag_time_off == 1 && time_stamp_off > PAUSE_SMS_PWR_OFF)
    1588:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <time_stamp_off.8>
    158c:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <time_stamp_off.8+0x1>
    1590:	a0 91 e3 01 	lds	r26, 0x01E3	; 0x8001e3 <time_stamp_off.8+0x2>
    1594:	b0 91 e4 01 	lds	r27, 0x01E4	; 0x8001e4 <time_stamp_off.8+0x3>
    1598:	89 37       	cpi	r24, 0x79	; 121
    159a:	91 05       	cpc	r25, r1
    159c:	a1 05       	cpc	r26, r1
    159e:	b1 05       	cpc	r27, r1
    15a0:	08 f4       	brcc	.+2      	; 0x15a4 <power_control+0x20e>
    15a2:	a0 cf       	rjmp	.-192    	; 0x14e4 <power_control+0x14e>
            report_off = 0;
    15a4:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <report_off.6>
            flag_time_on = 0;
    15a8:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <flag_time_on.15>
            flag_time_off = 0;
    15ac:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <flag_time_off.12>
            report_bat = 1;
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <report_bat.17>
            softuart_puts_p(PSTR("sms=power_off"));
    15b6:	87 ea       	ldi	r24, 0xA7	; 167
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <softuart_puts_p>
            send_sms_admins(PSTR("External power is off"));
    15be:	81 e9       	ldi	r24, 0x91	; 145
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <send_sms_admins>
    15c6:	93 cf       	rjmp	.-218    	; 0x14ee <power_control+0x158>
                    send_sms_admins(PSTR("Battery LOW!!!"));
    15c8:	84 e7       	ldi	r24, 0x74	; 116
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <send_sms_admins>
    15d0:	cf cf       	rjmp	.-98     	; 0x1570 <power_control+0x1da>

000015d2 <send_sms_report>:
{
    15d2:	cf 92       	push	r12
    15d4:	df 92       	push	r13
    15d6:	ef 92       	push	r14
    15d8:	ff 92       	push	r15
    15da:	0f 93       	push	r16
    15dc:	1f 93       	push	r17
    15de:	cf 93       	push	r28
    15e0:	df 93       	push	r29
    15e2:	cd b7       	in	r28, 0x3d	; 61
    15e4:	de b7       	in	r29, 0x3e	; 62
    15e6:	c0 5a       	subi	r28, 0xA0	; 160
    15e8:	d1 09       	sbc	r29, r1
    15ea:	0f b6       	in	r0, 0x3f	; 63
    15ec:	f8 94       	cli
    15ee:	de bf       	out	0x3e, r29	; 62
    15f0:	0f be       	out	0x3f, r0	; 63
    15f2:	cd bf       	out	0x3d, r28	; 61
    15f4:	e8 2e       	mov	r14, r24
    15f6:	f9 2e       	mov	r15, r25
    send_USSD();
    15f8:	0e 94 be 1b 	call	0x377c	; 0x377c <send_USSD>
    ptr += sprintf_P(ptr, PSTR("Deposit=%s;"), get_arr_dep());
    15fc:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <get_arr_dep>
    1600:	9f 93       	push	r25
    1602:	8f 93       	push	r24
    1604:	8d ef       	ldi	r24, 0xFD	; 253
    1606:	91 e0       	ldi	r25, 0x01	; 1
    1608:	9f 93       	push	r25
    160a:	8f 93       	push	r24
    160c:	8e 01       	movw	r16, r28
    160e:	0f 5f       	subi	r16, 0xFF	; 255
    1610:	1f 4f       	sbci	r17, 0xFF	; 255
    1612:	1f 93       	push	r17
    1614:	0f 93       	push	r16
    1616:	0e 94 a7 2e 	call	0x5d4e	; 0x5d4e <sprintf_P>
    161a:	08 0f       	add	r16, r24
    161c:	19 1f       	adc	r17, r25
    ptr += sprintf_P(ptr, PSTR("Guard=%d;"), get_guard());
    161e:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <get_guard>
    1622:	1f 92       	push	r1
    1624:	8f 93       	push	r24
    1626:	83 ef       	ldi	r24, 0xF3	; 243
    1628:	91 e0       	ldi	r25, 0x01	; 1
    162a:	9f 93       	push	r25
    162c:	8f 93       	push	r24
    162e:	1f 93       	push	r17
    1630:	0f 93       	push	r16
    1632:	0e 94 a7 2e 	call	0x5d4e	; 0x5d4e <sprintf_P>
    1636:	08 0f       	add	r16, r24
    1638:	19 1f       	adc	r17, r25
    ptr += sprintf_P(ptr, PSTR("Temp_int=%dC;"), analog_read(INT_TEMP));
    163a:	88 e0       	ldi	r24, 0x08	; 8
    163c:	0e 94 1a 08 	call	0x1034	; 0x1034 <analog_read>
    1640:	9f 93       	push	r25
    1642:	8f 93       	push	r24
    1644:	85 ee       	ldi	r24, 0xE5	; 229
    1646:	91 e0       	ldi	r25, 0x01	; 1
    1648:	9f 93       	push	r25
    164a:	8f 93       	push	r24
    164c:	1f 93       	push	r17
    164e:	0f 93       	push	r16
    1650:	0e 94 a7 2e 	call	0x5d4e	; 0x5d4e <sprintf_P>
    1654:	08 0f       	add	r16, r24
    1656:	19 1f       	adc	r17, r25
    if(get_ext_temp() == 1)
    1658:	0e 94 2b 11 	call	0x2256	; 0x2256 <get_ext_temp>
    165c:	0f b6       	in	r0, 0x3f	; 63
    165e:	f8 94       	cli
    1660:	de bf       	out	0x3e, r29	; 62
    1662:	0f be       	out	0x3f, r0	; 63
    1664:	cd bf       	out	0x3d, r28	; 61
    1666:	81 30       	cpi	r24, 0x01	; 1
    1668:	09 f4       	brne	.+2      	; 0x166c <send_sms_report+0x9a>
    166a:	43 c0       	rjmp	.+134    	; 0x16f2 <send_sms_report+0x120>
    ptr += sprintf_P(ptr, PSTR("GSM=%d%%;"), mdm_get_signal_strength());
    166c:	0e 94 a3 13 	call	0x2746	; 0x2746 <mdm_get_signal_strength>
    1670:	1f 92       	push	r1
    1672:	8f 93       	push	r24
    1674:	8d ec       	ldi	r24, 0xCD	; 205
    1676:	91 e0       	ldi	r25, 0x01	; 1
    1678:	9f 93       	push	r25
    167a:	8f 93       	push	r24
    167c:	1f 93       	push	r17
    167e:	0f 93       	push	r16
    1680:	0e 94 a7 2e 	call	0x5d4e	; 0x5d4e <sprintf_P>
    1684:	08 0f       	add	r16, r24
    1686:	19 1f       	adc	r17, r25
    ptr += sprintf_P(ptr, PSTR("rst_mcu=%u;"), get_reset_count_mcu());
    1688:	0e 94 04 11 	call	0x2208	; 0x2208 <get_reset_count_mcu>
    168c:	1f 92       	push	r1
    168e:	8f 93       	push	r24
    1690:	81 ec       	ldi	r24, 0xC1	; 193
    1692:	91 e0       	ldi	r25, 0x01	; 1
    1694:	9f 93       	push	r25
    1696:	8f 93       	push	r24
    1698:	1f 93       	push	r17
    169a:	0f 93       	push	r16
    169c:	0e 94 a7 2e 	call	0x5d4e	; 0x5d4e <sprintf_P>
    16a0:	c8 2e       	mov	r12, r24
    16a2:	d9 2e       	mov	r13, r25
    if(get_time_without_power_s() > 0)
    16a4:	0f b6       	in	r0, 0x3f	; 63
    16a6:	f8 94       	cli
    16a8:	de bf       	out	0x3e, r29	; 62
    16aa:	0f be       	out	0x3f, r0	; 63
    16ac:	cd bf       	out	0x3d, r28	; 61
    16ae:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <time_without_power_s>
    16b2:	90 91 f5 01 	lds	r25, 0x01F5	; 0x8001f5 <time_without_power_s+0x1>
    16b6:	a0 91 f6 01 	lds	r26, 0x01F6	; 0x8001f6 <time_without_power_s+0x2>
    16ba:	b0 91 f7 01 	lds	r27, 0x01F7	; 0x8001f7 <time_without_power_s+0x3>
    16be:	89 2b       	or	r24, r25
    16c0:	8a 2b       	or	r24, r26
    16c2:	8b 2b       	or	r24, r27
    16c4:	79 f5       	brne	.+94     	; 0x1724 <send_sms_report+0x152>
    send_sms(sms, phone);
    16c6:	6e 2d       	mov	r22, r14
    16c8:	7f 2d       	mov	r23, r15
    16ca:	ce 01       	movw	r24, r28
    16cc:	01 96       	adiw	r24, 0x01	; 1
    16ce:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <send_sms>
}
    16d2:	c0 56       	subi	r28, 0x60	; 96
    16d4:	df 4f       	sbci	r29, 0xFF	; 255
    16d6:	0f b6       	in	r0, 0x3f	; 63
    16d8:	f8 94       	cli
    16da:	de bf       	out	0x3e, r29	; 62
    16dc:	0f be       	out	0x3f, r0	; 63
    16de:	cd bf       	out	0x3d, r28	; 61
    16e0:	df 91       	pop	r29
    16e2:	cf 91       	pop	r28
    16e4:	1f 91       	pop	r17
    16e6:	0f 91       	pop	r16
    16e8:	ff 90       	pop	r15
    16ea:	ef 90       	pop	r14
    16ec:	df 90       	pop	r13
    16ee:	cf 90       	pop	r12
    16f0:	08 95       	ret
        ptr += sprintf_P(ptr, PSTR("Temp_ext=%dC;"), get_temperature());
    16f2:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <get_temperature>
    16f6:	28 2f       	mov	r18, r24
    16f8:	08 2e       	mov	r0, r24
    16fa:	00 0c       	add	r0, r0
    16fc:	33 0b       	sbc	r19, r19
    16fe:	3f 93       	push	r19
    1700:	8f 93       	push	r24
    1702:	87 ed       	ldi	r24, 0xD7	; 215
    1704:	91 e0       	ldi	r25, 0x01	; 1
    1706:	9f 93       	push	r25
    1708:	8f 93       	push	r24
    170a:	1f 93       	push	r17
    170c:	0f 93       	push	r16
    170e:	0e 94 a7 2e 	call	0x5d4e	; 0x5d4e <sprintf_P>
    1712:	08 0f       	add	r16, r24
    1714:	19 1f       	adc	r17, r25
    1716:	0f 90       	pop	r0
    1718:	0f 90       	pop	r0
    171a:	0f 90       	pop	r0
    171c:	0f 90       	pop	r0
    171e:	0f 90       	pop	r0
    1720:	0f 90       	pop	r0
    1722:	a4 cf       	rjmp	.-184    	; 0x166c <send_sms_report+0x9a>
        ptr += sprintf_P(ptr, PSTR("Battery=%d%%, "), level_battery());
    1724:	0e 94 c0 08 	call	0x1180	; 0x1180 <level_battery>
    1728:	1f 92       	push	r1
    172a:	8f 93       	push	r24
    172c:	82 eb       	ldi	r24, 0xB2	; 178
    172e:	91 e0       	ldi	r25, 0x01	; 1
    1730:	9f 93       	push	r25
    1732:	8f 93       	push	r24
    ptr += sprintf_P(ptr, PSTR("rst_mcu=%u;"), get_reset_count_mcu());
    1734:	0c 0d       	add	r16, r12
    1736:	1d 1d       	adc	r17, r13
        ptr += sprintf_P(ptr, PSTR("Battery=%d%%, "), level_battery());
    1738:	1f 93       	push	r17
    173a:	0f 93       	push	r16
    173c:	0e 94 a7 2e 	call	0x5d4e	; 0x5d4e <sprintf_P>
    1740:	0f 90       	pop	r0
    1742:	0f 90       	pop	r0
    1744:	0f 90       	pop	r0
    1746:	0f 90       	pop	r0
    1748:	0f 90       	pop	r0
    174a:	0f 90       	pop	r0
    174c:	bc cf       	rjmp	.-136    	; 0x16c6 <send_sms_report+0xf4>

0000174e <check_temperature_smoke>:
{
    174e:	cf 93       	push	r28
    1750:	df 93       	push	r29
    1752:	00 d0       	rcall	.+0      	; 0x1754 <check_temperature_smoke+0x6>
    1754:	00 d0       	rcall	.+0      	; 0x1756 <check_temperature_smoke+0x8>
    1756:	cd b7       	in	r28, 0x3d	; 61
    1758:	de b7       	in	r29, 0x3e	; 62
    if(flag == 1)
    175a:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <flag.31>
    175e:	81 30       	cpi	r24, 0x01	; 1
    1760:	f1 f0       	breq	.+60     	; 0x179e <check_temperature_smoke+0x50>
    if(get_flag_smoke_sensor())
    1762:	0e 94 ea 1f 	call	0x3fd4	; 0x3fd4 <get_flag_smoke_sensor>
    1766:	81 11       	cpse	r24, r1
    1768:	21 c0       	rjmp	.+66     	; 0x17ac <check_temperature_smoke+0x5e>
    if(get_time_s() > (time_stamp_s + 5))
    176a:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <get_time_s>
    176e:	69 83       	std	Y+1, r22	; 0x01
    1770:	7a 83       	std	Y+2, r23	; 0x02
    1772:	8b 83       	std	Y+3, r24	; 0x03
    1774:	9c 83       	std	Y+4, r25	; 0x04
    1776:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <time_stamp_s.30>
    177a:	90 91 ee 01 	lds	r25, 0x01EE	; 0x8001ee <time_stamp_s.30+0x1>
    177e:	a0 91 ef 01 	lds	r26, 0x01EF	; 0x8001ef <time_stamp_s.30+0x2>
    1782:	b0 91 f0 01 	lds	r27, 0x01F0	; 0x8001f0 <time_stamp_s.30+0x3>
    1786:	05 96       	adiw	r24, 0x05	; 5
    1788:	a1 1d       	adc	r26, r1
    178a:	b1 1d       	adc	r27, r1
    178c:	29 81       	ldd	r18, Y+1	; 0x01
    178e:	3a 81       	ldd	r19, Y+2	; 0x02
    1790:	4b 81       	ldd	r20, Y+3	; 0x03
    1792:	5c 81       	ldd	r21, Y+4	; 0x04
    1794:	82 17       	cp	r24, r18
    1796:	93 07       	cpc	r25, r19
    1798:	a4 07       	cpc	r26, r20
    179a:	b5 07       	cpc	r27, r21
    179c:	98 f0       	brcs	.+38     	; 0x17c4 <check_temperature_smoke+0x76>
}
    179e:	0f 90       	pop	r0
    17a0:	0f 90       	pop	r0
    17a2:	0f 90       	pop	r0
    17a4:	0f 90       	pop	r0
    17a6:	df 91       	pop	r29
    17a8:	cf 91       	pop	r28
    17aa:	08 95       	ret
        flag = 1;
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <flag.31>
        softuart_puts_ln("Alarm! SMOKE!!!");
    17b2:	86 e2       	ldi	r24, 0x26	; 38
    17b4:	91 e0       	ldi	r25, 0x01	; 1
    17b6:	0e 94 f3 25 	call	0x4be6	; 0x4be6 <softuart_puts_ln>
        beep_non_block(500);
    17ba:	84 ef       	ldi	r24, 0xF4	; 244
    17bc:	91 e0       	ldi	r25, 0x01	; 1
    17be:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <beep_non_block>
    17c2:	d3 cf       	rjmp	.-90     	; 0x176a <check_temperature_smoke+0x1c>
        time_stamp_s = get_time_s();
    17c4:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <get_time_s>
    17c8:	60 93 ed 01 	sts	0x01ED, r22	; 0x8001ed <time_stamp_s.30>
    17cc:	70 93 ee 01 	sts	0x01EE, r23	; 0x8001ee <time_stamp_s.30+0x1>
    17d0:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <time_stamp_s.30+0x2>
    17d4:	90 93 f0 01 	sts	0x01F0, r25	; 0x8001f0 <time_stamp_s.30+0x3>
        if(get_ext_temp() == 1)
    17d8:	0e 94 2b 11 	call	0x2256	; 0x2256 <get_ext_temp>
    17dc:	81 30       	cpi	r24, 0x01	; 1
    17de:	b1 f0       	breq	.+44     	; 0x180c <check_temperature_smoke+0xbe>
        if(analog_read(INT_TEMP) > 65)
    17e0:	88 e0       	ldi	r24, 0x08	; 8
    17e2:	0e 94 1a 08 	call	0x1034	; 0x1034 <analog_read>
    17e6:	82 34       	cpi	r24, 0x42	; 66
    17e8:	91 05       	cpc	r25, r1
    17ea:	cc f2       	brlt	.-78     	; 0x179e <check_temperature_smoke+0x50>
            flag = 1;
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <flag.31>
            softuart_puts_p(PSTR("Alarm! Internal TEMPERATURE!!!"));
    17f2:	87 e6       	ldi	r24, 0x67	; 103
    17f4:	91 e0       	ldi	r25, 0x01	; 1
    17f6:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <softuart_puts_p>
            buzzer_non_block(60000); //60 sec
    17fa:	80 e6       	ldi	r24, 0x60	; 96
    17fc:	9a ee       	ldi	r25, 0xEA	; 234
    17fe:	0e 94 3a 26 	call	0x4c74	; 0x4c74 <buzzer_non_block>
            send_sms_admins(PSTR("Alarm! Internal TEMPERATURE > 65C !!!"));
    1802:	81 e4       	ldi	r24, 0x41	; 65
    1804:	91 e0       	ldi	r25, 0x01	; 1
    1806:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <send_sms_admins>
    180a:	c9 cf       	rjmp	.-110    	; 0x179e <check_temperature_smoke+0x50>
            if(get_temperature() > 65)
    180c:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <get_temperature>
    1810:	82 34       	cpi	r24, 0x42	; 66
    1812:	34 f3       	brlt	.-52     	; 0x17e0 <check_temperature_smoke+0x92>
                flag = 1;
    1814:	81 e0       	ldi	r24, 0x01	; 1
    1816:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <flag.31>
                softuart_puts_p(PSTR("Alarm! TEMPERATURE!!!"));
    181a:	8c e9       	ldi	r24, 0x9C	; 156
    181c:	91 e0       	ldi	r25, 0x01	; 1
    181e:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <softuart_puts_p>
                buzzer_non_block(60000); //60 sec
    1822:	80 e6       	ldi	r24, 0x60	; 96
    1824:	9a ee       	ldi	r25, 0xEA	; 234
    1826:	0e 94 3a 26 	call	0x4c74	; 0x4c74 <buzzer_non_block>
                alarm_play_file(AUDIO_ALARM_TEMPERATURE);
    182a:	86 e3       	ldi	r24, 0x36	; 54
    182c:	91 e0       	ldi	r25, 0x01	; 1
    182e:	0e 94 98 17 	call	0x2f30	; 0x2f30 <alarm_play_file>
                send_sms_admins(PSTR("Alarm! TEMPERATURE!!!"));
    1832:	86 e8       	ldi	r24, 0x86	; 134
    1834:	91 e0       	ldi	r25, 0x01	; 1
    1836:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <send_sms_admins>
    183a:	d2 cf       	rjmp	.-92     	; 0x17e0 <check_temperature_smoke+0x92>

0000183c <charge_bat>:
    while(analog_read(BATTERY) < 580)
    183c:	05 c0       	rjmp	.+10     	; 0x1848 <charge_bat+0xc>
        reset_soft_wdt();
    183e:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <reset_soft_wdt>
        delay_s(5);
    1842:	85 e0       	ldi	r24, 0x05	; 5
    1844:	0e 94 fc 27 	call	0x4ff8	; 0x4ff8 <delay_s>
    while(analog_read(BATTERY) < 580)
    1848:	80 e0       	ldi	r24, 0x00	; 0
    184a:	0e 94 1a 08 	call	0x1034	; 0x1034 <analog_read>
    184e:	84 34       	cpi	r24, 0x44	; 68
    1850:	92 40       	sbci	r25, 0x02	; 2
    1852:	ac f3       	brlt	.-22     	; 0x183e <charge_bat+0x2>
}
    1854:	08 95       	ret

00001856 <__vector_21>:
{}
    1856:	18 95       	reti

00001858 <check_power>:
    if(is_external_pwr())
    1858:	4a 99       	sbic	0x09, 2	; 9
    185a:	14 c0       	rjmp	.+40     	; 0x1884 <check_power+0x2c>
        time_without_power_s++;
    185c:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <time_without_power_s>
    1860:	90 91 f5 01 	lds	r25, 0x01F5	; 0x8001f5 <time_without_power_s+0x1>
    1864:	a0 91 f6 01 	lds	r26, 0x01F6	; 0x8001f6 <time_without_power_s+0x2>
    1868:	b0 91 f7 01 	lds	r27, 0x01F7	; 0x8001f7 <time_without_power_s+0x3>
    186c:	01 96       	adiw	r24, 0x01	; 1
    186e:	a1 1d       	adc	r26, r1
    1870:	b1 1d       	adc	r27, r1
        time_without_power_s = 0;
    1872:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <time_without_power_s>
    1876:	90 93 f5 01 	sts	0x01F5, r25	; 0x8001f5 <time_without_power_s+0x1>
    187a:	a0 93 f6 01 	sts	0x01F6, r26	; 0x8001f6 <time_without_power_s+0x2>
    187e:	b0 93 f7 01 	sts	0x01F7, r27	; 0x8001f7 <time_without_power_s+0x3>
}
    1882:	08 95       	ret
    1884:	80 e0       	ldi	r24, 0x00	; 0
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	dc 01       	movw	r26, r24
    188a:	f3 cf       	rjmp	.-26     	; 0x1872 <check_power+0x1a>

0000188c <rst_default>:
}
//*****************************************************************************

void rst_default(void)
{
    if(is_btn_rst_pressed())
    188c:	0e 94 02 1f 	call	0x3e04	; 0x3e04 <is_btn_rst_pressed>
    1890:	81 11       	cpse	r24, r1
    1892:	01 c0       	rjmp	.+2      	; 0x1896 <rst_default+0xa>
        beep_non_block(100);
        delay_ms(100);
        cli(); // запрещаем прерывания и ждем перезагрузки по сторожевому таймеру
        while(1);
    }
}
    1894:	08 95       	ret
        set_first_usage(0);
    1896:	80 e0       	ldi	r24, 0x00	; 0
    1898:	0e 94 16 11 	call	0x222c	; 0x222c <set_first_usage>
        EEPROM_update();
    189c:	0e 94 c8 10 	call	0x2190	; 0x2190 <EEPROM_update>
        beep_non_block(100);
    18a0:	84 e6       	ldi	r24, 0x64	; 100
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <beep_non_block>
        delay_ms(100);
    18a8:	84 e6       	ldi	r24, 0x64	; 100
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
        beep_non_block(100);
    18b0:	84 e6       	ldi	r24, 0x64	; 100
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <beep_non_block>
        delay_ms(100);
    18b8:	84 e6       	ldi	r24, 0x64	; 100
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
        beep_non_block(100);
    18c0:	84 e6       	ldi	r24, 0x64	; 100
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <beep_non_block>
        delay_ms(100);
    18c8:	84 e6       	ldi	r24, 0x64	; 100
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
        cli(); // запрещаем прерывания и ждем перезагрузки по сторожевому таймеру
    18d0:	f8 94       	cli
        while(1);
    18d2:	ff cf       	rjmp	.-2      	; 0x18d2 <rst_default+0x46>

000018d4 <print_ram_free>:
    return (int) &v - (__brkval == 0 ? (int) &__heap_start : (int) __brkval);
}


void print_ram_free(void)
{
    18d4:	cf 93       	push	r28
    18d6:	df 93       	push	r29
    18d8:	cd b7       	in	r28, 0x3d	; 61
    18da:	de b7       	in	r29, 0x3e	; 62
    18dc:	2c 97       	sbiw	r28, 0x0c	; 12
    18de:	0f b6       	in	r0, 0x3f	; 63
    18e0:	f8 94       	cli
    18e2:	de bf       	out	0x3e, r29	; 62
    18e4:	0f be       	out	0x3f, r0	; 63
    18e6:	cd bf       	out	0x3d, r28	; 61
    return (int) &v - (__brkval == 0 ? (int) &__heap_start : (int) __brkval);
    18e8:	ce 01       	movw	r24, r28
    18ea:	0b 96       	adiw	r24, 0x0b	; 11
    18ec:	20 91 9a 04 	lds	r18, 0x049A	; 0x80049a <__brkval>
    18f0:	30 91 9b 04 	lds	r19, 0x049B	; 0x80049b <__brkval+0x1>
    18f4:	21 15       	cp	r18, r1
    18f6:	31 05       	cpc	r19, r1
    18f8:	c9 f0       	breq	.+50     	; 0x192c <print_ram_free+0x58>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    18fa:	4a e0       	ldi	r20, 0x0A	; 10
    18fc:	be 01       	movw	r22, r28
    18fe:	6f 5f       	subi	r22, 0xFF	; 255
    1900:	7f 4f       	sbci	r23, 0xFF	; 255
    1902:	82 1b       	sub	r24, r18
    1904:	93 0b       	sbc	r25, r19
    1906:	0e 94 57 2e 	call	0x5cae	; 0x5cae <__itoa_ncheck>
    char ch[10];
    itoa(freeRam(), ch, 10);
    softuart_puts("free=");
    190a:	8e e3       	ldi	r24, 0x3E	; 62
    190c:	91 e0       	ldi	r25, 0x01	; 1
    190e:	0e 94 e3 25 	call	0x4bc6	; 0x4bc6 <softuart_puts>
    softuart_puts_ln(ch);
    1912:	ce 01       	movw	r24, r28
    1914:	01 96       	adiw	r24, 0x01	; 1
    1916:	0e 94 f3 25 	call	0x4be6	; 0x4be6 <softuart_puts_ln>
}
    191a:	2c 96       	adiw	r28, 0x0c	; 12
    191c:	0f b6       	in	r0, 0x3f	; 63
    191e:	f8 94       	cli
    1920:	de bf       	out	0x3e, r29	; 62
    1922:	0f be       	out	0x3f, r0	; 63
    1924:	cd bf       	out	0x3d, r28	; 61
    1926:	df 91       	pop	r29
    1928:	cf 91       	pop	r28
    192a:	08 95       	ret
    return (int) &v - (__brkval == 0 ? (int) &__heap_start : (int) __brkval);
    192c:	20 ea       	ldi	r18, 0xA0	; 160
    192e:	34 e0       	ldi	r19, 0x04	; 4
    1930:	e4 cf       	rjmp	.-56     	; 0x18fa <print_ram_free+0x26>

00001932 <OWCheckCRC>:
    return data;
}

/* Calculates CRC value based on the example in Avr-libc reference manual. */
static uint8_t OWCheckCRC(uint8_t *data, uint8_t length)
{
    1932:	28 2f       	mov	r18, r24
    1934:	39 2f       	mov	r19, r25
    1936:	86 2f       	mov	r24, r22
    uint8_t i;
    uint8_t CRCvalue=0;

    for(i=0; i<length; i++)
    1938:	66 23       	and	r22, r22
    193a:	99 f0       	breq	.+38     	; 0x1962 <OWCheckCRC+0x30>
    193c:	f9 01       	movw	r30, r18
    193e:	81 50       	subi	r24, 0x01	; 1
    1940:	2f 5f       	subi	r18, 0xFF	; 255
    1942:	3f 4f       	sbci	r19, 0xFF	; 255
    1944:	28 0f       	add	r18, r24
    1946:	31 1d       	adc	r19, r1
    uint8_t CRCvalue=0;
    1948:	80 e0       	ldi	r24, 0x00	; 0
        CRCvalue=_crc_ibutton_update(CRCvalue,*(data+i));
    194a:	91 91       	ld	r25, Z+

static __inline__ uint8_t
_crc_ibutton_update(uint8_t __crc, uint8_t __data)
{
	uint8_t __i, __pattern;
	__asm__ __volatile__ (
    194c:	89 27       	eor	r24, r25
    194e:	98 e0       	ldi	r25, 0x08	; 8
    1950:	4c e8       	ldi	r20, 0x8C	; 140
    1952:	86 95       	lsr	r24
    1954:	08 f4       	brcc	.+2      	; 0x1958 <OWCheckCRC+0x26>
    1956:	84 27       	eor	r24, r20
    1958:	9a 95       	dec	r25
    195a:	d9 f7       	brne	.-10     	; 0x1952 <OWCheckCRC+0x20>
    for(i=0; i<length; i++)
    195c:	e2 17       	cp	r30, r18
    195e:	f3 07       	cpc	r31, r19
    1960:	a1 f7       	brne	.-24     	; 0x194a <OWCheckCRC+0x18>

    return CRCvalue;
}
    1962:	08 95       	ret

00001964 <OWReset>:
{
    1964:	e8 2f       	mov	r30, r24
    1966:	f9 2f       	mov	r31, r25
    *(pDS18x20->DS18x20_PORT-1) |= _BV(pDS18x20->DS18x20_PIN);
    1968:	a0 81       	ld	r26, Z
    196a:	b1 81       	ldd	r27, Z+1	; 0x01
    196c:	8e 91       	ld	r24, -X
    196e:	92 81       	ldd	r25, Z+2	; 0x02
    1970:	21 e0       	ldi	r18, 0x01	; 1
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	a9 01       	movw	r20, r18
    1976:	02 c0       	rjmp	.+4      	; 0x197c <OWReset+0x18>
    1978:	44 0f       	add	r20, r20
    197a:	55 1f       	adc	r21, r21
    197c:	9a 95       	dec	r25
    197e:	e2 f7       	brpl	.-8      	; 0x1978 <OWReset+0x14>
    1980:	84 2b       	or	r24, r20
    1982:	8c 93       	st	X, r24
    1984:	84 e7       	ldi	r24, 0x74	; 116
    1986:	93 e0       	ldi	r25, 0x03	; 3
    1988:	01 97       	sbiw	r24, 0x01	; 1
    198a:	f1 f7       	brne	.-4      	; 0x1988 <OWReset+0x24>
    198c:	00 c0       	rjmp	.+0      	; 0x198e <OWReset+0x2a>
    *(pDS18x20->DS18x20_PORT-1) &= ~(_BV(pDS18x20->DS18x20_PIN));
    198e:	a0 81       	ld	r26, Z
    1990:	b1 81       	ldd	r27, Z+1	; 0x01
    1992:	4e 91       	ld	r20, -X
    1994:	82 81       	ldd	r24, Z+2	; 0x02
    1996:	b9 01       	movw	r22, r18
    1998:	02 c0       	rjmp	.+4      	; 0x199e <OWReset+0x3a>
    199a:	66 0f       	add	r22, r22
    199c:	77 1f       	adc	r23, r23
    199e:	8a 95       	dec	r24
    19a0:	e2 f7       	brpl	.-8      	; 0x199a <OWReset+0x36>
    19a2:	cb 01       	movw	r24, r22
    19a4:	80 95       	com	r24
    19a6:	84 23       	and	r24, r20
    19a8:	8c 93       	st	X, r24
    19aa:	74 ec       	ldi	r23, 0xC4	; 196
    19ac:	7a 95       	dec	r23
    19ae:	f1 f7       	brne	.-4      	; 0x19ac <OWReset+0x48>
    19b0:	00 c0       	rjmp	.+0      	; 0x19b2 <OWReset+0x4e>
    result = (*(pDS18x20->DS18x20_PORT-2)) & (_BV(pDS18x20->DS18x20_PIN));
    19b2:	a0 81       	ld	r26, Z
    19b4:	b1 81       	ldd	r27, Z+1	; 0x01
    19b6:	12 97       	sbiw	r26, 0x02	; 2
    19b8:	8c 91       	ld	r24, X
    19ba:	92 81       	ldd	r25, Z+2	; 0x02
    19bc:	02 c0       	rjmp	.+4      	; 0x19c2 <OWReset+0x5e>
    19be:	22 0f       	add	r18, r18
    19c0:	33 1f       	adc	r19, r19
    19c2:	9a 95       	dec	r25
    19c4:	e2 f7       	brpl	.-8      	; 0x19be <OWReset+0x5a>
    19c6:	82 23       	and	r24, r18
    19c8:	e1 ee       	ldi	r30, 0xE1	; 225
    19ca:	f2 e0       	ldi	r31, 0x02	; 2
    19cc:	31 97       	sbiw	r30, 0x01	; 1
    19ce:	f1 f7       	brne	.-4      	; 0x19cc <OWReset+0x68>
    19d0:	00 00       	nop
}
    19d2:	08 95       	ret

000019d4 <OWWriteByte>:
{
    19d4:	0f 93       	push	r16
    19d6:	1f 93       	push	r17
    19d8:	cf 93       	push	r28
    19da:	df 93       	push	r29
    19dc:	e8 2f       	mov	r30, r24
    19de:	f9 2f       	mov	r31, r25
    19e0:	28 e0       	ldi	r18, 0x08	; 8
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t mask = 0x01;
    19e4:	91 e0       	ldi	r25, 0x01	; 1
    *(pDS18x20->DS18x20_PORT-1) |= _BV(pDS18x20->DS18x20_PIN);
    19e6:	c1 e0       	ldi	r28, 0x01	; 1
    19e8:	d0 e0       	ldi	r29, 0x00	; 0
    19ea:	16 c0       	rjmp	.+44     	; 0x1a18 <OWWriteByte+0x44>
    19ec:	83 e9       	ldi	r24, 0x93	; 147
    19ee:	8a 95       	dec	r24
    19f0:	f1 f7       	brne	.-4      	; 0x19ee <OWWriteByte+0x1a>
    19f2:	00 c0       	rjmp	.+0      	; 0x19f4 <OWWriteByte+0x20>
        *(pDS18x20->DS18x20_PORT-1) &= ~(_BV(pDS18x20->DS18x20_PIN));
    19f4:	a0 81       	ld	r26, Z
    19f6:	b1 81       	ldd	r27, Z+1	; 0x01
    19f8:	8e 91       	ld	r24, -X
    19fa:	42 81       	ldd	r20, Z+2	; 0x02
    19fc:	8e 01       	movw	r16, r28
    19fe:	02 c0       	rjmp	.+4      	; 0x1a04 <OWWriteByte+0x30>
    1a00:	00 0f       	add	r16, r16
    1a02:	11 1f       	adc	r17, r17
    1a04:	4a 95       	dec	r20
    1a06:	e2 f7       	brpl	.-8      	; 0x1a00 <OWWriteByte+0x2c>
    1a08:	a8 01       	movw	r20, r16
    1a0a:	40 95       	com	r20
    1a0c:	48 23       	and	r20, r24
    1a0e:	4c 93       	st	X, r20
        mask <<= 1;
    1a10:	99 0f       	add	r25, r25
    while (mask)
    1a12:	21 50       	subi	r18, 0x01	; 1
    1a14:	31 09       	sbc	r19, r1
    1a16:	29 f1       	breq	.+74     	; 0x1a62 <OWWriteByte+0x8e>
    *(pDS18x20->DS18x20_PORT-1) |= _BV(pDS18x20->DS18x20_PIN);
    1a18:	a0 81       	ld	r26, Z
    1a1a:	b1 81       	ldd	r27, Z+1	; 0x01
    1a1c:	8e 91       	ld	r24, -X
    1a1e:	42 81       	ldd	r20, Z+2	; 0x02
    1a20:	8e 01       	movw	r16, r28
    1a22:	02 c0       	rjmp	.+4      	; 0x1a28 <OWWriteByte+0x54>
    1a24:	00 0f       	add	r16, r16
    1a26:	11 1f       	adc	r17, r17
    1a28:	4a 95       	dec	r20
    1a2a:	e2 f7       	brpl	.-8      	; 0x1a24 <OWWriteByte+0x50>
    1a2c:	80 2b       	or	r24, r16
    1a2e:	8c 93       	st	X, r24
        OWWriteBit(pDS18x20,value & mask);
    1a30:	86 2f       	mov	r24, r22
    1a32:	89 23       	and	r24, r25
    if (bit)
    1a34:	d9 f2       	breq	.-74     	; 0x19ec <OWWriteByte+0x18>
    1a36:	15 e2       	ldi	r17, 0x25	; 37
    1a38:	1a 95       	dec	r17
    1a3a:	f1 f7       	brne	.-4      	; 0x1a38 <OWWriteByte+0x64>
        *(pDS18x20->DS18x20_PORT-1) &= ~(_BV(pDS18x20->DS18x20_PIN));
    1a3c:	a0 81       	ld	r26, Z
    1a3e:	b1 81       	ldd	r27, Z+1	; 0x01
    1a40:	8e 91       	ld	r24, -X
    1a42:	42 81       	ldd	r20, Z+2	; 0x02
    1a44:	8e 01       	movw	r16, r28
    1a46:	02 c0       	rjmp	.+4      	; 0x1a4c <OWWriteByte+0x78>
    1a48:	00 0f       	add	r16, r16
    1a4a:	11 1f       	adc	r17, r17
    1a4c:	4a 95       	dec	r20
    1a4e:	e2 f7       	brpl	.-8      	; 0x1a48 <OWWriteByte+0x74>
    1a50:	a8 01       	movw	r20, r16
    1a52:	40 95       	com	r20
    1a54:	48 23       	and	r20, r24
    1a56:	4c 93       	st	X, r20
    1a58:	1e e6       	ldi	r17, 0x6E	; 110
    1a5a:	1a 95       	dec	r17
    1a5c:	f1 f7       	brne	.-4      	; 0x1a5a <OWWriteByte+0x86>
    1a5e:	00 c0       	rjmp	.+0      	; 0x1a60 <OWWriteByte+0x8c>
}
    1a60:	d7 cf       	rjmp	.-82     	; 0x1a10 <OWWriteByte+0x3c>
}
    1a62:	df 91       	pop	r29
    1a64:	cf 91       	pop	r28
    1a66:	1f 91       	pop	r17
    1a68:	0f 91       	pop	r16
    1a6a:	08 95       	ret

00001a6c <OWReadBit>:
{
    1a6c:	e8 2f       	mov	r30, r24
    1a6e:	f9 2f       	mov	r31, r25
    *(pDS18x20->DS18x20_PORT-1) |= _BV(pDS18x20->DS18x20_PIN);
    1a70:	a0 81       	ld	r26, Z
    1a72:	b1 81       	ldd	r27, Z+1	; 0x01
    1a74:	2e 91       	ld	r18, -X
    1a76:	32 81       	ldd	r19, Z+2	; 0x02
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	ac 01       	movw	r20, r24
    1a7e:	02 c0       	rjmp	.+4      	; 0x1a84 <OWReadBit+0x18>
    1a80:	44 0f       	add	r20, r20
    1a82:	55 1f       	adc	r21, r21
    1a84:	3a 95       	dec	r19
    1a86:	e2 f7       	brpl	.-8      	; 0x1a80 <OWReadBit+0x14>
    1a88:	24 2b       	or	r18, r20
    1a8a:	2c 93       	st	X, r18
	__builtin_avr_delay_cycles(__ticks_dc);
    1a8c:	2a e0       	ldi	r18, 0x0A	; 10
    1a8e:	2a 95       	dec	r18
    1a90:	f1 f7       	brne	.-4      	; 0x1a8e <OWReadBit+0x22>
    *(pDS18x20->DS18x20_PORT-1) &= ~(_BV(pDS18x20->DS18x20_PIN));
    1a92:	a0 81       	ld	r26, Z
    1a94:	b1 81       	ldd	r27, Z+1	; 0x01
    1a96:	2e 91       	ld	r18, -X
    1a98:	32 81       	ldd	r19, Z+2	; 0x02
    1a9a:	02 c0       	rjmp	.+4      	; 0x1aa0 <OWReadBit+0x34>
    1a9c:	88 0f       	add	r24, r24
    1a9e:	99 1f       	adc	r25, r25
    1aa0:	3a 95       	dec	r19
    1aa2:	e2 f7       	brpl	.-8      	; 0x1a9c <OWReadBit+0x30>
    1aa4:	80 95       	com	r24
    1aa6:	82 23       	and	r24, r18
    1aa8:	8c 93       	st	X, r24
    1aaa:	83 e1       	ldi	r24, 0x13	; 19
    1aac:	8a 95       	dec	r24
    1aae:	f1 f7       	brne	.-4      	; 0x1aac <OWReadBit+0x40>
    1ab0:	00 c0       	rjmp	.+0      	; 0x1ab2 <OWReadBit+0x46>
    if ((*(pDS18x20->DS18x20_PORT-2) & (_BV(pDS18x20->DS18x20_PIN))))
    1ab2:	a0 81       	ld	r26, Z
    1ab4:	b1 81       	ldd	r27, Z+1	; 0x01
    1ab6:	12 97       	sbiw	r26, 0x02	; 2
    1ab8:	8c 91       	ld	r24, X
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	22 81       	ldd	r18, Z+2	; 0x02
    1abe:	02 c0       	rjmp	.+4      	; 0x1ac4 <OWReadBit+0x58>
    1ac0:	95 95       	asr	r25
    1ac2:	87 95       	ror	r24
    1ac4:	2a 95       	dec	r18
    1ac6:	e2 f7       	brpl	.-8      	; 0x1ac0 <OWReadBit+0x54>
    1ac8:	81 70       	andi	r24, 0x01	; 1
    1aca:	96 e7       	ldi	r25, 0x76	; 118
    1acc:	9a 95       	dec	r25
    1ace:	f1 f7       	brne	.-4      	; 0x1acc <OWReadBit+0x60>
}
    1ad0:	08 95       	ret

00001ad2 <init_ds18x20>:
        return 0;
    }
}

void init_ds18x20(void)
{
    1ad2:	4f 92       	push	r4
    1ad4:	5f 92       	push	r5
    1ad6:	6f 92       	push	r6
    1ad8:	7f 92       	push	r7
    1ada:	8f 92       	push	r8
    1adc:	9f 92       	push	r9
    1ade:	af 92       	push	r10
    1ae0:	bf 92       	push	r11
    1ae2:	cf 92       	push	r12
    1ae4:	df 92       	push	r13
    1ae6:	ef 92       	push	r14
    1ae8:	ff 92       	push	r15
    1aea:	0f 93       	push	r16
    1aec:	1f 93       	push	r17
    1aee:	cf 93       	push	r28
    1af0:	df 93       	push	r29
    ///        // Init DS18B20 sensor
    for(uint8_t i = 0; i < 3; i++)
    1af2:	61 2c       	mov	r6, r1
    pDS18x20->DS18x20_PORT = DS18x20_PORT;
    1af4:	0f 2e       	mov	r0, r31
    1af6:	fd ef       	ldi	r31, 0xFD	; 253
    1af8:	ef 2e       	mov	r14, r31
    1afa:	f1 e0       	ldi	r31, 0x01	; 1
    1afc:	ff 2e       	mov	r15, r31
    1afe:	f0 2d       	mov	r31, r0
    1b00:	0f 2e       	mov	r0, r31
    1b02:	f5 e2       	ldi	r31, 0x25	; 37
    1b04:	8f 2e       	mov	r8, r31
    1b06:	91 2c       	mov	r9, r1
    1b08:	f0 2d       	mov	r31, r0
    1b0a:	48 2c       	mov	r4, r8
    1b0c:	59 2c       	mov	r5, r9
    1b0e:	0f 2e       	mov	r0, r31
    1b10:	f8 e0       	ldi	r31, 0x08	; 8
    1b12:	af 2e       	mov	r10, r31
    1b14:	f2 e0       	ldi	r31, 0x02	; 2
    1b16:	bf 2e       	mov	r11, r31
    1b18:	f0 2d       	mov	r31, r0
    1b1a:	04 c0       	rjmp	.+8      	; 0x1b24 <init_ds18x20+0x52>
    {
        if(i != 0)
            delay_ms(1000);
    1b1c:	88 ee       	ldi	r24, 0xE8	; 232
    1b1e:	93 e0       	ldi	r25, 0x03	; 3
    1b20:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
    pDS18x20->DS18x20_PORT = DS18x20_PORT;
    1b24:	d7 01       	movw	r26, r14
    1b26:	4c 92       	st	X, r4
    1b28:	11 96       	adiw	r26, 0x01	; 1
    1b2a:	5c 92       	st	X, r5
    1b2c:	11 97       	sbiw	r26, 0x01	; 1
    pDS18x20->DS18x20_PIN = DS18x20_PIN;
    1b2e:	12 96       	adiw	r26, 0x02	; 2
    1b30:	1c 92       	st	X, r1
    1b32:	12 97       	sbiw	r26, 0x02	; 2
    *(pDS18x20->DS18x20_PORT) &= ~(_BV(pDS18x20->DS18x20_PIN));
    1b34:	f4 01       	movw	r30, r8
    1b36:	80 81       	ld	r24, Z
    1b38:	8e 7f       	andi	r24, 0xFE	; 254
    1b3a:	80 83       	st	Z, r24
    *(pDS18x20->DS18x20_PORT-1) &= ~(_BV(pDS18x20->DS18x20_PIN));
    1b3c:	ed 91       	ld	r30, X+
    1b3e:	fc 91       	ld	r31, X
    1b40:	82 91       	ld	r24, -Z
    1b42:	8e 7f       	andi	r24, 0xFE	; 254
    1b44:	80 83       	st	Z, r24
    if (OWReset(pDS18x20))
    1b46:	c7 01       	movw	r24, r14
    1b48:	0e 94 b2 0c 	call	0x1964	; 0x1964 <OWReset>
    1b4c:	78 2e       	mov	r7, r24
    1b4e:	88 23       	and	r24, r24
    1b50:	61 f0       	breq	.+24     	; 0x1b6a <init_ds18x20+0x98>
        if (DS18x20_Init(pDS18x20,&DS18B20_PORT,DS18B20_SENSOR))
        {
            softuart_puts_p(PSTR("Error!!! Temperature sensor!"));
    1b52:	82 e3       	ldi	r24, 0x32	; 50
    1b54:	93 e0       	ldi	r25, 0x03	; 3
    1b56:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <softuart_puts_p>
    for(uint8_t i = 0; i < 3; i++)
    1b5a:	63 94       	inc	r6
    1b5c:	f3 e0       	ldi	r31, 0x03	; 3
    1b5e:	6f 16       	cp	r6, r31
    1b60:	09 f4       	brne	.+2      	; 0x1b64 <init_ds18x20+0x92>
    1b62:	60 c0       	rjmp	.+192    	; 0x1c24 <init_ds18x20+0x152>
        if(i != 0)
    1b64:	61 10       	cpse	r6, r1
    1b66:	da cf       	rjmp	.-76     	; 0x1b1c <init_ds18x20+0x4a>
    1b68:	dd cf       	rjmp	.-70     	; 0x1b24 <init_ds18x20+0x52>
    OWWriteByte(pDS18x20,READ_ROM);
    1b6a:	63 e3       	ldi	r22, 0x33	; 51
    1b6c:	c7 01       	movw	r24, r14
    1b6e:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <OWWriteByte>
    for(i=0; i<8; i++)
    1b72:	0f 2e       	mov	r0, r31
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	cf 2e       	mov	r12, r31
    1b78:	f2 e0       	ldi	r31, 0x02	; 2
    1b7a:	df 2e       	mov	r13, r31
    1b7c:	f0 2d       	mov	r31, r0
    1b7e:	10 c0       	rjmp	.+32     	; 0x1ba0 <init_ds18x20+0xce>
        mask <<= 1;
    1b80:	11 0f       	add	r17, r17
    while(mask)
    1b82:	21 97       	sbiw	r28, 0x01	; 1
    1b84:	39 f0       	breq	.+14     	; 0x1b94 <init_ds18x20+0xc2>
        if (OWReadBit(pDS18x20))
    1b86:	c7 01       	movw	r24, r14
    1b88:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <OWReadBit>
    1b8c:	88 23       	and	r24, r24
    1b8e:	c1 f3       	breq	.-16     	; 0x1b80 <init_ds18x20+0xae>
            data |= mask;
    1b90:	01 2b       	or	r16, r17
    1b92:	f6 cf       	rjmp	.-20     	; 0x1b80 <init_ds18x20+0xae>
        pDS18x20->serialNumber[i]=OWReadByte(pDS18x20);
    1b94:	d6 01       	movw	r26, r12
    1b96:	0d 93       	st	X+, r16
    1b98:	6d 01       	movw	r12, r26
    for(i=0; i<8; i++)
    1b9a:	aa 15       	cp	r26, r10
    1b9c:	bb 05       	cpc	r27, r11
    1b9e:	29 f0       	breq	.+10     	; 0x1baa <init_ds18x20+0xd8>
    uint8_t data = 0x00;
    1ba0:	07 2d       	mov	r16, r7
    1ba2:	c8 e0       	ldi	r28, 0x08	; 8
    1ba4:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t mask = 0x01;
    1ba6:	11 e0       	ldi	r17, 0x01	; 1
    1ba8:	ee cf       	rjmp	.-36     	; 0x1b86 <init_ds18x20+0xb4>
    if (OWCheckCRC(pDS18x20->serialNumber,7)==pDS18x20->serialNumber[7])
    1baa:	67 e0       	ldi	r22, 0x07	; 7
    1bac:	80 e0       	ldi	r24, 0x00	; 0
    1bae:	92 e0       	ldi	r25, 0x02	; 2
    1bb0:	0e 94 99 0c 	call	0x1932	; 0x1932 <OWCheckCRC>
    if (!DS18x20_ReadROM(pDS18x20))
    1bb4:	f7 01       	movw	r30, r14
    1bb6:	92 85       	ldd	r25, Z+10	; 0x0a
    1bb8:	89 13       	cpse	r24, r25
    1bba:	cb cf       	rjmp	.-106    	; 0x1b52 <init_ds18x20+0x80>
    switch(pDS18x20->serialNumber[0])
    1bbc:	83 81       	ldd	r24, Z+3	; 0x03
    1bbe:	80 31       	cpi	r24, 0x10	; 16
    1bc0:	09 f4       	brne	.+2      	; 0x1bc4 <init_ds18x20+0xf2>
    1bc2:	41 c0       	rjmp	.+130    	; 0x1c46 <init_ds18x20+0x174>
    1bc4:	88 32       	cpi	r24, 0x28	; 40
    1bc6:	29 f6       	brne	.-118    	; 0x1b52 <init_ds18x20+0x80>
        pDS18x20->SensorModel=DS18B20Sensor;
    1bc8:	ed ef       	ldi	r30, 0xFD	; 253
    1bca:	f1 e0       	ldi	r31, 0x01	; 1
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	95 8b       	std	Z+21, r25	; 0x15
    1bd2:	84 8b       	std	Z+20, r24	; 0x14
        pDS18x20->scratchpad[4]=CONF_RES_9b;
    1bd4:	8f e1       	ldi	r24, 0x1F	; 31
    1bd6:	87 87       	std	Z+15, r24	; 0x0f
        }
        else
        {
            softuart_puts_p(PSTR("Temperature sensor detected."));
    1bd8:	85 e1       	ldi	r24, 0x15	; 21
    1bda:	93 e0       	ldi	r25, 0x03	; 3
    1bdc:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <softuart_puts_p>
    if (pDS18x20->SensorModel==DS18B20Sensor)
    1be0:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <DS18x20+0x14>
    1be4:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <DS18x20+0x15>
    1be8:	01 97       	sbiw	r24, 0x01	; 1
    1bea:	91 f1       	breq	.+100    	; 0x1c50 <init_ds18x20+0x17e>
    OWReset(pDS18x20);
    1bec:	8d ef       	ldi	r24, 0xFD	; 253
    1bee:	91 e0       	ldi	r25, 0x01	; 1
    1bf0:	0e 94 b2 0c 	call	0x1964	; 0x1964 <OWReset>
    OWWriteByte(pDS18x20,SKIP_ROM);
    1bf4:	6c ec       	ldi	r22, 0xCC	; 204
    1bf6:	8d ef       	ldi	r24, 0xFD	; 253
    1bf8:	91 e0       	ldi	r25, 0x01	; 1
    1bfa:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <OWWriteByte>
    OWWriteByte(pDS18x20,WRITE_SCRATCHPAD);
    1bfe:	6e e4       	ldi	r22, 0x4E	; 78
    1c00:	8d ef       	ldi	r24, 0xFD	; 253
    1c02:	91 e0       	ldi	r25, 0x01	; 1
    1c04:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <OWWriteByte>
    OWWriteByte(pDS18x20,pDS18x20->scratchpad[2]);
    1c08:	cd ef       	ldi	r28, 0xFD	; 253
    1c0a:	d1 e0       	ldi	r29, 0x01	; 1
    1c0c:	6d 85       	ldd	r22, Y+13	; 0x0d
    1c0e:	ce 01       	movw	r24, r28
    1c10:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <OWWriteByte>
    OWWriteByte(pDS18x20,pDS18x20->scratchpad[3]);
    1c14:	6e 85       	ldd	r22, Y+14	; 0x0e
    1c16:	ce 01       	movw	r24, r28
    1c18:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <OWWriteByte>
    if (pDS18x20->SensorModel == DS18B20Sensor)
    1c1c:	8c 89       	ldd	r24, Y+20	; 0x14
    1c1e:	9d 89       	ldd	r25, Y+21	; 0x15
    1c20:	01 97       	sbiw	r24, 0x01	; 1
    1c22:	d1 f0       	breq	.+52     	; 0x1c58 <init_ds18x20+0x186>
            DS18x20_SetResolution(pDS18x20,CONF_RES_9b);
            DS18x20_WriteScratchpad(pDS18x20);
            break;
        }
    }
}
    1c24:	df 91       	pop	r29
    1c26:	cf 91       	pop	r28
    1c28:	1f 91       	pop	r17
    1c2a:	0f 91       	pop	r16
    1c2c:	ff 90       	pop	r15
    1c2e:	ef 90       	pop	r14
    1c30:	df 90       	pop	r13
    1c32:	cf 90       	pop	r12
    1c34:	bf 90       	pop	r11
    1c36:	af 90       	pop	r10
    1c38:	9f 90       	pop	r9
    1c3a:	8f 90       	pop	r8
    1c3c:	7f 90       	pop	r7
    1c3e:	6f 90       	pop	r6
    1c40:	5f 90       	pop	r5
    1c42:	4f 90       	pop	r4
    1c44:	08 95       	ret
        pDS18x20->SensorModel=DS18S20Sensor;
    1c46:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <DS18x20+0x15>
    1c4a:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <DS18x20+0x14>
        break;
    1c4e:	c4 cf       	rjmp	.-120    	; 0x1bd8 <init_ds18x20+0x106>
        pDS18x20->scratchpad[4]=CONF_REG;
    1c50:	8f e1       	ldi	r24, 0x1F	; 31
    1c52:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <DS18x20+0xf>
    1c56:	ca cf       	rjmp	.-108    	; 0x1bec <init_ds18x20+0x11a>
        OWWriteByte(pDS18x20,pDS18x20->scratchpad[4]);
    1c58:	60 91 0c 02 	lds	r22, 0x020C	; 0x80020c <DS18x20+0xf>
    1c5c:	ce 01       	movw	r24, r28
    1c5e:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <OWWriteByte>
}
    1c62:	e0 cf       	rjmp	.-64     	; 0x1c24 <init_ds18x20+0x152>

00001c64 <get_temperature>:


//**************************************************************************
int8_t get_temperature(void)
{
    1c64:	cf 92       	push	r12
    1c66:	df 92       	push	r13
    1c68:	ef 92       	push	r14
    1c6a:	ff 92       	push	r15
    1c6c:	0f 93       	push	r16
    1c6e:	1f 93       	push	r17
    1c70:	cf 93       	push	r28
    1c72:	df 93       	push	r29
    1c74:	00 d0       	rcall	.+0      	; 0x1c76 <get_temperature+0x12>
    1c76:	00 d0       	rcall	.+0      	; 0x1c78 <get_temperature+0x14>
    1c78:	00 d0       	rcall	.+0      	; 0x1c7a <get_temperature+0x16>
    1c7a:	cd b7       	in	r28, 0x3d	; 61
    1c7c:	de b7       	in	r29, 0x3e	; 62
    init_ds18x20();
    1c7e:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <init_ds18x20>
    OWReset(pDS18x20);
    1c82:	8d ef       	ldi	r24, 0xFD	; 253
    1c84:	91 e0       	ldi	r25, 0x01	; 1
    1c86:	0e 94 b2 0c 	call	0x1964	; 0x1964 <OWReset>
    OWWriteByte(pDS18x20,SKIP_ROM);
    1c8a:	6c ec       	ldi	r22, 0xCC	; 204
    1c8c:	8d ef       	ldi	r24, 0xFD	; 253
    1c8e:	91 e0       	ldi	r25, 0x01	; 1
    1c90:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <OWWriteByte>
    OWWriteByte(pDS18x20,CONVERT_T);
    1c94:	64 e4       	ldi	r22, 0x44	; 68
    1c96:	8d ef       	ldi	r24, 0xFD	; 253
    1c98:	91 e0       	ldi	r25, 0x01	; 1
    1c9a:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <OWWriteByte>
    switch(pDS18x20->scratchpad[4])
    1c9e:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <DS18x20+0xf>
    1ca2:	8f 33       	cpi	r24, 0x3F	; 63
    1ca4:	89 f1       	breq	.+98     	; 0x1d08 <get_temperature+0xa4>
    1ca6:	8f 35       	cpi	r24, 0x5F	; 95
    1ca8:	b9 f1       	breq	.+110    	; 0x1d18 <get_temperature+0xb4>
    1caa:	8f 31       	cpi	r24, 0x1F	; 31
    1cac:	51 f0       	breq	.+20     	; 0x1cc2 <get_temperature+0x5e>
	__builtin_avr_delay_cycles(__ticks_dc);
    1cae:	ff ef       	ldi	r31, 0xFF	; 255
    1cb0:	2f ed       	ldi	r18, 0xDF	; 223
    1cb2:	30 e1       	ldi	r19, 0x10	; 16
    1cb4:	f1 50       	subi	r31, 0x01	; 1
    1cb6:	20 40       	sbci	r18, 0x00	; 0
    1cb8:	30 40       	sbci	r19, 0x00	; 0
    1cba:	e1 f7       	brne	.-8      	; 0x1cb4 <get_temperature+0x50>
    1cbc:	00 c0       	rjmp	.+0      	; 0x1cbe <get_temperature+0x5a>
    1cbe:	00 00       	nop
}
    1cc0:	08 c0       	rjmp	.+16     	; 0x1cd2 <get_temperature+0x6e>
	__builtin_avr_delay_cycles(__ticks_dc);
    1cc2:	20 e7       	ldi	r18, 0x70	; 112
    1cc4:	3d e1       	ldi	r19, 0x1D	; 29
    1cc6:	42 e0       	ldi	r20, 0x02	; 2
    1cc8:	21 50       	subi	r18, 0x01	; 1
    1cca:	30 40       	sbci	r19, 0x00	; 0
    1ccc:	40 40       	sbci	r20, 0x00	; 0
    1cce:	e1 f7       	brne	.-8      	; 0x1cc8 <get_temperature+0x64>
    1cd0:	00 c0       	rjmp	.+0      	; 0x1cd2 <get_temperature+0x6e>
    OWReset(pDS18x20);
    1cd2:	8d ef       	ldi	r24, 0xFD	; 253
    1cd4:	91 e0       	ldi	r25, 0x01	; 1
    1cd6:	0e 94 b2 0c 	call	0x1964	; 0x1964 <OWReset>
    OWWriteByte(pDS18x20,SKIP_ROM);
    1cda:	6c ec       	ldi	r22, 0xCC	; 204
    1cdc:	8d ef       	ldi	r24, 0xFD	; 253
    1cde:	91 e0       	ldi	r25, 0x01	; 1
    1ce0:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <OWWriteByte>
    OWWriteByte(pDS18x20,READ_SCRATCHPAD);
    1ce4:	6e eb       	ldi	r22, 0xBE	; 190
    1ce6:	8d ef       	ldi	r24, 0xFD	; 253
    1ce8:	91 e0       	ldi	r25, 0x01	; 1
    1cea:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <OWWriteByte>
    for(i=0; i<9; i++)
    1cee:	0f 2e       	mov	r0, r31
    1cf0:	f8 e0       	ldi	r31, 0x08	; 8
    1cf2:	ef 2e       	mov	r14, r31
    1cf4:	f2 e0       	ldi	r31, 0x02	; 2
    1cf6:	ff 2e       	mov	r15, r31
    1cf8:	f0 2d       	mov	r31, r0
    1cfa:	0f 2e       	mov	r0, r31
    1cfc:	f1 e1       	ldi	r31, 0x11	; 17
    1cfe:	cf 2e       	mov	r12, r31
    1d00:	f2 e0       	ldi	r31, 0x02	; 2
    1d02:	df 2e       	mov	r13, r31
    1d04:	f0 2d       	mov	r31, r0
    1d06:	28 c0       	rjmp	.+80     	; 0x1d58 <get_temperature+0xf4>
    1d08:	51 ee       	ldi	r21, 0xE1	; 225
    1d0a:	8a e3       	ldi	r24, 0x3A	; 58
    1d0c:	94 e0       	ldi	r25, 0x04	; 4
    1d0e:	51 50       	subi	r21, 0x01	; 1
    1d10:	80 40       	sbci	r24, 0x00	; 0
    1d12:	90 40       	sbci	r25, 0x00	; 0
    1d14:	e1 f7       	brne	.-8      	; 0x1d0e <get_temperature+0xaa>
}
    1d16:	dd cf       	rjmp	.-70     	; 0x1cd2 <get_temperature+0x6e>
	__builtin_avr_delay_cycles(__ticks_dc);
    1d18:	af ef       	ldi	r26, 0xFF	; 255
    1d1a:	bf e6       	ldi	r27, 0x6F	; 111
    1d1c:	e8 e0       	ldi	r30, 0x08	; 8
    1d1e:	a1 50       	subi	r26, 0x01	; 1
    1d20:	b0 40       	sbci	r27, 0x00	; 0
    1d22:	e0 40       	sbci	r30, 0x00	; 0
    1d24:	e1 f7       	brne	.-8      	; 0x1d1e <get_temperature+0xba>
    1d26:	00 c0       	rjmp	.+0      	; 0x1d28 <get_temperature+0xc4>
    1d28:	00 00       	nop
}
    1d2a:	d3 cf       	rjmp	.-90     	; 0x1cd2 <get_temperature+0x6e>
        mask <<= 1;
    1d2c:	11 0f       	add	r17, r17
    while(mask)
    1d2e:	89 81       	ldd	r24, Y+1	; 0x01
    1d30:	9a 81       	ldd	r25, Y+2	; 0x02
    1d32:	01 97       	sbiw	r24, 0x01	; 1
    1d34:	9a 83       	std	Y+2, r25	; 0x02
    1d36:	89 83       	std	Y+1, r24	; 0x01
    1d38:	89 2b       	or	r24, r25
    1d3a:	41 f0       	breq	.+16     	; 0x1d4c <get_temperature+0xe8>
        if (OWReadBit(pDS18x20))
    1d3c:	8d ef       	ldi	r24, 0xFD	; 253
    1d3e:	91 e0       	ldi	r25, 0x01	; 1
    1d40:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <OWReadBit>
    1d44:	88 23       	and	r24, r24
    1d46:	91 f3       	breq	.-28     	; 0x1d2c <get_temperature+0xc8>
            data |= mask;
    1d48:	01 2b       	or	r16, r17
    1d4a:	f0 cf       	rjmp	.-32     	; 0x1d2c <get_temperature+0xc8>
        pDS18x20->scratchpad[i]=OWReadByte(pDS18x20);
    1d4c:	d7 01       	movw	r26, r14
    1d4e:	0d 93       	st	X+, r16
    1d50:	7d 01       	movw	r14, r26
    for(i=0; i<9; i++)
    1d52:	ca 16       	cp	r12, r26
    1d54:	db 06       	cpc	r13, r27
    1d56:	39 f0       	breq	.+14     	; 0x1d66 <get_temperature+0x102>
{
    1d58:	48 e0       	ldi	r20, 0x08	; 8
    1d5a:	50 e0       	ldi	r21, 0x00	; 0
    1d5c:	5a 83       	std	Y+2, r21	; 0x02
    1d5e:	49 83       	std	Y+1, r20	; 0x01
    uint8_t mask = 0x01;
    1d60:	11 e0       	ldi	r17, 0x01	; 1
    uint8_t data = 0x00;
    1d62:	00 e0       	ldi	r16, 0x00	; 0
    1d64:	eb cf       	rjmp	.-42     	; 0x1d3c <get_temperature+0xd8>
    if (OWCheckCRC(pDS18x20->scratchpad,8)==pDS18x20->scratchpad[8])
    1d66:	68 e0       	ldi	r22, 0x08	; 8
    1d68:	88 e0       	ldi	r24, 0x08	; 8
    1d6a:	92 e0       	ldi	r25, 0x02	; 2
    1d6c:	0e 94 99 0c 	call	0x1932	; 0x1932 <OWCheckCRC>
    if (DS18x20_MeasureTemperature(pDS18x20))
    1d70:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <DS18x20+0x13>
    1d74:	89 13       	cpse	r24, r25
    1d76:	4e c1       	rjmp	.+668    	; 0x2014 <get_temperature+0x3b0>
    Temperature = pDS18x20->scratchpad[1];
    1d78:	ed ef       	ldi	r30, 0xFD	; 253
    1d7a:	f1 e0       	ldi	r31, 0x01	; 1
    1d7c:	24 85       	ldd	r18, Z+12	; 0x0c
    Temperature |= pDS18x20->scratchpad[0];
    1d7e:	83 85       	ldd	r24, Z+11	; 0x0b
    1d80:	92 2f       	mov	r25, r18
        sign=-1;
    1d82:	1f ef       	ldi	r17, 0xFF	; 255
    if (Temperature<0)
    1d84:	22 23       	and	r18, r18
    1d86:	0c f0       	brlt	.+2      	; 0x1d8a <get_temperature+0x126>
    int8_t sign=1;
    1d88:	11 e0       	ldi	r17, 0x01	; 1
    if (pDS18x20->SensorModel==DS18S20Sensor)
    1d8a:	20 91 11 02 	lds	r18, 0x0211	; 0x800211 <DS18x20+0x14>
    1d8e:	30 91 12 02 	lds	r19, 0x0212	; 0x800212 <DS18x20+0x15>
    1d92:	23 2b       	or	r18, r19
    1d94:	09 f4       	brne	.+2      	; 0x1d98 <get_temperature+0x134>
    1d96:	46 c0       	rjmp	.+140    	; 0x1e24 <get_temperature+0x1c0>
    switch(pDS18x20->scratchpad[4])
    1d98:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <DS18x20+0xf>
    1d9c:	2f 35       	cpi	r18, 0x5F	; 95
    1d9e:	09 f4       	brne	.+2      	; 0x1da2 <get_temperature+0x13e>
    1da0:	9d c0       	rjmp	.+314    	; 0x1edc <get_temperature+0x278>
    1da2:	08 f0       	brcs	.+2      	; 0x1da6 <get_temperature+0x142>
    1da4:	68 c0       	rjmp	.+208    	; 0x1e76 <get_temperature+0x212>
    1da6:	2f 31       	cpi	r18, 0x1F	; 31
    1da8:	09 f4       	brne	.+2      	; 0x1dac <get_temperature+0x148>
    1daa:	d4 c0       	rjmp	.+424    	; 0x1f54 <get_temperature+0x2f0>
    1dac:	2f 33       	cpi	r18, 0x3F	; 63
    1dae:	09 f0       	breq	.+2      	; 0x1db2 <get_temperature+0x14e>
    1db0:	60 c0       	rjmp	.+192    	; 0x1e72 <get_temperature+0x20e>
        return (int8_t)sign*(abs(Temperature)/4) * 0.25;
    1db2:	9c 01       	movw	r18, r24
    1db4:	99 23       	and	r25, r25
    1db6:	0c f4       	brge	.+2      	; 0x1dba <get_temperature+0x156>
    1db8:	8a c0       	rjmp	.+276    	; 0x1ece <get_temperature+0x26a>
    1dba:	c9 01       	movw	r24, r18
    1dbc:	99 23       	and	r25, r25
    1dbe:	0c f4       	brge	.+2      	; 0x1dc2 <get_temperature+0x15e>
    1dc0:	8b c0       	rjmp	.+278    	; 0x1ed8 <get_temperature+0x274>
    1dc2:	95 95       	asr	r25
    1dc4:	87 95       	ror	r24
    1dc6:	95 95       	asr	r25
    1dc8:	87 95       	ror	r24
    1dca:	ac 01       	movw	r20, r24
    1dcc:	14 03       	mulsu	r17, r20
    1dce:	90 01       	movw	r18, r0
    1dd0:	15 9f       	mul	r17, r21
    1dd2:	30 0d       	add	r19, r0
    1dd4:	11 24       	eor	r1, r1
    1dd6:	c9 01       	movw	r24, r18
    1dd8:	33 0f       	add	r19, r19
    1dda:	aa 0b       	sbc	r26, r26
    1ddc:	bb 0b       	sbc	r27, r27
    1dde:	89 83       	std	Y+1, r24	; 0x01
    1de0:	9a 83       	std	Y+2, r25	; 0x02
    1de2:	ab 83       	std	Y+3, r26	; 0x03
    1de4:	bc 83       	std	Y+4, r27	; 0x04
    1de6:	bc 01       	movw	r22, r24
    1de8:	cd 01       	movw	r24, r26
    1dea:	0e 94 29 2a 	call	0x5452	; 0x5452 <__floatsisf>
    1dee:	e6 2f       	mov	r30, r22
    1df0:	20 e0       	ldi	r18, 0x00	; 0
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	40 e8       	ldi	r20, 0x80	; 128
    1df6:	5e e3       	ldi	r21, 0x3E	; 62
    1df8:	e9 83       	std	Y+1, r30	; 0x01
    1dfa:	7a 83       	std	Y+2, r23	; 0x02
    1dfc:	8b 83       	std	Y+3, r24	; 0x03
    1dfe:	9c 83       	std	Y+4, r25	; 0x04
    1e00:	69 81       	ldd	r22, Y+1	; 0x01
    1e02:	7a 81       	ldd	r23, Y+2	; 0x02
    1e04:	8b 81       	ldd	r24, Y+3	; 0x03
    1e06:	9c 81       	ldd	r25, Y+4	; 0x04
    1e08:	0e 94 8d 2a 	call	0x551a	; 0x551a <__mulsf3>
    1e0c:	69 83       	std	Y+1, r22	; 0x01
    1e0e:	7a 83       	std	Y+2, r23	; 0x02
    1e10:	8b 83       	std	Y+3, r24	; 0x03
    1e12:	9c 83       	std	Y+4, r25	; 0x04
    1e14:	69 81       	ldd	r22, Y+1	; 0x01
    1e16:	7a 81       	ldd	r23, Y+2	; 0x02
    1e18:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e1c:	0e 94 f1 29 	call	0x53e2	; 0x53e2 <__fixsfsi>
    1e20:	86 2f       	mov	r24, r22
    1e22:	f9 c0       	rjmp	.+498    	; 0x2016 <get_temperature+0x3b2>
        return (int8_t)Temperature * 0.5;
    1e24:	28 2f       	mov	r18, r24
    1e26:	88 0f       	add	r24, r24
    1e28:	33 0b       	sbc	r19, r19
    1e2a:	44 0b       	sbc	r20, r20
    1e2c:	55 0b       	sbc	r21, r21
    1e2e:	29 83       	std	Y+1, r18	; 0x01
    1e30:	3a 83       	std	Y+2, r19	; 0x02
    1e32:	4b 83       	std	Y+3, r20	; 0x03
    1e34:	5c 83       	std	Y+4, r21	; 0x04
    1e36:	ca 01       	movw	r24, r20
    1e38:	b9 01       	movw	r22, r18
    1e3a:	0e 94 29 2a 	call	0x5452	; 0x5452 <__floatsisf>
    1e3e:	20 e0       	ldi	r18, 0x00	; 0
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	40 e0       	ldi	r20, 0x00	; 0
    1e44:	5f e3       	ldi	r21, 0x3F	; 63
    1e46:	69 83       	std	Y+1, r22	; 0x01
    1e48:	7a 83       	std	Y+2, r23	; 0x02
    1e4a:	8b 83       	std	Y+3, r24	; 0x03
    1e4c:	9c 83       	std	Y+4, r25	; 0x04
    1e4e:	69 81       	ldd	r22, Y+1	; 0x01
    1e50:	7a 81       	ldd	r23, Y+2	; 0x02
    1e52:	8b 81       	ldd	r24, Y+3	; 0x03
    1e54:	9c 81       	ldd	r25, Y+4	; 0x04
    1e56:	0e 94 8d 2a 	call	0x551a	; 0x551a <__mulsf3>
    1e5a:	69 83       	std	Y+1, r22	; 0x01
    1e5c:	7a 83       	std	Y+2, r23	; 0x02
    1e5e:	8b 83       	std	Y+3, r24	; 0x03
    1e60:	9c 83       	std	Y+4, r25	; 0x04
    1e62:	69 81       	ldd	r22, Y+1	; 0x01
    1e64:	7a 81       	ldd	r23, Y+2	; 0x02
    1e66:	8b 81       	ldd	r24, Y+3	; 0x03
    1e68:	9c 81       	ldd	r25, Y+4	; 0x04
    1e6a:	0e 94 f1 29 	call	0x53e2	; 0x53e2 <__fixsfsi>
    1e6e:	86 2f       	mov	r24, r22
    1e70:	d2 c0       	rjmp	.+420    	; 0x2016 <get_temperature+0x3b2>
    switch(pDS18x20->scratchpad[4])
    1e72:	80 e0       	ldi	r24, 0x00	; 0
    1e74:	d0 c0       	rjmp	.+416    	; 0x2016 <get_temperature+0x3b2>
    1e76:	2f 37       	cpi	r18, 0x7F	; 127
    1e78:	41 f5       	brne	.+80     	; 0x1eca <get_temperature+0x266>
        return (int8_t)Temperature * 0.0625;
    1e7a:	28 2f       	mov	r18, r24
    1e7c:	88 0f       	add	r24, r24
    1e7e:	33 0b       	sbc	r19, r19
    1e80:	44 0b       	sbc	r20, r20
    1e82:	55 0b       	sbc	r21, r21
    1e84:	29 83       	std	Y+1, r18	; 0x01
    1e86:	3a 83       	std	Y+2, r19	; 0x02
    1e88:	4b 83       	std	Y+3, r20	; 0x03
    1e8a:	5c 83       	std	Y+4, r21	; 0x04
    1e8c:	ca 01       	movw	r24, r20
    1e8e:	b9 01       	movw	r22, r18
    1e90:	0e 94 29 2a 	call	0x5452	; 0x5452 <__floatsisf>
    1e94:	e6 2f       	mov	r30, r22
    1e96:	20 e0       	ldi	r18, 0x00	; 0
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	40 e8       	ldi	r20, 0x80	; 128
    1e9c:	5d e3       	ldi	r21, 0x3D	; 61
    1e9e:	e9 83       	std	Y+1, r30	; 0x01
    1ea0:	7a 83       	std	Y+2, r23	; 0x02
    1ea2:	8b 83       	std	Y+3, r24	; 0x03
    1ea4:	9c 83       	std	Y+4, r25	; 0x04
    1ea6:	69 81       	ldd	r22, Y+1	; 0x01
    1ea8:	7a 81       	ldd	r23, Y+2	; 0x02
    1eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1eac:	9c 81       	ldd	r25, Y+4	; 0x04
    1eae:	0e 94 8d 2a 	call	0x551a	; 0x551a <__mulsf3>
    1eb2:	69 83       	std	Y+1, r22	; 0x01
    1eb4:	7a 83       	std	Y+2, r23	; 0x02
    1eb6:	8b 83       	std	Y+3, r24	; 0x03
    1eb8:	9c 83       	std	Y+4, r25	; 0x04
    1eba:	69 81       	ldd	r22, Y+1	; 0x01
    1ebc:	7a 81       	ldd	r23, Y+2	; 0x02
    1ebe:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec2:	0e 94 f1 29 	call	0x53e2	; 0x53e2 <__fixsfsi>
    1ec6:	86 2f       	mov	r24, r22
    1ec8:	a6 c0       	rjmp	.+332    	; 0x2016 <get_temperature+0x3b2>
    switch(pDS18x20->scratchpad[4])
    1eca:	80 e0       	ldi	r24, 0x00	; 0
    1ecc:	a4 c0       	rjmp	.+328    	; 0x2016 <get_temperature+0x3b2>
        return (int8_t)sign*(abs(Temperature)/4) * 0.25;
    1ece:	22 27       	eor	r18, r18
    1ed0:	33 27       	eor	r19, r19
    1ed2:	28 1b       	sub	r18, r24
    1ed4:	39 0b       	sbc	r19, r25
    1ed6:	71 cf       	rjmp	.-286    	; 0x1dba <get_temperature+0x156>
    1ed8:	03 96       	adiw	r24, 0x03	; 3
    1eda:	73 cf       	rjmp	.-282    	; 0x1dc2 <get_temperature+0x15e>
        return (int8_t)sign*(abs(Temperature)/2) * 0.125;
    1edc:	9c 01       	movw	r18, r24
    1ede:	99 23       	and	r25, r25
    1ee0:	94 f1       	brlt	.+100    	; 0x1f46 <get_temperature+0x2e2>
    1ee2:	c9 01       	movw	r24, r18
    1ee4:	99 23       	and	r25, r25
    1ee6:	a4 f1       	brlt	.+104    	; 0x1f50 <get_temperature+0x2ec>
    1ee8:	95 95       	asr	r25
    1eea:	87 95       	ror	r24
    1eec:	ac 01       	movw	r20, r24
    1eee:	14 03       	mulsu	r17, r20
    1ef0:	90 01       	movw	r18, r0
    1ef2:	15 9f       	mul	r17, r21
    1ef4:	30 0d       	add	r19, r0
    1ef6:	11 24       	eor	r1, r1
    1ef8:	c9 01       	movw	r24, r18
    1efa:	33 0f       	add	r19, r19
    1efc:	aa 0b       	sbc	r26, r26
    1efe:	bb 0b       	sbc	r27, r27
    1f00:	89 83       	std	Y+1, r24	; 0x01
    1f02:	9a 83       	std	Y+2, r25	; 0x02
    1f04:	ab 83       	std	Y+3, r26	; 0x03
    1f06:	bc 83       	std	Y+4, r27	; 0x04
    1f08:	bc 01       	movw	r22, r24
    1f0a:	cd 01       	movw	r24, r26
    1f0c:	0e 94 29 2a 	call	0x5452	; 0x5452 <__floatsisf>
    1f10:	e6 2f       	mov	r30, r22
    1f12:	20 e0       	ldi	r18, 0x00	; 0
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	40 e0       	ldi	r20, 0x00	; 0
    1f18:	5e e3       	ldi	r21, 0x3E	; 62
    1f1a:	e9 83       	std	Y+1, r30	; 0x01
    1f1c:	7a 83       	std	Y+2, r23	; 0x02
    1f1e:	8b 83       	std	Y+3, r24	; 0x03
    1f20:	9c 83       	std	Y+4, r25	; 0x04
    1f22:	69 81       	ldd	r22, Y+1	; 0x01
    1f24:	7a 81       	ldd	r23, Y+2	; 0x02
    1f26:	8b 81       	ldd	r24, Y+3	; 0x03
    1f28:	9c 81       	ldd	r25, Y+4	; 0x04
    1f2a:	0e 94 8d 2a 	call	0x551a	; 0x551a <__mulsf3>
    1f2e:	69 83       	std	Y+1, r22	; 0x01
    1f30:	7a 83       	std	Y+2, r23	; 0x02
    1f32:	8b 83       	std	Y+3, r24	; 0x03
    1f34:	9c 83       	std	Y+4, r25	; 0x04
    1f36:	69 81       	ldd	r22, Y+1	; 0x01
    1f38:	7a 81       	ldd	r23, Y+2	; 0x02
    1f3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f3e:	0e 94 f1 29 	call	0x53e2	; 0x53e2 <__fixsfsi>
    1f42:	86 2f       	mov	r24, r22
    1f44:	68 c0       	rjmp	.+208    	; 0x2016 <get_temperature+0x3b2>
    1f46:	22 27       	eor	r18, r18
    1f48:	33 27       	eor	r19, r19
    1f4a:	28 1b       	sub	r18, r24
    1f4c:	39 0b       	sbc	r19, r25
    1f4e:	c9 cf       	rjmp	.-110    	; 0x1ee2 <get_temperature+0x27e>
    1f50:	01 96       	adiw	r24, 0x01	; 1
    1f52:	ca cf       	rjmp	.-108    	; 0x1ee8 <get_temperature+0x284>
        return (int8_t)sign*(abs(Temperature)*0.125) * 0.5;
    1f54:	9c 01       	movw	r18, r24
    1f56:	99 23       	and	r25, r25
    1f58:	0c f4       	brge	.+2      	; 0x1f5c <get_temperature+0x2f8>
    1f5a:	57 c0       	rjmp	.+174    	; 0x200a <get_temperature+0x3a6>
    1f5c:	c9 01       	movw	r24, r18
    1f5e:	33 0f       	add	r19, r19
    1f60:	aa 0b       	sbc	r26, r26
    1f62:	bb 0b       	sbc	r27, r27
    1f64:	89 83       	std	Y+1, r24	; 0x01
    1f66:	9a 83       	std	Y+2, r25	; 0x02
    1f68:	ab 83       	std	Y+3, r26	; 0x03
    1f6a:	bc 83       	std	Y+4, r27	; 0x04
    1f6c:	bc 01       	movw	r22, r24
    1f6e:	cd 01       	movw	r24, r26
    1f70:	0e 94 29 2a 	call	0x5452	; 0x5452 <__floatsisf>
    1f74:	e6 2f       	mov	r30, r22
    1f76:	20 e0       	ldi	r18, 0x00	; 0
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	40 e0       	ldi	r20, 0x00	; 0
    1f7c:	5e e3       	ldi	r21, 0x3E	; 62
    1f7e:	e9 83       	std	Y+1, r30	; 0x01
    1f80:	7a 83       	std	Y+2, r23	; 0x02
    1f82:	8b 83       	std	Y+3, r24	; 0x03
    1f84:	9c 83       	std	Y+4, r25	; 0x04
    1f86:	69 81       	ldd	r22, Y+1	; 0x01
    1f88:	7a 81       	ldd	r23, Y+2	; 0x02
    1f8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f8e:	0e 94 8d 2a 	call	0x551a	; 0x551a <__mulsf3>
    1f92:	f6 2e       	mov	r15, r22
    1f94:	07 2f       	mov	r16, r23
    1f96:	8e 83       	std	Y+6, r24	; 0x06
    1f98:	9d 83       	std	Y+5, r25	; 0x05
    1f9a:	21 2f       	mov	r18, r17
    1f9c:	11 0f       	add	r17, r17
    1f9e:	33 0b       	sbc	r19, r19
    1fa0:	44 0b       	sbc	r20, r20
    1fa2:	55 0b       	sbc	r21, r21
    1fa4:	29 83       	std	Y+1, r18	; 0x01
    1fa6:	3a 83       	std	Y+2, r19	; 0x02
    1fa8:	4b 83       	std	Y+3, r20	; 0x03
    1faa:	5c 83       	std	Y+4, r21	; 0x04
    1fac:	ca 01       	movw	r24, r20
    1fae:	b9 01       	movw	r22, r18
    1fb0:	0e 94 29 2a 	call	0x5452	; 0x5452 <__floatsisf>
    1fb4:	26 2f       	mov	r18, r22
    1fb6:	37 2f       	mov	r19, r23
    1fb8:	48 2f       	mov	r20, r24
    1fba:	59 2f       	mov	r21, r25
    1fbc:	f9 82       	std	Y+1, r15	; 0x01
    1fbe:	0a 83       	std	Y+2, r16	; 0x02
    1fc0:	8e 81       	ldd	r24, Y+6	; 0x06
    1fc2:	8b 83       	std	Y+3, r24	; 0x03
    1fc4:	9d 81       	ldd	r25, Y+5	; 0x05
    1fc6:	9c 83       	std	Y+4, r25	; 0x04
    1fc8:	69 81       	ldd	r22, Y+1	; 0x01
    1fca:	7a 81       	ldd	r23, Y+2	; 0x02
    1fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fce:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd0:	0e 94 8d 2a 	call	0x551a	; 0x551a <__mulsf3>
    1fd4:	e6 2f       	mov	r30, r22
    1fd6:	20 e0       	ldi	r18, 0x00	; 0
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	40 e0       	ldi	r20, 0x00	; 0
    1fdc:	5f e3       	ldi	r21, 0x3F	; 63
    1fde:	e9 83       	std	Y+1, r30	; 0x01
    1fe0:	7a 83       	std	Y+2, r23	; 0x02
    1fe2:	8b 83       	std	Y+3, r24	; 0x03
    1fe4:	9c 83       	std	Y+4, r25	; 0x04
    1fe6:	69 81       	ldd	r22, Y+1	; 0x01
    1fe8:	7a 81       	ldd	r23, Y+2	; 0x02
    1fea:	8b 81       	ldd	r24, Y+3	; 0x03
    1fec:	9c 81       	ldd	r25, Y+4	; 0x04
    1fee:	0e 94 8d 2a 	call	0x551a	; 0x551a <__mulsf3>
    1ff2:	69 83       	std	Y+1, r22	; 0x01
    1ff4:	7a 83       	std	Y+2, r23	; 0x02
    1ff6:	8b 83       	std	Y+3, r24	; 0x03
    1ff8:	9c 83       	std	Y+4, r25	; 0x04
    1ffa:	69 81       	ldd	r22, Y+1	; 0x01
    1ffc:	7a 81       	ldd	r23, Y+2	; 0x02
    1ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    2000:	9c 81       	ldd	r25, Y+4	; 0x04
    2002:	0e 94 f1 29 	call	0x53e2	; 0x53e2 <__fixsfsi>
    2006:	86 2f       	mov	r24, r22
    2008:	06 c0       	rjmp	.+12     	; 0x2016 <get_temperature+0x3b2>
    200a:	22 27       	eor	r18, r18
    200c:	33 27       	eor	r19, r19
    200e:	28 1b       	sub	r18, r24
    2010:	39 0b       	sbc	r19, r25
    2012:	a4 cf       	rjmp	.-184    	; 0x1f5c <get_temperature+0x2f8>
        //softuart_puts(debug_buffer);
        //softuart_puts_p(PSTR("C"));
        return tem;
    }
    else
        return 0;
    2014:	80 e0       	ldi	r24, 0x00	; 0
}
    2016:	26 96       	adiw	r28, 0x06	; 6
    2018:	0f b6       	in	r0, 0x3f	; 63
    201a:	f8 94       	cli
    201c:	de bf       	out	0x3e, r29	; 62
    201e:	0f be       	out	0x3f, r0	; 63
    2020:	cd bf       	out	0x3d, r28	; 61
    2022:	df 91       	pop	r29
    2024:	cf 91       	pop	r28
    2026:	1f 91       	pop	r17
    2028:	0f 91       	pop	r16
    202a:	ff 90       	pop	r15
    202c:	ef 90       	pop	r14
    202e:	df 90       	pop	r13
    2030:	cf 90       	pop	r12
    2032:	08 95       	ret

00002034 <EEPROM_write>:
static config_t config;
static config_t *p_config = &config;
//*******************************************************************************************************************
// здесь обязательно нужен высокий уровень оптимизации, т.к. между записями EEMWE EEWE должно быть не более 4 тактов
void __attribute__((optimize("-O3"))) EEPROM_write(uint16_t address, uint8_t data)
{
    2034:	9c 01       	movw	r18, r24
    char tsreg;
    tsreg = SREG;
    2036:	8f b7       	in	r24, 0x3f	; 63
    cli();
    2038:	f8 94       	cli
    while(EECR & (1<<EEPE)); // Wait for completion of previous write
    203a:	f9 99       	sbic	0x1f, 1	; 31
    203c:	fe cf       	rjmp	.-4      	; 0x203a <EEPROM_write+0x6>
    EEAR = address; // Set up address and data registers
    203e:	32 bd       	out	0x22, r19	; 34
    2040:	21 bd       	out	0x21, r18	; 33
    EEDR = data;
    2042:	60 bd       	out	0x20, r22	; 32
    EECR = (1<<EEMPE); // Write logical one to EEMWE
    2044:	94 e0       	ldi	r25, 0x04	; 4
    2046:	9f bb       	out	0x1f, r25	; 31
    EECR = (1<<EEPE); // Start eeprom write by setting EEWE
    2048:	92 e0       	ldi	r25, 0x02	; 2
    204a:	9f bb       	out	0x1f, r25	; 31
    SREG = tsreg;
    204c:	8f bf       	out	0x3f, r24	; 63
}
    204e:	08 95       	ret

00002050 <EEPROM_read>:
//    EECR |= (1<<EEPE);
//}
//*******************************************************************************************************************

uint8_t EEPROM_read(uint16_t address)
{
    2050:	28 2f       	mov	r18, r24
    2052:	39 2f       	mov	r19, r25
    while(EECR & (1<<EEPE)); // Wait for completion of previous write
    2054:	f9 99       	sbic	0x1f, 1	; 31
    2056:	fe cf       	rjmp	.-4      	; 0x2054 <EEPROM_read+0x4>
    EEAR = address; // Set up address register
    2058:	32 bd       	out	0x22, r19	; 34
    205a:	21 bd       	out	0x21, r18	; 33
    EECR |= (1<<EERE); // Start eeprom read by writing EERE
    205c:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR; // Return data from data register
    205e:	80 b5       	in	r24, 0x20	; 32
}
    2060:	08 95       	ret

00002062 <EEPROM_write_buf>:
//*******************************************************************************************************************

void EEPROM_write_buf(char *buf, uint16_t len, uint16_t address)
{
    2062:	ef 92       	push	r14
    2064:	ff 92       	push	r15
    2066:	0f 93       	push	r16
    2068:	1f 93       	push	r17
    206a:	cf 93       	push	r28
    206c:	df 93       	push	r29
    206e:	28 2f       	mov	r18, r24
    2070:	39 2f       	mov	r19, r25
    2072:	06 2f       	mov	r16, r22
    2074:	17 2f       	mov	r17, r23
    2076:	e4 2e       	mov	r14, r20
    2078:	f5 2e       	mov	r15, r21
    while(len--)
    207a:	01 15       	cp	r16, r1
    207c:	11 05       	cpc	r17, r1
    207e:	81 f0       	breq	.+32     	; 0x20a0 <EEPROM_write_buf+0x3e>
    2080:	02 0f       	add	r16, r18
    2082:	13 1f       	adc	r17, r19
    2084:	e9 01       	movw	r28, r18
    2086:	e2 1a       	sub	r14, r18
    2088:	f3 0a       	sbc	r15, r19
    208a:	ce 01       	movw	r24, r28
    208c:	8e 0d       	add	r24, r14
    208e:	9f 1d       	adc	r25, r15
        EEPROM_write(address++, *buf++);
    2090:	fe 01       	movw	r30, r28
    2092:	21 96       	adiw	r28, 0x01	; 1
    2094:	60 81       	ld	r22, Z
    2096:	0e 94 1a 10 	call	0x2034	; 0x2034 <EEPROM_write>
    while(len--)
    209a:	c0 17       	cp	r28, r16
    209c:	d1 07       	cpc	r29, r17
    209e:	a9 f7       	brne	.-22     	; 0x208a <EEPROM_write_buf+0x28>
}
    20a0:	df 91       	pop	r29
    20a2:	cf 91       	pop	r28
    20a4:	1f 91       	pop	r17
    20a6:	0f 91       	pop	r16
    20a8:	ff 90       	pop	r15
    20aa:	ef 90       	pop	r14
    20ac:	08 95       	ret

000020ae <EEPROM_read_buf>:

//*******************************************************************************************************************

void EEPROM_read_buf(char *buf, uint16_t len, uint16_t address)
{
    20ae:	ef 92       	push	r14
    20b0:	ff 92       	push	r15
    20b2:	0f 93       	push	r16
    20b4:	1f 93       	push	r17
    20b6:	cf 93       	push	r28
    20b8:	df 93       	push	r29
    20ba:	28 2f       	mov	r18, r24
    20bc:	39 2f       	mov	r19, r25
    20be:	06 2f       	mov	r16, r22
    20c0:	17 2f       	mov	r17, r23
    20c2:	e4 2e       	mov	r14, r20
    20c4:	f5 2e       	mov	r15, r21
    while(len--)
    20c6:	01 15       	cp	r16, r1
    20c8:	11 05       	cpc	r17, r1
    20ca:	81 f0       	breq	.+32     	; 0x20ec <EEPROM_read_buf+0x3e>
    20cc:	02 0f       	add	r16, r18
    20ce:	13 1f       	adc	r17, r19
    20d0:	e9 01       	movw	r28, r18
        *buf++ = EEPROM_read(address++);
    20d2:	e2 1a       	sub	r14, r18
    20d4:	f3 0a       	sbc	r15, r19
    20d6:	ce 01       	movw	r24, r28
    20d8:	8e 0d       	add	r24, r14
    20da:	9f 1d       	adc	r25, r15
    20dc:	0e 94 28 10 	call	0x2050	; 0x2050 <EEPROM_read>
    20e0:	fe 01       	movw	r30, r28
    20e2:	21 96       	adiw	r28, 0x01	; 1
    20e4:	80 83       	st	Z, r24
    while(len--)
    20e6:	c0 17       	cp	r28, r16
    20e8:	d1 07       	cpc	r29, r17
    20ea:	a9 f7       	brne	.-22     	; 0x20d6 <EEPROM_read_buf+0x28>
}
    20ec:	df 91       	pop	r29
    20ee:	cf 91       	pop	r28
    20f0:	1f 91       	pop	r17
    20f2:	0f 91       	pop	r16
    20f4:	ff 90       	pop	r15
    20f6:	ef 90       	pop	r14
    20f8:	08 95       	ret

000020fa <eeprom_save_config>:
//*******************************************************************************************************************

void eeprom_save_config(void)
{
    //softuart_puts_p(PSTR("eeprom_save_config"));
    config.time_from_motion_s = get_time_from_motion_s();
    20fa:	0e 94 4c 28 	call	0x5098	; 0x5098 <get_time_from_motion_s>
    20fe:	60 93 13 02 	sts	0x0213, r22	; 0x800213 <config>
    2102:	70 93 14 02 	sts	0x0214, r23	; 0x800214 <config+0x1>
    2106:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <config+0x2>
    210a:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <config+0x3>
    eeprom_write_block((void*)&config, 0, sizeof(config_t));
    210e:	47 e5       	ldi	r20, 0x57	; 87
    2110:	50 e0       	ldi	r21, 0x00	; 0
    2112:	70 e0       	ldi	r23, 0x00	; 0
    2114:	60 e0       	ldi	r22, 0x00	; 0
    2116:	83 e1       	ldi	r24, 0x13	; 19
    2118:	92 e0       	ldi	r25, 0x02	; 2
    211a:	0e 94 8f 31 	call	0x631e	; 0x631e <eeprom_write_block>
    //EEPROM_write_buf((char*)&config, sizeof(config_t), 0);
}
    211e:	08 95       	ret

00002120 <eeprom_read_config>:
{
    2120:	1f 93       	push	r17
    2122:	cf 93       	push	r28
    2124:	df 93       	push	r29
    2126:	18 2f       	mov	r17, r24
    eeprom_read_block((void*)&config, 0, sizeof(config_t));
    2128:	47 e5       	ldi	r20, 0x57	; 87
    212a:	50 e0       	ldi	r21, 0x00	; 0
    212c:	70 e0       	ldi	r23, 0x00	; 0
    212e:	60 e0       	ldi	r22, 0x00	; 0
    2130:	83 e1       	ldi	r24, 0x13	; 19
    2132:	92 e0       	ldi	r25, 0x02	; 2
    2134:	0e 94 5d 31 	call	0x62ba	; 0x62ba <eeprom_read_block>
    if(p_config->first_usage != 0xAB)
    2138:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <config+0xb>
    213c:	8b 3a       	cpi	r24, 0xAB	; 171
    213e:	31 f4       	brne	.+12     	; 0x214c <eeprom_read_config+0x2c>
    if(start)
    2140:	11 11       	cpse	r17, r1
    2142:	21 c0       	rjmp	.+66     	; 0x2186 <eeprom_read_config+0x66>
}
    2144:	df 91       	pop	r29
    2146:	cf 91       	pop	r28
    2148:	1f 91       	pop	r17
    214a:	08 95       	ret
        memset(&config, 0, sizeof(config_t));
    214c:	c3 e1       	ldi	r28, 0x13	; 19
    214e:	d2 e0       	ldi	r29, 0x02	; 2
    2150:	87 e5       	ldi	r24, 0x57	; 87
    2152:	fe 01       	movw	r30, r28
    2154:	11 92       	st	Z+, r1
    2156:	8a 95       	dec	r24
    2158:	e9 f7       	brne	.-6      	; 0x2154 <eeprom_read_config+0x34>
        softuart_puts_p(PSTR("eeprom_first_set"));
    215a:	8f e4       	ldi	r24, 0x4F	; 79
    215c:	93 e0       	ldi	r25, 0x03	; 3
    215e:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <softuart_puts_p>
        p_config->interval_after_button_m = 1;
    2162:	81 e0       	ldi	r24, 0x01	; 1
    2164:	8c 83       	std	Y+4, r24	; 0x04
        p_config->pause_alarm_report_s = 1; //sec
    2166:	8d 83       	std	Y+5, r24	; 0x05
        p_config->power_report = 1;
    2168:	8e 83       	std	Y+6, r24	; 0x06
        p_config->first_usage = 0xAB;
    216a:	8b ea       	ldi	r24, 0xAB	; 171
    216c:	8b 87       	std	Y+11, r24	; 0x0b
        memcpy(p_config->admin_phone[0], "+380713318090", 13);
    216e:	8d e0       	ldi	r24, 0x0D	; 13
    2170:	e4 e4       	ldi	r30, 0x44	; 68
    2172:	f1 e0       	ldi	r31, 0x01	; 1
    2174:	a4 e2       	ldi	r26, 0x24	; 36
    2176:	b2 e0       	ldi	r27, 0x02	; 2
    2178:	01 90       	ld	r0, Z+
    217a:	0d 92       	st	X+, r0
    217c:	8a 95       	dec	r24
    217e:	e1 f7       	brne	.-8      	; 0x2178 <eeprom_read_config+0x58>
        eeprom_save_config();
    2180:	0e 94 7d 10 	call	0x20fa	; 0x20fa <eeprom_save_config>
    2184:	dd cf       	rjmp	.-70     	; 0x2140 <eeprom_read_config+0x20>
        set_time_from_motion_s(config.time_from_motion_s);
    2186:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <config>
    218a:	0e 94 3d 28 	call	0x507a	; 0x507a <set_time_from_motion_s>
}
    218e:	da cf       	rjmp	.-76     	; 0x2144 <eeprom_read_config+0x24>

00002190 <EEPROM_update>:
//*******************************************************************************************************************

void EEPROM_update(void)
{
    //softuart_puts_p(PSTR("EEPROM_update"));
    eeprom_update_block((void*)&config, 0, sizeof(config_t));
    2190:	47 e5       	ldi	r20, 0x57	; 87
    2192:	50 e0       	ldi	r21, 0x00	; 0
    2194:	70 e0       	ldi	r23, 0x00	; 0
    2196:	60 e0       	ldi	r22, 0x00	; 0
    2198:	83 e1       	ldi	r24, 0x13	; 19
    219a:	92 e0       	ldi	r25, 0x02	; 2
    219c:	0e 94 6d 31 	call	0x62da	; 0x62da <eeprom_update_block>
}
    21a0:	08 95       	ret

000021a2 <set_accept_calls>:


//******************************************************************
void set_accept_calls(uint8_t state)
{
    p_config->accept_calls = state;
    21a2:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <config+0xd>
}
    21a6:	08 95       	ret

000021a8 <get_accept_calls>:
uint8_t get_accept_calls(void)
{
   return p_config->accept_calls;
}
    21a8:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <config+0xd>
    21ac:	08 95       	ret

000021ae <set_accept_sms>:
//**********************************************************************
void set_accept_sms(uint8_t state)
{
    p_config->accept_sms = state;
    21ae:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <config+0xe>
}
    21b2:	08 95       	ret

000021b4 <get_accept_sms>:
uint8_t get_accept_sms(void)
{
   return p_config->accept_sms;
}
    21b4:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <config+0xe>
    21b8:	08 95       	ret

000021ba <get_power_report>:
//}
//***********************************************
uint8_t get_power_report(void)
{
    return p_config->power_report;
}
    21ba:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <config+0x6>
    21be:	08 95       	ret

000021c0 <set_power_report>:
void set_power_report(uint8_t state)
{
    p_config->power_report = state;
    21c0:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <config+0x6>
}
    21c4:	08 95       	ret

000021c6 <get_guard>:

//***********************************************
uint8_t get_guard(void)
{
    return p_config->guard;
}
    21c6:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <config+0x9>
    21ca:	08 95       	ret

000021cc <set_guard>:
void set_guard(uint8_t state)
{
    p_config->guard = state;
    21cc:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <config+0x9>
}
    21d0:	08 95       	ret

000021d2 <set_report_on_guard>:

//**********************************************************************
void set_report_on_guard(uint8_t state)
{
    p_config->report_on_guard = state;
    21d2:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <config+0x7>
}
    21d6:	08 95       	ret

000021d8 <get_report_on_guard>:
uint8_t get_report_on_guard(void)
{
   return p_config->report_on_guard;
}
    21d8:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <config+0x7>
    21dc:	08 95       	ret

000021de <set_first_m>:
//**********************************************************************
void set_first_m(uint8_t state)
{
    p_config->first_m = state;
    21de:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <config+0xc>
}
    21e2:	08 95       	ret

000021e4 <get_first_m>:
uint8_t get_first_m(void)
{
   return p_config->first_m;
}
    21e4:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <config+0xc>
    21e8:	08 95       	ret

000021ea <set_autoguard>:
//**********************************************************************
void set_autoguard(uint8_t state)
{
    p_config->autoguard = state;
    21ea:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <config+0xa>
}
    21ee:	08 95       	ret

000021f0 <get_autoguard>:
uint8_t get_autoguard(void)
{
   return p_config->autoguard;
}
    21f0:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <config+0xa>
    21f4:	08 95       	ret

000021f6 <set_interval_after_button_m>:
//**********************************************************************
void set_interval_after_button_m(uint8_t minute)
{
    p_config->interval_after_button_m = minute;
    21f6:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <config+0x4>
}
    21fa:	08 95       	ret

000021fc <get_interval_after_button_m>:
uint8_t get_interval_after_button_m(void)
{
   return p_config->interval_after_button_m;
}
    21fc:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <config+0x4>
    2200:	08 95       	ret

00002202 <set_reset_count_mcu>:
//**********************************************************************
void set_reset_count_mcu(uint8_t cnt)
{
    p_config->reset_count_mcu = cnt;
    2202:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <config+0xf>
}
    2206:	08 95       	ret

00002208 <get_reset_count_mcu>:
uint8_t get_reset_count_mcu(void)
{
   return p_config->reset_count_mcu;
}
    2208:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <config+0xf>
    220c:	08 95       	ret

0000220e <inc_reset_count_mcu>:
void inc_reset_count_mcu(void)
{
    p_config->reset_count_mcu++;
    220e:	e3 e1       	ldi	r30, 0x13	; 19
    2210:	f2 e0       	ldi	r31, 0x02	; 2
    2212:	87 85       	ldd	r24, Z+15	; 0x0f
    2214:	8f 5f       	subi	r24, 0xFF	; 255
    2216:	87 87       	std	Z+15, r24	; 0x0f
}
    2218:	08 95       	ret

0000221a <get_phones>:

//**********************************************************************
char* get_phones(uint8_t  i)
{
    char *ptr = p_config->admin_phone[i];
    221a:	27 e0       	ldi	r18, 0x07	; 7
    221c:	82 9f       	mul	r24, r18
    221e:	c0 01       	movw	r24, r0
    2220:	11 24       	eor	r1, r1
    2222:	88 0f       	add	r24, r24
    2224:	99 1f       	adc	r25, r25
    return ptr;
}
    2226:	8c 5d       	subi	r24, 0xDC	; 220
    2228:	9d 4f       	sbci	r25, 0xFD	; 253
    222a:	08 95       	ret

0000222c <set_first_usage>:
//***********************************************************************

void set_first_usage(uint8_t state)
{
    p_config->first_usage = state;
    222c:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <config+0xb>
}
    2230:	08 95       	ret

00002232 <get_first_usage>:
uint8_t get_first_usage(void)
{
   return p_config->first_usage;
}
    2232:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <config+0xb>
    2236:	08 95       	ret

00002238 <set_admin_mode>:
//**********************************************************************
void set_admin_mode(uint8_t state)
{
    p_config->admin_mode = state;
    2238:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <config+0x8>
}
    223c:	08 95       	ret

0000223e <get_admin_mode>:
uint8_t get_admin_mode(void)
{
   return p_config->admin_mode;
}
    223e:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <config+0x8>
    2242:	08 95       	ret

00002244 <get_pause_alarm_report_s>:

//**********************************************************************
uint8_t get_pause_alarm_report_s(void)
{
    return p_config->pause_alarm_report_s;
}
    2244:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <config+0x5>
    2248:	08 95       	ret

0000224a <set_pause_alarm_report_s>:
void set_pause_alarm_report_s(uint8_t second)
{
    p_config->pause_alarm_report_s = second;
    224a:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <config+0x5>
}
    224e:	08 95       	ret

00002250 <set_ext_temp>:

//**********************************************************************
void set_ext_temp(uint8_t state)
{
    p_config->ext_temp = state;
    2250:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <config+0x10>
}
    2254:	08 95       	ret

00002256 <get_ext_temp>:
uint8_t get_ext_temp(void)
{
   return p_config->ext_temp;
}
    2256:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <config+0x10>
    225a:	08 95       	ret

0000225c <hex_to_char>:
    return 0;
}

/////////////////////////////
static unsigned char hex_to_char(char c)
{
    225c:	98 2f       	mov	r25, r24
    uint8_t i = (uint8_t)c;
    if ( (i>=0x30) && (i<=0x39) )
    225e:	80 ed       	ldi	r24, 0xD0	; 208
    2260:	89 0f       	add	r24, r25
    2262:	8a 30       	cpi	r24, 0x0A	; 10
    2264:	78 f0       	brcs	.+30     	; 0x2284 <hex_to_char+0x28>
    {
        return i-0x30;
    }
    else if ( (i>=0x41) && (i<=0x46) )
    2266:	8f eb       	ldi	r24, 0xBF	; 191
    2268:	89 0f       	add	r24, r25
    226a:	86 30       	cpi	r24, 0x06	; 6
    226c:	38 f0       	brcs	.+14     	; 0x227c <hex_to_char+0x20>
    {
        return i-0x37;
    }
    else if ( (i>=0x61) && (i<=0x66) )
    226e:	8f e9       	ldi	r24, 0x9F	; 159
    2270:	89 0f       	add	r24, r25
    2272:	86 30       	cpi	r24, 0x06	; 6
    2274:	30 f4       	brcc	.+12     	; 0x2282 <hex_to_char+0x26>
    {
        return i-0x57;
    2276:	89 ea       	ldi	r24, 0xA9	; 169
    2278:	89 0f       	add	r24, r25
    227a:	08 95       	ret
        return i-0x37;
    227c:	89 ec       	ldi	r24, 0xC9	; 201
    227e:	89 0f       	add	r24, r25
    2280:	08 95       	ret
    }
    else
    {
        return      0;
    2282:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    2284:	08 95       	ret

00002286 <gsm_poll_for_string>:
{
    2286:	cf 93       	push	r28
    2288:	df 93       	push	r29
    228a:	00 d0       	rcall	.+0      	; 0x228c <gsm_poll_for_string+0x6>
    228c:	00 d0       	rcall	.+0      	; 0x228e <gsm_poll_for_string+0x8>
    228e:	cd b7       	in	r28, 0x3d	; 61
    2290:	de b7       	in	r29, 0x3e	; 62
    if((get_time_s() - time_stamp) > 10)
    2292:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <get_time_s>
    2296:	69 83       	std	Y+1, r22	; 0x01
    2298:	7a 83       	std	Y+2, r23	; 0x02
    229a:	8b 83       	std	Y+3, r24	; 0x03
    229c:	9c 83       	std	Y+4, r25	; 0x04
    229e:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <time_stamp.24>
    22a2:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <time_stamp.24+0x1>
    22a6:	a0 91 74 02 	lds	r26, 0x0274	; 0x800274 <time_stamp.24+0x2>
    22aa:	b0 91 75 02 	lds	r27, 0x0275	; 0x800275 <time_stamp.24+0x3>
    22ae:	29 81       	ldd	r18, Y+1	; 0x01
    22b0:	3a 81       	ldd	r19, Y+2	; 0x02
    22b2:	4b 81       	ldd	r20, Y+3	; 0x03
    22b4:	5c 81       	ldd	r21, Y+4	; 0x04
    22b6:	28 1b       	sub	r18, r24
    22b8:	39 0b       	sbc	r19, r25
    22ba:	4a 0b       	sbc	r20, r26
    22bc:	5b 0b       	sbc	r21, r27
    22be:	da 01       	movw	r26, r20
    22c0:	c9 01       	movw	r24, r18
    22c2:	0b 97       	sbiw	r24, 0x0b	; 11
    22c4:	a1 05       	cpc	r26, r1
    22c6:	b1 05       	cpc	r27, r1
    22c8:	28 f0       	brcs	.+10     	; 0x22d4 <gsm_poll_for_string+0x4e>
        if(state)
    22ca:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <state.23>
    22ce:	81 11       	cpse	r24, r1
            state = 0;
    22d0:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <state.23>
    if(is_queue_not_empty())
    22d4:	0e 94 da 28 	call	0x51b4	; 0x51b4 <is_queue_not_empty>
    22d8:	88 23       	and	r24, r24
    22da:	09 f4       	brne	.+2      	; 0x22de <gsm_poll_for_string+0x58>
    22dc:	6c c0       	rjmp	.+216    	; 0x23b6 <gsm_poll_for_string+0x130>
        time_stamp = get_time_s();
    22de:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <get_time_s>
    22e2:	60 93 72 02 	sts	0x0272, r22	; 0x800272 <time_stamp.24>
    22e6:	70 93 73 02 	sts	0x0273, r23	; 0x800273 <time_stamp.24+0x1>
    22ea:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <time_stamp.24+0x2>
    22ee:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <time_stamp.24+0x3>
        ch = get_byte_from_queue();
    22f2:	0e 94 cd 28 	call	0x519a	; 0x519a <get_byte_from_queue>
        switch(state)
    22f6:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <state.23>
    22fa:	99 23       	and	r25, r25
    22fc:	29 f0       	breq	.+10     	; 0x2308 <gsm_poll_for_string+0x82>
    22fe:	93 30       	cpi	r25, 0x03	; 3
    2300:	21 f1       	breq	.+72     	; 0x234a <gsm_poll_for_string+0xc4>
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	80 e0       	ldi	r24, 0x00	; 0
    2306:	59 c0       	rjmp	.+178    	; 0x23ba <gsm_poll_for_string+0x134>
        ch = get_byte_from_queue();
    2308:	98 2f       	mov	r25, r24
            if((ch != 0) && (ch != '\r') && (ch != '\n'))
    230a:	88 23       	and	r24, r24
    230c:	09 f4       	brne	.+2      	; 0x2310 <gsm_poll_for_string+0x8a>
    230e:	5c c0       	rjmp	.+184    	; 0x23c8 <gsm_poll_for_string+0x142>
    2310:	8d 30       	cpi	r24, 0x0D	; 13
    2312:	09 f4       	brne	.+2      	; 0x2316 <gsm_poll_for_string+0x90>
    2314:	5c c0       	rjmp	.+184    	; 0x23ce <gsm_poll_for_string+0x148>
    2316:	8a 30       	cpi	r24, 0x0A	; 10
    2318:	09 f4       	brne	.+2      	; 0x231c <gsm_poll_for_string+0x96>
    231a:	5c c0       	rjmp	.+184    	; 0x23d4 <gsm_poll_for_string+0x14e>
                mdm_data[0] = ch;
    231c:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <mdm_data>
                i = 1;
    2320:	21 e0       	ldi	r18, 0x01	; 1
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	30 93 70 02 	sts	0x0270, r19	; 0x800270 <i.22+0x1>
    2328:	20 93 6f 02 	sts	0x026F, r18	; 0x80026f <i.22>
                state = 3;
    232c:	83 e0       	ldi	r24, 0x03	; 3
    232e:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <state.23>
                if(ch == '>')
    2332:	9e 33       	cpi	r25, 0x3E	; 62
    2334:	19 f0       	breq	.+6      	; 0x233c <gsm_poll_for_string+0xb6>
    return 0;
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	80 e0       	ldi	r24, 0x00	; 0
    233a:	3f c0       	rjmp	.+126    	; 0x23ba <gsm_poll_for_string+0x134>
                    mdm_data[1] = 0;
    233c:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <mdm_data+0x1>
                    state = 0;
    2340:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <state.23>
                    return mdm_data;
    2344:	8d e9       	ldi	r24, 0x9D	; 157
    2346:	92 e0       	ldi	r25, 0x02	; 2
    2348:	38 c0       	rjmp	.+112    	; 0x23ba <gsm_poll_for_string+0x134>
            mdm_data[i] = ch;
    234a:	20 91 6f 02 	lds	r18, 0x026F	; 0x80026f <i.22>
    234e:	30 91 70 02 	lds	r19, 0x0270	; 0x800270 <i.22+0x1>
    2352:	f9 01       	movw	r30, r18
    2354:	e3 56       	subi	r30, 0x63	; 99
    2356:	fd 4f       	sbci	r31, 0xFD	; 253
    2358:	80 83       	st	Z, r24
            i++;
    235a:	a9 01       	movw	r20, r18
    235c:	4f 5f       	subi	r20, 0xFF	; 255
    235e:	5f 4f       	sbci	r21, 0xFF	; 255
    2360:	50 93 70 02 	sts	0x0270, r21	; 0x800270 <i.22+0x1>
    2364:	40 93 6f 02 	sts	0x026F, r20	; 0x80026f <i.22>
            if(i>=NET_BUF_SIZE)
    2368:	40 34       	cpi	r20, 0x40	; 64
    236a:	91 e0       	ldi	r25, 0x01	; 1
    236c:	59 07       	cpc	r21, r25
    236e:	88 f4       	brcc	.+34     	; 0x2392 <gsm_poll_for_string+0x10c>
            if(i>=2)
    2370:	42 30       	cpi	r20, 0x02	; 2
    2372:	51 05       	cpc	r21, r1
    2374:	90 f1       	brcs	.+100    	; 0x23da <gsm_poll_for_string+0x154>
                if((mdm_data[i-2] == '\r')&&(mdm_data[i-1] == '\n'))
    2376:	a9 01       	movw	r20, r18
    2378:	41 50       	subi	r20, 0x01	; 1
    237a:	51 09       	sbc	r21, r1
    237c:	24 56       	subi	r18, 0x64	; 100
    237e:	3d 4f       	sbci	r19, 0xFD	; 253
    2380:	d9 01       	movw	r26, r18
    2382:	9c 91       	ld	r25, X
    2384:	9d 30       	cpi	r25, 0x0D	; 13
    2386:	61 f5       	brne	.+88     	; 0x23e0 <gsm_poll_for_string+0x15a>
    2388:	8a 30       	cpi	r24, 0x0A	; 10
    238a:	61 f0       	breq	.+24     	; 0x23a4 <gsm_poll_for_string+0x11e>
    return 0;
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	80 e0       	ldi	r24, 0x00	; 0
    2390:	14 c0       	rjmp	.+40     	; 0x23ba <gsm_poll_for_string+0x134>
                i=0;
    2392:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <i.22+0x1>
    2396:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <i.22>
                state = 0; // переполнение входного буфера
    239a:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <state.23>
    return 0;
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	80 e0       	ldi	r24, 0x00	; 0
                break;
    23a2:	0b c0       	rjmp	.+22     	; 0x23ba <gsm_poll_for_string+0x134>
                    mdm_data[i-2] = 0;
    23a4:	43 56       	subi	r20, 0x63	; 99
    23a6:	5d 4f       	sbci	r21, 0xFD	; 253
    23a8:	fa 01       	movw	r30, r20
    23aa:	10 82       	st	Z, r1
                    state = 0;
    23ac:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <state.23>
                    return mdm_data;
    23b0:	8d e9       	ldi	r24, 0x9D	; 157
    23b2:	92 e0       	ldi	r25, 0x02	; 2
    23b4:	02 c0       	rjmp	.+4      	; 0x23ba <gsm_poll_for_string+0x134>
    return 0;
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	80 e0       	ldi	r24, 0x00	; 0
}
    23ba:	0f 90       	pop	r0
    23bc:	0f 90       	pop	r0
    23be:	0f 90       	pop	r0
    23c0:	0f 90       	pop	r0
    23c2:	df 91       	pop	r29
    23c4:	cf 91       	pop	r28
    23c6:	08 95       	ret
    return 0;
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	80 e0       	ldi	r24, 0x00	; 0
    23cc:	f6 cf       	rjmp	.-20     	; 0x23ba <gsm_poll_for_string+0x134>
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	80 e0       	ldi	r24, 0x00	; 0
    23d2:	f3 cf       	rjmp	.-26     	; 0x23ba <gsm_poll_for_string+0x134>
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	80 e0       	ldi	r24, 0x00	; 0
    23d8:	f0 cf       	rjmp	.-32     	; 0x23ba <gsm_poll_for_string+0x134>
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	80 e0       	ldi	r24, 0x00	; 0
    23de:	ed cf       	rjmp	.-38     	; 0x23ba <gsm_poll_for_string+0x134>
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	80 e0       	ldi	r24, 0x00	; 0
    23e4:	ea cf       	rjmp	.-44     	; 0x23ba <gsm_poll_for_string+0x134>

000023e6 <map_s>:
{
    23e6:	0f 93       	push	r16
    23e8:	1f 93       	push	r17
    23ea:	e6 2f       	mov	r30, r22
    23ec:	f7 2f       	mov	r31, r23
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    23ee:	bc 01       	movw	r22, r24
    23f0:	6e 1b       	sub	r22, r30
    23f2:	7f 0b       	sbc	r23, r31
    23f4:	02 1b       	sub	r16, r18
    23f6:	11 0b       	sbc	r17, r17
    23f8:	60 9f       	mul	r22, r16
    23fa:	c0 01       	movw	r24, r0
    23fc:	61 9f       	mul	r22, r17
    23fe:	90 0d       	add	r25, r0
    2400:	70 9f       	mul	r23, r16
    2402:	90 0d       	add	r25, r0
    2404:	11 24       	eor	r1, r1
    2406:	ba 01       	movw	r22, r20
    2408:	6e 1b       	sub	r22, r30
    240a:	7f 0b       	sbc	r23, r31
    240c:	0e 94 73 29 	call	0x52e6	; 0x52e6 <__udivmodhi4>
}
    2410:	82 2f       	mov	r24, r18
    2412:	86 0f       	add	r24, r22
    2414:	1f 91       	pop	r17
    2416:	0f 91       	pop	r16
    2418:	08 95       	ret

0000241a <get_message_from_mdm>:
{
    241a:	cf 93       	push	r28
    241c:	df 93       	push	r29
    ptr = gsm_poll_for_string();
    241e:	0e 94 43 11 	call	0x2286	; 0x2286 <gsm_poll_for_string>
    2422:	c8 2f       	mov	r28, r24
    2424:	d9 2f       	mov	r29, r25
    return 0;
    2426:	80 e0       	ldi	r24, 0x00	; 0
    if(ptr)
    2428:	20 97       	sbiw	r28, 0x00	; 0
    242a:	69 f0       	breq	.+26     	; 0x2446 <get_message_from_mdm+0x2c>
        softuart_puts_ln(ptr);
    242c:	ce 01       	movw	r24, r28
    242e:	0e 94 f3 25 	call	0x4be6	; 0x4be6 <softuart_puts_ln>
        if(strstr_P(ptr, PSTR("+CMTI:"))) // пришла асинхронная индикация о принятой СМСке
    2432:	6b e8       	ldi	r22, 0x8B	; 139
    2434:	74 e0       	ldi	r23, 0x04	; 4
    2436:	ce 01       	movw	r24, r28
    2438:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <strstr_P>
    243c:	89 2b       	or	r24, r25
    243e:	31 f0       	breq	.+12     	; 0x244c <get_message_from_mdm+0x32>
            unread_sms = 1;
    2440:	81 e0       	ldi	r24, 0x01	; 1
    2442:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <unread_sms>
}
    2446:	df 91       	pop	r29
    2448:	cf 91       	pop	r28
    244a:	08 95       	ret
        else if(strstr_P(ptr, PSTR("+CLIP:")))   // пришла асинхронная индикация о звонке
    244c:	64 e8       	ldi	r22, 0x84	; 132
    244e:	74 e0       	ldi	r23, 0x04	; 4
    2450:	ce 01       	movw	r24, r28
    2452:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <strstr_P>
    2456:	89 2b       	or	r24, r25
    2458:	f1 f0       	breq	.+60     	; 0x2496 <get_message_from_mdm+0x7c>
            ptr = strchr(ptr, '+');
    245a:	6b e2       	ldi	r22, 0x2B	; 43
    245c:	70 e0       	ldi	r23, 0x00	; 0
    245e:	ce 01       	movw	r24, r28
    2460:	06 96       	adiw	r24, 0x06	; 6
    2462:	0e 94 0b 2e 	call	0x5c16	; 0x5c16 <strchr>
    2466:	d8 2f       	mov	r29, r24
    2468:	c9 2f       	mov	r28, r25
            if(find_phone_in_phone_list(ptr, ADMIN_LIST)) // ищем телефон в списке юзеров
    246a:	61 e0       	ldi	r22, 0x01	; 1
    246c:	0e 94 81 20 	call	0x4102	; 0x4102 <find_phone_in_phone_list>
    2470:	81 11       	cpse	r24, r1
    2472:	04 c0       	rjmp	.+8      	; 0x247c <get_message_from_mdm+0x62>
            incoming_call = 1; // вызов будет сброшен в основном цикле программы
    2474:	81 e0       	ldi	r24, 0x01	; 1
    2476:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <incoming_call>
            return 1;
    247a:	e5 cf       	rjmp	.-54     	; 0x2446 <get_message_from_mdm+0x2c>
                call_from_user = 1;
    247c:	81 e0       	ldi	r24, 0x01	; 1
    247e:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <call_from_user>
                memcpy(rec_phone_number, ptr, 13); // сохраняем номер телефона, с которого произошел звонок
    2482:	8d e0       	ldi	r24, 0x0D	; 13
    2484:	ed 2f       	mov	r30, r29
    2486:	fc 2f       	mov	r31, r28
    2488:	af e8       	ldi	r26, 0x8F	; 143
    248a:	b2 e0       	ldi	r27, 0x02	; 2
    248c:	01 90       	ld	r0, Z+
    248e:	0d 92       	st	X+, r0
    2490:	8a 95       	dec	r24
    2492:	e1 f7       	brne	.-8      	; 0x248c <get_message_from_mdm+0x72>
    2494:	ef cf       	rjmp	.-34     	; 0x2474 <get_message_from_mdm+0x5a>
        else if(strstr_P(ptr, PSTR("+DTMF:")))   // DTFM msg
    2496:	6d e7       	ldi	r22, 0x7D	; 125
    2498:	74 e0       	ldi	r23, 0x04	; 4
    249a:	ce 01       	movw	r24, r28
    249c:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <strstr_P>
    24a0:	89 2b       	or	r24, r25
    24a2:	29 f0       	breq	.+10     	; 0x24ae <get_message_from_mdm+0x94>
            parse_DTFM(ptr);
    24a4:	ce 01       	movw	r24, r28
    24a6:	0e 94 06 13 	call	0x260c	; 0x260c <parse_DTFM>
        return 1;
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	cc cf       	rjmp	.-104    	; 0x2446 <get_message_from_mdm+0x2c>
    24ae:	81 e0       	ldi	r24, 0x01	; 1
    24b0:	ca cf       	rjmp	.-108    	; 0x2446 <get_message_from_mdm+0x2c>

000024b2 <mdm_wait_cmd_ms>:
{
    24b2:	cf 92       	push	r12
    24b4:	df 92       	push	r13
    24b6:	ef 92       	push	r14
    24b8:	ff 92       	push	r15
    24ba:	1f 93       	push	r17
    24bc:	cf 93       	push	r28
    24be:	df 93       	push	r29
    24c0:	00 d0       	rcall	.+0      	; 0x24c2 <mdm_wait_cmd_ms+0x10>
    24c2:	00 d0       	rcall	.+0      	; 0x24c4 <mdm_wait_cmd_ms+0x12>
    24c4:	00 d0       	rcall	.+0      	; 0x24c6 <mdm_wait_cmd_ms+0x14>
    24c6:	cd b7       	in	r28, 0x3d	; 61
    24c8:	de b7       	in	r29, 0x3e	; 62
    24ca:	e8 2e       	mov	r14, r24
    24cc:	f9 2e       	mov	r15, r25
    24ce:	16 2f       	mov	r17, r22
    24d0:	7e 83       	std	Y+6, r23	; 0x06
    time_stamp = get_time_ms() + time_to_wait_ms;
    24d2:	0e 94 65 27 	call	0x4eca	; 0x4eca <get_time_ms>
    24d6:	dc 01       	movw	r26, r24
    24d8:	cb 01       	movw	r24, r22
    24da:	8e 0d       	add	r24, r14
    24dc:	9f 1d       	adc	r25, r15
    24de:	a1 1d       	adc	r26, r1
    24e0:	b1 1d       	adc	r27, r1
    24e2:	6c 01       	movw	r12, r24
    24e4:	7d 01       	movw	r14, r26
    24e6:	07 c0       	rjmp	.+14     	; 0x24f6 <mdm_wait_cmd_ms+0x44>
            if((get_time_ms() > time_stamp))
    24e8:	0e 94 65 27 	call	0x4eca	; 0x4eca <get_time_ms>
    24ec:	c6 16       	cp	r12, r22
    24ee:	d7 06       	cpc	r13, r23
    24f0:	e8 06       	cpc	r14, r24
    24f2:	f9 06       	cpc	r15, r25
    24f4:	b8 f0       	brcs	.+46     	; 0x2524 <mdm_wait_cmd_ms+0x72>
        while(get_message_from_mdm()==0)
    24f6:	0e 94 0d 12 	call	0x241a	; 0x241a <get_message_from_mdm>
    24fa:	8d 83       	std	Y+5, r24	; 0x05
    24fc:	88 23       	and	r24, r24
    24fe:	a1 f3       	breq	.-24     	; 0x24e8 <mdm_wait_cmd_ms+0x36>
        ptr = strstr(mdm_data, (const char*)_answer);
    2500:	61 2f       	mov	r22, r17
    2502:	7e 81       	ldd	r23, Y+6	; 0x06
    2504:	8d e9       	ldi	r24, 0x9D	; 157
    2506:	92 e0       	ldi	r25, 0x02	; 2
    2508:	0e 94 16 2e 	call	0x5c2c	; 0x5c2c <strstr>
        if(ptr)
    250c:	89 2b       	or	r24, r25
    250e:	79 f4       	brne	.+30     	; 0x252e <mdm_wait_cmd_ms+0x7c>
        ptr = strstr_P(mdm_data, PSTR("ERROR"));
    2510:	61 e5       	ldi	r22, 0x51	; 81
    2512:	75 e0       	ldi	r23, 0x05	; 5
    2514:	8d e9       	ldi	r24, 0x9D	; 157
    2516:	92 e0       	ldi	r25, 0x02	; 2
    2518:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <strstr_P>
        if(ptr)
    251c:	89 2b       	or	r24, r25
    251e:	59 f3       	breq	.-42     	; 0x24f6 <mdm_wait_cmd_ms+0x44>
            return 0;
    2520:	1d 82       	std	Y+5, r1	; 0x05
    2522:	07 c0       	rjmp	.+14     	; 0x2532 <mdm_wait_cmd_ms+0x80>
                softuart_puts_p(PSTR( "cmd time end" ));
    2524:	87 e5       	ldi	r24, 0x57	; 87
    2526:	95 e0       	ldi	r25, 0x05	; 5
    2528:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <softuart_puts_p>
                return 0;
    252c:	02 c0       	rjmp	.+4      	; 0x2532 <mdm_wait_cmd_ms+0x80>
            return 1;
    252e:	91 e0       	ldi	r25, 0x01	; 1
    2530:	9d 83       	std	Y+5, r25	; 0x05
}
    2532:	8d 81       	ldd	r24, Y+5	; 0x05
    2534:	26 96       	adiw	r28, 0x06	; 6
    2536:	0f b6       	in	r0, 0x3f	; 63
    2538:	f8 94       	cli
    253a:	de bf       	out	0x3e, r29	; 62
    253c:	0f be       	out	0x3f, r0	; 63
    253e:	cd bf       	out	0x3d, r28	; 61
    2540:	df 91       	pop	r29
    2542:	cf 91       	pop	r28
    2544:	1f 91       	pop	r17
    2546:	ff 90       	pop	r15
    2548:	ef 90       	pop	r14
    254a:	df 90       	pop	r13
    254c:	cf 90       	pop	r12
    254e:	08 95       	ret

00002550 <play_amr>:
{
    2550:	1f 93       	push	r17
    2552:	cf 93       	push	r28
    2554:	df 93       	push	r29
    2556:	18 2f       	mov	r17, r24
    2558:	d9 2f       	mov	r29, r25
    255a:	c6 2f       	mov	r28, r22
    uart_flush();
    255c:	0e 94 35 29 	call	0x526a	; 0x526a <uart_flush>
    uart_send_str_p(PSTR("AT+CREC=5\r\n")); // stop play
    2560:	85 e4       	ldi	r24, 0x45	; 69
    2562:	95 e0       	ldi	r25, 0x05	; 5
    2564:	0e 94 1d 29 	call	0x523a	; 0x523a <uart_send_str_p>
    delay_ms(200);
    2568:	88 ec       	ldi	r24, 0xC8	; 200
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
    uart_flush();
    2570:	0e 94 35 29 	call	0x526a	; 0x526a <uart_flush>
    uart_send_str_p(PSTR("AT+CREC=4,\"C:\\User\\"));
    2574:	81 e3       	ldi	r24, 0x31	; 49
    2576:	95 e0       	ldi	r25, 0x05	; 5
    2578:	0e 94 1d 29 	call	0x523a	; 0x523a <uart_send_str_p>
    uart_send_str(file_sim800);
    257c:	81 2f       	mov	r24, r17
    257e:	9d 2f       	mov	r25, r29
    2580:	0e 94 ff 28 	call	0x51fe	; 0x51fe <uart_send_str>
    uart_send_str_p(PSTR(".amr\",0,100,"));
    2584:	84 e2       	ldi	r24, 0x24	; 36
    2586:	95 e0       	ldi	r25, 0x05	; 5
    2588:	0e 94 1d 29 	call	0x523a	; 0x523a <uart_send_str_p>
    uart_send_byte(repeat);
    258c:	8c 2f       	mov	r24, r28
    258e:	0e 94 15 29 	call	0x522a	; 0x522a <uart_send_byte>
    uart_send_str_p(PSTR("\r\n"));
    2592:	81 e2       	ldi	r24, 0x21	; 33
    2594:	95 e0       	ldi	r25, 0x05	; 5
    2596:	0e 94 1d 29 	call	0x523a	; 0x523a <uart_send_str_p>
    if(mdm_wait_cmd_ms(2000, (const char*)RESPON_OK) == 1)
    259a:	62 e5       	ldi	r22, 0x52	; 82
    259c:	71 e0       	ldi	r23, 0x01	; 1
    259e:	80 ed       	ldi	r24, 0xD0	; 208
    25a0:	97 e0       	ldi	r25, 0x07	; 7
    25a2:	0e 94 59 12 	call	0x24b2	; 0x24b2 <mdm_wait_cmd_ms>
    25a6:	98 2f       	mov	r25, r24
    25a8:	81 e0       	ldi	r24, 0x01	; 1
    25aa:	91 30       	cpi	r25, 0x01	; 1
    25ac:	09 f0       	breq	.+2      	; 0x25b0 <play_amr+0x60>
    25ae:	80 e0       	ldi	r24, 0x00	; 0
}
    25b0:	df 91       	pop	r29
    25b2:	cf 91       	pop	r28
    25b4:	1f 91       	pop	r17
    25b6:	08 95       	ret

000025b8 <hang_up_call>:
{
    25b8:	cf 93       	push	r28
    25ba:	c1 e0       	ldi	r28, 0x01	; 1
    25bc:	15 c0       	rjmp	.+42     	; 0x25e8 <hang_up_call+0x30>
            delay_ms(200);
    25be:	88 ec       	ldi	r24, 0xC8	; 200
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
        uart_flush();
    25c6:	0e 94 35 29 	call	0x526a	; 0x526a <uart_flush>
        uart_send_str_p(PSTR("ATH\r\n"));
    25ca:	8b ee       	ldi	r24, 0xEB	; 235
    25cc:	94 e0       	ldi	r25, 0x04	; 4
    25ce:	0e 94 1d 29 	call	0x523a	; 0x523a <uart_send_str_p>
        rez = mdm_wait_cmd_ms(2000, (const char*)RESPON_OK);
    25d2:	62 e5       	ldi	r22, 0x52	; 82
    25d4:	71 e0       	ldi	r23, 0x01	; 1
    25d6:	80 ed       	ldi	r24, 0xD0	; 208
    25d8:	97 e0       	ldi	r25, 0x07	; 7
    25da:	0e 94 59 12 	call	0x24b2	; 0x24b2 <mdm_wait_cmd_ms>
        if(rez)
    25de:	81 11       	cpse	r24, r1
    25e0:	13 c0       	rjmp	.+38     	; 0x2608 <hang_up_call+0x50>
    for(uint8_t i=0; i<5; i++)
    25e2:	c5 30       	cpi	r28, 0x05	; 5
    25e4:	88 f4       	brcc	.+34     	; 0x2608 <hang_up_call+0x50>
    25e6:	cf 5f       	subi	r28, 0xFF	; 255
        if(i!=0)
    25e8:	c1 30       	cpi	r28, 0x01	; 1
    25ea:	49 f7       	brne	.-46     	; 0x25be <hang_up_call+0x6>
        uart_flush();
    25ec:	0e 94 35 29 	call	0x526a	; 0x526a <uart_flush>
        uart_send_str_p(PSTR("ATH\r\n"));
    25f0:	8b ee       	ldi	r24, 0xEB	; 235
    25f2:	94 e0       	ldi	r25, 0x04	; 4
    25f4:	0e 94 1d 29 	call	0x523a	; 0x523a <uart_send_str_p>
        rez = mdm_wait_cmd_ms(2000, (const char*)RESPON_OK);
    25f8:	62 e5       	ldi	r22, 0x52	; 82
    25fa:	71 e0       	ldi	r23, 0x01	; 1
    25fc:	80 ed       	ldi	r24, 0xD0	; 208
    25fe:	97 e0       	ldi	r25, 0x07	; 7
    2600:	0e 94 59 12 	call	0x24b2	; 0x24b2 <mdm_wait_cmd_ms>
        if(rez)
    2604:	88 23       	and	r24, r24
    2606:	79 f3       	breq	.-34     	; 0x25e6 <hang_up_call+0x2e>
}
    2608:	cf 91       	pop	r28
    260a:	08 95       	ret

0000260c <parse_DTFM>:
    if(isdigit(*++ptr))
    260c:	fc 01       	movw	r30, r24
    260e:	87 81       	ldd	r24, Z+7	; 0x07
    2610:	28 2f       	mov	r18, r24
    2612:	08 2e       	mov	r0, r24
    2614:	00 0c       	add	r0, r0
    2616:	33 0b       	sbc	r19, r19
    2618:	20 53       	subi	r18, 0x30	; 48
    261a:	31 09       	sbc	r19, r1
    261c:	2a 30       	cpi	r18, 0x0A	; 10
    261e:	31 05       	cpc	r19, r1
    2620:	10 f0       	brcs	.+4      	; 0x2626 <parse_DTFM+0x1a>
    return 0;
    2622:	80 e0       	ldi	r24, 0x00	; 0
}
    2624:	08 95       	ret
        switch( ptr[0]) 																													//	Получаем значение состояния вызова.
    2626:	83 33       	cpi	r24, 0x33	; 51
    2628:	09 f4       	brne	.+2      	; 0x262c <parse_DTFM+0x20>
    262a:	46 c0       	rjmp	.+140    	; 0x26b8 <parse_DTFM+0xac>
    262c:	e4 f4       	brge	.+56     	; 0x2666 <parse_DTFM+0x5a>
    262e:	81 33       	cpi	r24, 0x31	; 49
    2630:	99 f1       	breq	.+102    	; 0x2698 <parse_DTFM+0x8c>
    2632:	82 33       	cpi	r24, 0x32	; 50
    2634:	81 f4       	brne	.+32     	; 0x2656 <parse_DTFM+0x4a>
            delay_ms(500);
    2636:	84 ef       	ldi	r24, 0xF4	; 244
    2638:	91 e0       	ldi	r25, 0x01	; 1
    263a:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
            set_guard(0);
    263e:	80 e0       	ldi	r24, 0x00	; 0
    2640:	0e 94 e6 10 	call	0x21cc	; 0x21cc <set_guard>
            play_amr(AUDIO_GUARD_OFF,'0');
    2644:	60 e3       	ldi	r22, 0x30	; 48
    2646:	85 e5       	ldi	r24, 0x55	; 85
    2648:	91 e0       	ldi	r25, 0x01	; 1
    264a:	0e 94 a8 12 	call	0x2550	; 0x2550 <play_amr>
            EEPROM_update();
    264e:	0e 94 c8 10 	call	0x2190	; 0x2190 <EEPROM_update>
        return 1;
    2652:	81 e0       	ldi	r24, 0x01	; 1
            break;
    2654:	08 95       	ret
        switch( ptr[0]) 																													//	Получаем значение состояния вызова.
    2656:	80 33       	cpi	r24, 0x30	; 48
    2658:	21 f4       	brne	.+8      	; 0x2662 <parse_DTFM+0x56>
            hang_up_call();
    265a:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <hang_up_call>
        return 1;
    265e:	81 e0       	ldi	r24, 0x01	; 1
            break;
    2660:	08 95       	ret
        switch( ptr[0]) 																													//	Получаем значение состояния вызова.
    2662:	81 e0       	ldi	r24, 0x01	; 1
    2664:	08 95       	ret
    2666:	84 33       	cpi	r24, 0x34	; 52
    2668:	09 f4       	brne	.+2      	; 0x266c <parse_DTFM+0x60>
    266a:	53 c0       	rjmp	.+166    	; 0x2712 <parse_DTFM+0x106>
    266c:	85 33       	cpi	r24, 0x35	; 53
    266e:	91 f4       	brne	.+36     	; 0x2694 <parse_DTFM+0x88>
            DigitalWrite(PIN_BUZZER, LOW);
    2670:	29 98       	cbi	0x05, 1	; 5
            buzzer_stop();
    2672:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <buzzer_stop>
            delay_ms(500);
    2676:	84 ef       	ldi	r24, 0xF4	; 244
    2678:	91 e0       	ldi	r25, 0x01	; 1
    267a:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
            play_amr(AUDIO_STOP_BUZZER,'0');
    267e:	60 e3       	ldi	r22, 0x30	; 48
    2680:	82 e7       	ldi	r24, 0x72	; 114
    2682:	91 e0       	ldi	r25, 0x01	; 1
    2684:	0e 94 a8 12 	call	0x2550	; 0x2550 <play_amr>
            delay_ms(1000);
    2688:	88 ee       	ldi	r24, 0xE8	; 232
    268a:	93 e0       	ldi	r25, 0x03	; 3
    268c:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
        return 1;
    2690:	81 e0       	ldi	r24, 0x01	; 1
            break;
    2692:	08 95       	ret
        switch( ptr[0]) 																													//	Получаем значение состояния вызова.
    2694:	81 e0       	ldi	r24, 0x01	; 1
    2696:	08 95       	ret
            delay_ms(500);
    2698:	84 ef       	ldi	r24, 0xF4	; 244
    269a:	91 e0       	ldi	r25, 0x01	; 1
    269c:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
            set_guard(1);
    26a0:	81 e0       	ldi	r24, 0x01	; 1
    26a2:	0e 94 e6 10 	call	0x21cc	; 0x21cc <set_guard>
            play_amr(AUDIO_GUARD_ON,'0');
    26a6:	60 e3       	ldi	r22, 0x30	; 48
    26a8:	87 e5       	ldi	r24, 0x57	; 87
    26aa:	91 e0       	ldi	r25, 0x01	; 1
    26ac:	0e 94 a8 12 	call	0x2550	; 0x2550 <play_amr>
            EEPROM_update();
    26b0:	0e 94 c8 10 	call	0x2190	; 0x2190 <EEPROM_update>
        return 1;
    26b4:	81 e0       	ldi	r24, 0x01	; 1
            break;
    26b6:	08 95       	ret
            delay_ms(500);
    26b8:	84 ef       	ldi	r24, 0xF4	; 244
    26ba:	91 e0       	ldi	r25, 0x01	; 1
    26bc:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
            if(deposit < 1)
    26c0:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <deposit>
    26c4:	90 91 80 02 	lds	r25, 0x0280	; 0x800280 <deposit+0x1>
    26c8:	18 16       	cp	r1, r24
    26ca:	19 06       	cpc	r1, r25
    26cc:	ac f4       	brge	.+42     	; 0x26f8 <parse_DTFM+0xec>
            play_amr(AUDIO_REPORT_SEND,'0');
    26ce:	60 e3       	ldi	r22, 0x30	; 48
    26d0:	8b e6       	ldi	r24, 0x6B	; 107
    26d2:	91 e0       	ldi	r25, 0x01	; 1
    26d4:	0e 94 a8 12 	call	0x2550	; 0x2550 <play_amr>
            delay_ms(2000);
    26d8:	80 ed       	ldi	r24, 0xD0	; 208
    26da:	97 e0       	ldi	r25, 0x07	; 7
    26dc:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
            hang_up_call();
    26e0:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <hang_up_call>
            delay_ms(200);
    26e4:	88 ec       	ldi	r24, 0xC8	; 200
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
            send_sms_report(rec_phone_number);
    26ec:	8f e8       	ldi	r24, 0x8F	; 143
    26ee:	92 e0       	ldi	r25, 0x02	; 2
    26f0:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <send_sms_report>
        return 1;
    26f4:	81 e0       	ldi	r24, 0x01	; 1
            break;
    26f6:	08 95       	ret
                play_amr(AUDIO_LOW_DEPOSIT,'0');
    26f8:	60 e3       	ldi	r22, 0x30	; 48
    26fa:	83 e6       	ldi	r24, 0x63	; 99
    26fc:	91 e0       	ldi	r25, 0x01	; 1
    26fe:	0e 94 a8 12 	call	0x2550	; 0x2550 <play_amr>
                delay_ms(2500);
    2702:	84 ec       	ldi	r24, 0xC4	; 196
    2704:	99 e0       	ldi	r25, 0x09	; 9
    2706:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
                hang_up_call();
    270a:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <hang_up_call>
        return 1;
    270e:	81 e0       	ldi	r24, 0x01	; 1
                break;
    2710:	08 95       	ret
            DigitalWrite(PIN_BUZZER, LOW);
    2712:	29 98       	cbi	0x05, 1	; 5
            buzzer_stop();
    2714:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <buzzer_stop>
            delay_ms(500);
    2718:	84 ef       	ldi	r24, 0xF4	; 244
    271a:	91 e0       	ldi	r25, 0x01	; 1
    271c:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
            set_guard(0);
    2720:	80 e0       	ldi	r24, 0x00	; 0
    2722:	0e 94 e6 10 	call	0x21cc	; 0x21cc <set_guard>
            play_amr(AUDIO_GUARD_OFF,'0');
    2726:	60 e3       	ldi	r22, 0x30	; 48
    2728:	85 e5       	ldi	r24, 0x55	; 85
    272a:	91 e0       	ldi	r25, 0x01	; 1
    272c:	0e 94 a8 12 	call	0x2550	; 0x2550 <play_amr>
            delay_ms(1500);
    2730:	8c ed       	ldi	r24, 0xDC	; 220
    2732:	95 e0       	ldi	r25, 0x05	; 5
    2734:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
            stop_next_calls = 1;
    2738:	81 e0       	ldi	r24, 0x01	; 1
    273a:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <stop_next_calls>
            hang_up_call();
    273e:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <hang_up_call>
        return 1;
    2742:	81 e0       	ldi	r24, 0x01	; 1
            break;
    2744:	08 95       	ret

00002746 <mdm_get_signal_strength>:
    delay_ms(50);
    2746:	82 e3       	ldi	r24, 0x32	; 50
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
    uart_flush();
    274e:	0e 94 35 29 	call	0x526a	; 0x526a <uart_flush>
    uart_send_str_p(PSTR("AT+CSQ\r"));
    2752:	85 ec       	ldi	r24, 0xC5	; 197
    2754:	94 e0       	ldi	r25, 0x04	; 4
    2756:	0e 94 1d 29 	call	0x523a	; 0x523a <uart_send_str_p>
    if(mdm_wait_cmd_ms(2000, (const char*)RESPON_OK_CSQ) == 0)
    275a:	6c e7       	ldi	r22, 0x7C	; 124
    275c:	71 e0       	ldi	r23, 0x01	; 1
    275e:	80 ed       	ldi	r24, 0xD0	; 208
    2760:	97 e0       	ldi	r25, 0x07	; 7
    2762:	0e 94 59 12 	call	0x24b2	; 0x24b2 <mdm_wait_cmd_ms>
    2766:	88 23       	and	r24, r24
    2768:	d1 f1       	breq	.+116    	; 0x27de <mdm_get_signal_strength+0x98>
    ptr = strchr(mdm_data, ':');
    276a:	6a e3       	ldi	r22, 0x3A	; 58
    276c:	70 e0       	ldi	r23, 0x00	; 0
    276e:	8d e9       	ldi	r24, 0x9D	; 157
    2770:	92 e0       	ldi	r25, 0x02	; 2
    2772:	0e 94 0b 2e 	call	0x5c16	; 0x5c16 <strchr>
    2776:	e8 2f       	mov	r30, r24
    2778:	f9 2f       	mov	r31, r25
    if(!ptr)
    277a:	30 97       	sbiw	r30, 0x00	; 0
    277c:	69 f1       	breq	.+90     	; 0x27d8 <mdm_get_signal_strength+0x92>
    if(isdigit(*ptr) == FALSE)
    277e:	82 81       	ldd	r24, Z+2	; 0x02
    2780:	08 2e       	mov	r0, r24
    2782:	00 0c       	add	r0, r0
    2784:	99 0b       	sbc	r25, r25
    2786:	c0 97       	sbiw	r24, 0x30	; 48
    2788:	0a 97       	sbiw	r24, 0x0a	; 10
    278a:	10 f0       	brcs	.+4      	; 0x2790 <mdm_get_signal_strength+0x4a>
        return 0;
    278c:	80 e0       	ldi	r24, 0x00	; 0
    278e:	08 95       	ret
    level = strtoul(ptr, 0, 10);
    2790:	4a e0       	ldi	r20, 0x0A	; 10
    2792:	50 e0       	ldi	r21, 0x00	; 0
    2794:	70 e0       	ldi	r23, 0x00	; 0
    2796:	60 e0       	ldi	r22, 0x00	; 0
    2798:	cf 01       	movw	r24, r30
    279a:	02 96       	adiw	r24, 0x02	; 2
    279c:	0e 94 4a 2c 	call	0x5894	; 0x5894 <strtoul>
    27a0:	46 2f       	mov	r20, r22
    27a2:	57 2f       	mov	r21, r23
    27a4:	68 2f       	mov	r22, r24
    27a6:	79 2f       	mov	r23, r25
    if(level>=32)
    27a8:	40 32       	cpi	r20, 0x20	; 32
    27aa:	51 05       	cpc	r21, r1
    27ac:	61 05       	cpc	r22, r1
    27ae:	71 05       	cpc	r23, r1
    27b0:	a8 f4       	brcc	.+42     	; 0x27dc <mdm_get_signal_strength+0x96>
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    27b2:	42 50       	subi	r20, 0x02	; 2
    27b4:	51 09       	sbc	r21, r1
    27b6:	84 e6       	ldi	r24, 0x64	; 100
    27b8:	84 9f       	mul	r24, r20
    27ba:	90 01       	movw	r18, r0
    27bc:	85 9f       	mul	r24, r21
    27be:	30 0d       	add	r19, r0
    27c0:	11 24       	eor	r1, r1
    27c2:	af e9       	ldi	r26, 0x9F	; 159
    27c4:	b6 e4       	ldi	r27, 0x46	; 70
    27c6:	0e 94 e2 29 	call	0x53c4	; 0x53c4 <__umulhisi3>
    27ca:	96 95       	lsr	r25
    27cc:	87 95       	ror	r24
    27ce:	96 95       	lsr	r25
    27d0:	87 95       	ror	r24
    27d2:	96 95       	lsr	r25
    27d4:	87 95       	ror	r24
        return map_s(level, 2, 31, 0, 100);
    27d6:	08 95       	ret
        return 0;
    27d8:	80 e0       	ldi	r24, 0x00	; 0
    27da:	08 95       	ret
        return 0;
    27dc:	80 e0       	ldi	r24, 0x00	; 0
}
    27de:	08 95       	ret

000027e0 <mdm_wait_str>:
{
    27e0:	cf 92       	push	r12
    27e2:	df 92       	push	r13
    27e4:	ef 92       	push	r14
    27e6:	ff 92       	push	r15
    27e8:	cf 93       	push	r28
    27ea:	df 93       	push	r29
    27ec:	00 d0       	rcall	.+0      	; 0x27ee <mdm_wait_str+0xe>
    27ee:	00 d0       	rcall	.+0      	; 0x27f0 <mdm_wait_str+0x10>
    27f0:	0f 92       	push	r0
    27f2:	cd b7       	in	r28, 0x3d	; 61
    27f4:	de b7       	in	r29, 0x3e	; 62
    27f6:	e8 2e       	mov	r14, r24
    27f8:	f9 2e       	mov	r15, r25
    time_stamp = get_time_ms() + time_to_wait_ms;
    27fa:	0e 94 65 27 	call	0x4eca	; 0x4eca <get_time_ms>
    27fe:	dc 01       	movw	r26, r24
    2800:	cb 01       	movw	r24, r22
    2802:	8e 0d       	add	r24, r14
    2804:	9f 1d       	adc	r25, r15
    2806:	a1 1d       	adc	r26, r1
    2808:	b1 1d       	adc	r27, r1
    280a:	6c 01       	movw	r12, r24
    280c:	7d 01       	movw	r14, r26
    while(get_message_from_mdm()==0)
    280e:	0e 94 0d 12 	call	0x241a	; 0x241a <get_message_from_mdm>
    2812:	8d 83       	std	Y+5, r24	; 0x05
    2814:	81 11       	cpse	r24, r1
    2816:	0c c0       	rjmp	.+24     	; 0x2830 <mdm_wait_str+0x50>
        if((get_time_ms() > time_stamp) )
    2818:	0e 94 65 27 	call	0x4eca	; 0x4eca <get_time_ms>
    281c:	c6 16       	cp	r12, r22
    281e:	d7 06       	cpc	r13, r23
    2820:	e8 06       	cpc	r14, r24
    2822:	f9 06       	cpc	r15, r25
    2824:	a0 f7       	brcc	.-24     	; 0x280e <mdm_wait_str+0x2e>
            softuart_puts_p(PSTR( "wait str time end" ));
    2826:	81 ef       	ldi	r24, 0xF1	; 241
    2828:	94 e0       	ldi	r25, 0x04	; 4
    282a:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <softuart_puts_p>
            return 0;
    282e:	02 c0       	rjmp	.+4      	; 0x2834 <mdm_wait_str+0x54>
    return 1;
    2830:	91 e0       	ldi	r25, 0x01	; 1
    2832:	9d 83       	std	Y+5, r25	; 0x05
}
    2834:	8d 81       	ldd	r24, Y+5	; 0x05
    2836:	0f 90       	pop	r0
    2838:	0f 90       	pop	r0
    283a:	0f 90       	pop	r0
    283c:	0f 90       	pop	r0
    283e:	0f 90       	pop	r0
    2840:	df 91       	pop	r29
    2842:	cf 91       	pop	r28
    2844:	ff 90       	pop	r15
    2846:	ef 90       	pop	r14
    2848:	df 90       	pop	r13
    284a:	cf 90       	pop	r12
    284c:	08 95       	ret

0000284e <call_status>:
{
    284e:	cf 93       	push	r28
    2850:	c1 e0       	ldi	r28, 0x01	; 1
    2852:	14 c0       	rjmp	.+40     	; 0x287c <call_status+0x2e>
            delay_ms(100);
    2854:	84 e6       	ldi	r24, 0x64	; 100
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
        uart_flush();
    285c:	0e 94 35 29 	call	0x526a	; 0x526a <uart_flush>
        uart_send_str_p(PSTR("AT+CLCC\r\n"));
    2860:	87 e1       	ldi	r24, 0x17	; 23
    2862:	95 e0       	ldi	r25, 0x05	; 5
    2864:	0e 94 1d 29 	call	0x523a	; 0x523a <uart_send_str_p>
        if(mdm_wait_str(2000))
    2868:	80 ed       	ldi	r24, 0xD0	; 208
    286a:	97 e0       	ldi	r25, 0x07	; 7
    286c:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <mdm_wait_str>
    2870:	81 11       	cpse	r24, r1
    2872:	12 c0       	rjmp	.+36     	; 0x2898 <call_status+0x4a>
    for(uint8_t i = 0; i < 5; i++)
    2874:	c5 30       	cpi	r28, 0x05	; 5
    2876:	08 f0       	brcs	.+2      	; 0x287a <call_status+0x2c>
    2878:	68 c0       	rjmp	.+208    	; 0x294a <call_status+0xfc>
    287a:	cf 5f       	subi	r28, 0xFF	; 255
        if(i != 0)
    287c:	c1 30       	cpi	r28, 0x01	; 1
    287e:	51 f7       	brne	.-44     	; 0x2854 <call_status+0x6>
        uart_flush();
    2880:	0e 94 35 29 	call	0x526a	; 0x526a <uart_flush>
        uart_send_str_p(PSTR("AT+CLCC\r\n"));
    2884:	87 e1       	ldi	r24, 0x17	; 23
    2886:	95 e0       	ldi	r25, 0x05	; 5
    2888:	0e 94 1d 29 	call	0x523a	; 0x523a <uart_send_str_p>
        if(mdm_wait_str(2000))
    288c:	80 ed       	ldi	r24, 0xD0	; 208
    288e:	97 e0       	ldi	r25, 0x07	; 7
    2890:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <mdm_wait_str>
    2894:	88 23       	and	r24, r24
    2896:	89 f3       	breq	.-30     	; 0x287a <call_status+0x2c>
            ptr = strstr_P(mdm_data, PSTR("+CLCC:"));
    2898:	60 e1       	ldi	r22, 0x10	; 16
    289a:	75 e0       	ldi	r23, 0x05	; 5
    289c:	8d e9       	ldi	r24, 0x9D	; 157
    289e:	92 e0       	ldi	r25, 0x02	; 2
    28a0:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <strstr_P>
            if(ptr)
    28a4:	89 2b       	or	r24, r25
    28a6:	99 f1       	breq	.+102    	; 0x290e <call_status+0xc0>
                ptr = strchr(mdm_data, ','); // ищем первую запятую в строке
    28a8:	6c e2       	ldi	r22, 0x2C	; 44
    28aa:	70 e0       	ldi	r23, 0x00	; 0
    28ac:	8d e9       	ldi	r24, 0x9D	; 157
    28ae:	92 e0       	ldi	r25, 0x02	; 2
    28b0:	0e 94 0b 2e 	call	0x5c16	; 0x5c16 <strchr>
    28b4:	28 2f       	mov	r18, r24
    28b6:	39 2f       	mov	r19, r25
                if(ptr)
    28b8:	21 15       	cp	r18, r1
    28ba:	31 05       	cpc	r19, r1
    28bc:	d9 f2       	breq	.-74     	; 0x2874 <call_status+0x26>
                    ptr = strchr(ptr, ','); // ищем вторую запятую в строке
    28be:	6c e2       	ldi	r22, 0x2C	; 44
    28c0:	70 e0       	ldi	r23, 0x00	; 0
    28c2:	c9 01       	movw	r24, r18
    28c4:	01 96       	adiw	r24, 0x01	; 1
    28c6:	0e 94 0b 2e 	call	0x5c16	; 0x5c16 <strchr>
    28ca:	e8 2f       	mov	r30, r24
    28cc:	f9 2f       	mov	r31, r25
                    if(ptr)
    28ce:	30 97       	sbiw	r30, 0x00	; 0
    28d0:	89 f2       	breq	.-94     	; 0x2874 <call_status+0x26>
                        if(isdigit(*++ptr))
    28d2:	e1 81       	ldd	r30, Z+1	; 0x01
    28d4:	8e 2f       	mov	r24, r30
    28d6:	0e 2e       	mov	r0, r30
    28d8:	00 0c       	add	r0, r0
    28da:	99 0b       	sbc	r25, r25
    28dc:	c0 97       	sbiw	r24, 0x30	; 48
    28de:	0a 97       	sbiw	r24, 0x0a	; 10
    28e0:	48 f6       	brcc	.-110    	; 0x2874 <call_status+0x26>
                            switch( ptr[0]) 																													//	Получаем значение состояния вызова.
    28e2:	e0 53       	subi	r30, 0x30	; 48
    28e4:	e8 30       	cpi	r30, 0x08	; 8
    28e6:	88 f4       	brcc	.+34     	; 0x290a <call_status+0xbc>
    28e8:	0e 2e       	mov	r0, r30
    28ea:	00 0c       	add	r0, r0
    28ec:	ff 0b       	sbc	r31, r31
    28ee:	ec 5f       	subi	r30, 0xFC	; 252
    28f0:	fd 4c       	sbci	r31, 0xCD	; 205
    28f2:	0c 94 dc 29 	jmp	0x53b8	; 0x53b8 <__tablejump2__>
    28f6:	83 e0       	ldi	r24, 0x03	; 3
    28f8:	29 c0       	rjmp	.+82     	; 0x294c <call_status+0xfe>
                                return GSM_CALL_OUT_BEEP;
    28fa:	86 e0       	ldi	r24, 0x06	; 6
    28fc:	27 c0       	rjmp	.+78     	; 0x294c <call_status+0xfe>
                                return GSM_CALL_IN_BEEP;
    28fe:	87 e0       	ldi	r24, 0x07	; 7
    2900:	25 c0       	rjmp	.+74     	; 0x294c <call_status+0xfe>
                                return GSM_CALL_IN_WAIT;
    2902:	88 e0       	ldi	r24, 0x08	; 8
    2904:	23 c0       	rjmp	.+70     	; 0x294c <call_status+0xfe>
                                return GSM_CALL_END;
    2906:	84 e0       	ldi	r24, 0x04	; 4
    2908:	21 c0       	rjmp	.+66     	; 0x294c <call_status+0xfe>
                                return GSM_CALL_ERR;
    290a:	80 e0       	ldi	r24, 0x00	; 0
    290c:	1f c0       	rjmp	.+62     	; 0x294c <call_status+0xfe>
            ptr = strstr_P(mdm_data, PSTR("ERROR"));
    290e:	6a e0       	ldi	r22, 0x0A	; 10
    2910:	75 e0       	ldi	r23, 0x05	; 5
    2912:	8d e9       	ldi	r24, 0x9D	; 157
    2914:	92 e0       	ldi	r25, 0x02	; 2
    2916:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <strstr_P>
            if(ptr)
    291a:	89 2b       	or	r24, r25
    291c:	09 f0       	breq	.+2      	; 0x2920 <call_status+0xd2>
    291e:	aa cf       	rjmp	.-172    	; 0x2874 <call_status+0x26>
            ptr = strstr_P(mdm_data, PSTR("+DTMF:"));
    2920:	63 e0       	ldi	r22, 0x03	; 3
    2922:	75 e0       	ldi	r23, 0x05	; 5
    2924:	8d e9       	ldi	r24, 0x9D	; 157
    2926:	92 e0       	ldi	r25, 0x02	; 2
    2928:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <strstr_P>
    292c:	28 2f       	mov	r18, r24
    292e:	39 2f       	mov	r19, r25
            if(ptr)   // DTFM msg
    2930:	21 15       	cp	r18, r1
    2932:	31 05       	cpc	r19, r1
    2934:	09 f4       	brne	.+2      	; 0x2938 <call_status+0xea>
    2936:	9e cf       	rjmp	.-196    	; 0x2874 <call_status+0x26>
                parse_DTFM(ptr);
    2938:	c9 01       	movw	r24, r18
    293a:	0e 94 06 13 	call	0x260c	; 0x260c <parse_DTFM>
                return GSM_CALL_ACTIVE;
    293e:	82 e0       	ldi	r24, 0x02	; 2
    2940:	05 c0       	rjmp	.+10     	; 0x294c <call_status+0xfe>
                                return GSM_CALL_ACTIVE;
    2942:	82 e0       	ldi	r24, 0x02	; 2
    2944:	03 c0       	rjmp	.+6      	; 0x294c <call_status+0xfe>
                                return GSM_CALL_OUT_DIAL;
    2946:	85 e0       	ldi	r24, 0x05	; 5
    2948:	01 c0       	rjmp	.+2      	; 0x294c <call_status+0xfe>
    return 0;
    294a:	80 e0       	ldi	r24, 0x00	; 0
}
    294c:	cf 91       	pop	r28
    294e:	08 95       	ret

00002950 <registration_status_ms>:
{
    2950:	cf 92       	push	r12
    2952:	df 92       	push	r13
    2954:	ef 92       	push	r14
    2956:	ff 92       	push	r15
    2958:	cf 93       	push	r28
    295a:	df 93       	push	r29
    295c:	00 d0       	rcall	.+0      	; 0x295e <registration_status_ms+0xe>
    295e:	00 d0       	rcall	.+0      	; 0x2960 <registration_status_ms+0x10>
    2960:	cd b7       	in	r28, 0x3d	; 61
    2962:	de b7       	in	r29, 0x3e	; 62
    2964:	c6 2e       	mov	r12, r22
    2966:	d7 2e       	mov	r13, r23
    2968:	e8 2e       	mov	r14, r24
    296a:	f9 2e       	mov	r15, r25
    uint32_t time_stamp = get_time_ms() + time_to_wait_ms;
    296c:	0e 94 65 27 	call	0x4eca	; 0x4eca <get_time_ms>
    2970:	c6 0e       	add	r12, r22
    2972:	d7 1e       	adc	r13, r23
    2974:	e8 1e       	adc	r14, r24
    2976:	f9 1e       	adc	r15, r25
    delay_ms(200);
    2978:	88 ec       	ldi	r24, 0xC8	; 200
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
    uart_flush();
    2980:	0e 94 35 29 	call	0x526a	; 0x526a <uart_flush>
    uart_send_str_p(PSTR("AT+CREG?\r\n"));
    2984:	84 ed       	ldi	r24, 0xD4	; 212
    2986:	94 e0       	ldi	r25, 0x04	; 4
    2988:	0e 94 1d 29 	call	0x523a	; 0x523a <uart_send_str_p>
    298c:	07 c0       	rjmp	.+14     	; 0x299c <registration_status_ms+0x4c>
            if(get_time_ms() > time_stamp)
    298e:	0e 94 65 27 	call	0x4eca	; 0x4eca <get_time_ms>
    2992:	c6 16       	cp	r12, r22
    2994:	d7 06       	cpc	r13, r23
    2996:	e8 06       	cpc	r14, r24
    2998:	f9 06       	cpc	r15, r25
    299a:	80 f1       	brcs	.+96     	; 0x29fc <registration_status_ms+0xac>
        while(get_message_from_mdm()==0)
    299c:	0e 94 0d 12 	call	0x241a	; 0x241a <get_message_from_mdm>
    29a0:	88 23       	and	r24, r24
    29a2:	a9 f3       	breq	.-22     	; 0x298e <registration_status_ms+0x3e>
        ptr = strstr_P(mdm_data, PSTR("+CREG:")); // статус регистрации в сети
    29a4:	6d ec       	ldi	r22, 0xCD	; 205
    29a6:	74 e0       	ldi	r23, 0x04	; 4
    29a8:	8d e9       	ldi	r24, 0x9D	; 157
    29aa:	92 e0       	ldi	r25, 0x02	; 2
    29ac:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <strstr_P>
    29b0:	28 2f       	mov	r18, r24
    29b2:	39 2f       	mov	r19, r25
        if(ptr)
    29b4:	21 15       	cp	r18, r1
    29b6:	31 05       	cpc	r19, r1
    29b8:	89 f3       	breq	.-30     	; 0x299c <registration_status_ms+0x4c>
            ptr = strchr(ptr, ',');
    29ba:	6c e2       	ldi	r22, 0x2C	; 44
    29bc:	70 e0       	ldi	r23, 0x00	; 0
    29be:	c9 01       	movw	r24, r18
    29c0:	0e 94 0b 2e 	call	0x5c16	; 0x5c16 <strchr>
    29c4:	28 2f       	mov	r18, r24
    29c6:	39 2f       	mov	r19, r25
            if(ptr)
    29c8:	21 15       	cp	r18, r1
    29ca:	31 05       	cpc	r19, r1
    29cc:	39 f3       	breq	.-50     	; 0x299c <registration_status_ms+0x4c>
                uint32_t n = strtoul(++ptr, 0, 10);
    29ce:	4a e0       	ldi	r20, 0x0A	; 10
    29d0:	50 e0       	ldi	r21, 0x00	; 0
    29d2:	70 e0       	ldi	r23, 0x00	; 0
    29d4:	60 e0       	ldi	r22, 0x00	; 0
    29d6:	c9 01       	movw	r24, r18
    29d8:	01 96       	adiw	r24, 0x01	; 1
    29da:	0e 94 4a 2c 	call	0x5894	; 0x5894 <strtoul>
                if((n==1)||(n==5)) // регистрация в домашней сети, или роуминге
    29de:	dc 01       	movw	r26, r24
    29e0:	cb 01       	movw	r24, r22
    29e2:	8b 7f       	andi	r24, 0xFB	; 251
    29e4:	01 97       	sbiw	r24, 0x01	; 1
    29e6:	a1 05       	cpc	r26, r1
    29e8:	b1 05       	cpc	r27, r1
    29ea:	21 f0       	breq	.+8      	; 0x29f4 <registration_status_ms+0xa4>
                    registered_in_gsm_network = 0;
    29ec:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <registered_in_gsm_network>
                    return 0;
    29f0:	80 e0       	ldi	r24, 0x00	; 0
    29f2:	05 c0       	rjmp	.+10     	; 0x29fe <registration_status_ms+0xae>
                    registered_in_gsm_network = 1;
    29f4:	81 e0       	ldi	r24, 0x01	; 1
    29f6:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <registered_in_gsm_network>
                    return 1;
    29fa:	01 c0       	rjmp	.+2      	; 0x29fe <registration_status_ms+0xae>
                return 0;
    29fc:	80 e0       	ldi	r24, 0x00	; 0
}
    29fe:	0f 90       	pop	r0
    2a00:	0f 90       	pop	r0
    2a02:	0f 90       	pop	r0
    2a04:	0f 90       	pop	r0
    2a06:	df 91       	pop	r29
    2a08:	cf 91       	pop	r28
    2a0a:	ff 90       	pop	r15
    2a0c:	ef 90       	pop	r14
    2a0e:	df 90       	pop	r13
    2a10:	cf 90       	pop	r12
    2a12:	08 95       	ret

00002a14 <mdm_wait_prompt_ms>:
{
    2a14:	cf 92       	push	r12
    2a16:	df 92       	push	r13
    2a18:	ef 92       	push	r14
    2a1a:	ff 92       	push	r15
    2a1c:	0f 93       	push	r16
    2a1e:	1f 93       	push	r17
    2a20:	cf 93       	push	r28
    2a22:	df 93       	push	r29
    2a24:	00 d0       	rcall	.+0      	; 0x2a26 <mdm_wait_prompt_ms+0x12>
    2a26:	00 d0       	rcall	.+0      	; 0x2a28 <mdm_wait_prompt_ms+0x14>
    2a28:	0f 92       	push	r0
    2a2a:	cd b7       	in	r28, 0x3d	; 61
    2a2c:	de b7       	in	r29, 0x3e	; 62
    2a2e:	08 2f       	mov	r16, r24
    2a30:	19 2f       	mov	r17, r25
    time_stamp = get_time_ms() + time_to_wait_ms;
    2a32:	0e 94 65 27 	call	0x4eca	; 0x4eca <get_time_ms>
    2a36:	69 83       	std	Y+1, r22	; 0x01
    2a38:	7a 83       	std	Y+2, r23	; 0x02
    2a3a:	8b 83       	std	Y+3, r24	; 0x03
    2a3c:	9c 83       	std	Y+4, r25	; 0x04
    2a3e:	6b 01       	movw	r12, r22
    2a40:	7c 01       	movw	r14, r24
    2a42:	c0 0e       	add	r12, r16
    2a44:	d1 1e       	adc	r13, r17
    2a46:	e1 1c       	adc	r14, r1
    2a48:	f1 1c       	adc	r15, r1
        if(mdm_data[0] == '>')
    2a4a:	0d e9       	ldi	r16, 0x9D	; 157
    2a4c:	12 e0       	ldi	r17, 0x02	; 2
    2a4e:	0b c0       	rjmp	.+22     	; 0x2a66 <mdm_wait_prompt_ms+0x52>
            if((get_time_ms() > time_stamp))
    2a50:	0e 94 65 27 	call	0x4eca	; 0x4eca <get_time_ms>
    2a54:	69 83       	std	Y+1, r22	; 0x01
    2a56:	7a 83       	std	Y+2, r23	; 0x02
    2a58:	8b 83       	std	Y+3, r24	; 0x03
    2a5a:	9c 83       	std	Y+4, r25	; 0x04
    2a5c:	c6 16       	cp	r12, r22
    2a5e:	d7 06       	cpc	r13, r23
    2a60:	e8 06       	cpc	r14, r24
    2a62:	f9 06       	cpc	r15, r25
    2a64:	a0 f0       	brcs	.+40     	; 0x2a8e <mdm_wait_prompt_ms+0x7a>
        while(get_message_from_mdm()==0)
    2a66:	0e 94 0d 12 	call	0x241a	; 0x241a <get_message_from_mdm>
    2a6a:	8d 83       	std	Y+5, r24	; 0x05
    2a6c:	88 23       	and	r24, r24
    2a6e:	81 f3       	breq	.-32     	; 0x2a50 <mdm_wait_prompt_ms+0x3c>
        if(mdm_data[0] == '>')
    2a70:	d8 01       	movw	r26, r16
    2a72:	8c 91       	ld	r24, X
    2a74:	8e 33       	cpi	r24, 0x3E	; 62
    2a76:	49 f0       	breq	.+18     	; 0x2a8a <mdm_wait_prompt_ms+0x76>
        ptr = strstr_P(mdm_data, PSTR("ERROR"));
    2a78:	60 eb       	ldi	r22, 0xB0	; 176
    2a7a:	74 e0       	ldi	r23, 0x04	; 4
    2a7c:	c8 01       	movw	r24, r16
    2a7e:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <strstr_P>
        if(ptr)
    2a82:	89 2b       	or	r24, r25
    2a84:	81 f3       	breq	.-32     	; 0x2a66 <mdm_wait_prompt_ms+0x52>
            return 0;
    2a86:	1d 82       	std	Y+5, r1	; 0x05
    2a88:	02 c0       	rjmp	.+4      	; 0x2a8e <mdm_wait_prompt_ms+0x7a>
            return 1;
    2a8a:	b1 e0       	ldi	r27, 0x01	; 1
    2a8c:	bd 83       	std	Y+5, r27	; 0x05
}
    2a8e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a90:	0f 90       	pop	r0
    2a92:	0f 90       	pop	r0
    2a94:	0f 90       	pop	r0
    2a96:	0f 90       	pop	r0
    2a98:	0f 90       	pop	r0
    2a9a:	df 91       	pop	r29
    2a9c:	cf 91       	pop	r28
    2a9e:	1f 91       	pop	r17
    2aa0:	0f 91       	pop	r16
    2aa2:	ff 90       	pop	r15
    2aa4:	ef 90       	pop	r14
    2aa6:	df 90       	pop	r13
    2aa8:	cf 90       	pop	r12
    2aaa:	08 95       	ret

00002aac <save_sms_sim>:
{
    2aac:	0f 93       	push	r16
    2aae:	1f 93       	push	r17
    2ab0:	cf 93       	push	r28
    2ab2:	df 93       	push	r29
    2ab4:	08 2f       	mov	r16, r24
    2ab6:	19 2f       	mov	r17, r25
    sprintf_P(mdm_data, PSTR("AT+CMGW=\"%s\"\r\n"), _phone);
    2ab8:	7f 93       	push	r23
    2aba:	6f 93       	push	r22
    2abc:	81 ea       	ldi	r24, 0xA1	; 161
    2abe:	94 e0       	ldi	r25, 0x04	; 4
    2ac0:	9f 93       	push	r25
    2ac2:	8f 93       	push	r24
    2ac4:	8d e9       	ldi	r24, 0x9D	; 157
    2ac6:	92 e0       	ldi	r25, 0x02	; 2
    2ac8:	9f 93       	push	r25
    2aca:	8f 93       	push	r24
    2acc:	0e 94 a7 2e 	call	0x5d4e	; 0x5d4e <sprintf_P>
    2ad0:	0f 90       	pop	r0
    2ad2:	0f 90       	pop	r0
    2ad4:	0f 90       	pop	r0
    2ad6:	0f 90       	pop	r0
    2ad8:	0f 90       	pop	r0
    2ada:	0f 90       	pop	r0
    2adc:	c1 e0       	ldi	r28, 0x01	; 1
    uint8_t rez = 0;
    2ade:	d0 e0       	ldi	r29, 0x00	; 0
    2ae0:	29 c0       	rjmp	.+82     	; 0x2b34 <save_sms_sim+0x88>
            delay_ms(300);
    2ae2:	8c e2       	ldi	r24, 0x2C	; 44
    2ae4:	91 e0       	ldi	r25, 0x01	; 1
    2ae6:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
        uart_flush();
    2aea:	0e 94 35 29 	call	0x526a	; 0x526a <uart_flush>
        uart_send_str(mdm_data);
    2aee:	8d e9       	ldi	r24, 0x9D	; 157
    2af0:	92 e0       	ldi	r25, 0x02	; 2
    2af2:	0e 94 ff 28 	call	0x51fe	; 0x51fe <uart_send_str>
        if(mdm_wait_prompt_ms(3000) == FALSE)
    2af6:	88 eb       	ldi	r24, 0xB8	; 184
    2af8:	9b e0       	ldi	r25, 0x0B	; 11
    2afa:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <mdm_wait_prompt_ms>
    2afe:	88 23       	and	r24, r24
    2b00:	b1 f0       	breq	.+44     	; 0x2b2e <save_sms_sim+0x82>
        uart_flush();
    2b02:	0e 94 35 29 	call	0x526a	; 0x526a <uart_flush>
        uart_send_str(_msg);
    2b06:	80 2f       	mov	r24, r16
    2b08:	91 2f       	mov	r25, r17
    2b0a:	0e 94 ff 28 	call	0x51fe	; 0x51fe <uart_send_str>
        delay_ms(20);
    2b0e:	84 e1       	ldi	r24, 0x14	; 20
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
        uart_send_byte(0x1A);
    2b16:	8a e1       	ldi	r24, 0x1A	; 26
    2b18:	0e 94 15 29 	call	0x522a	; 0x522a <uart_send_byte>
        rez = mdm_wait_cmd_ms(2000, (const char*)RESPON_OK);
    2b1c:	62 e5       	ldi	r22, 0x52	; 82
    2b1e:	71 e0       	ldi	r23, 0x01	; 1
    2b20:	80 ed       	ldi	r24, 0xD0	; 208
    2b22:	97 e0       	ldi	r25, 0x07	; 7
    2b24:	0e 94 59 12 	call	0x24b2	; 0x24b2 <mdm_wait_cmd_ms>
    2b28:	d8 2f       	mov	r29, r24
        if(rez == 1)
    2b2a:	81 30       	cpi	r24, 0x01	; 1
    2b2c:	39 f1       	breq	.+78     	; 0x2b7c <save_sms_sim+0xd0>
    for(uint8_t i = 0; i < 10; i++)
    2b2e:	ca 30       	cpi	r28, 0x0A	; 10
    2b30:	48 f5       	brcc	.+82     	; 0x2b84 <save_sms_sim+0xd8>
    2b32:	cf 5f       	subi	r28, 0xFF	; 255
        if(i!=0)
    2b34:	c1 30       	cpi	r28, 0x01	; 1
    2b36:	a9 f6       	brne	.-86     	; 0x2ae2 <save_sms_sim+0x36>
        uart_flush();
    2b38:	0e 94 35 29 	call	0x526a	; 0x526a <uart_flush>
        uart_send_str(mdm_data);
    2b3c:	8d e9       	ldi	r24, 0x9D	; 157
    2b3e:	92 e0       	ldi	r25, 0x02	; 2
    2b40:	0e 94 ff 28 	call	0x51fe	; 0x51fe <uart_send_str>
        if(mdm_wait_prompt_ms(3000) == FALSE)
    2b44:	88 eb       	ldi	r24, 0xB8	; 184
    2b46:	9b e0       	ldi	r25, 0x0B	; 11
    2b48:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <mdm_wait_prompt_ms>
    2b4c:	88 23       	and	r24, r24
    2b4e:	89 f3       	breq	.-30     	; 0x2b32 <save_sms_sim+0x86>
        uart_flush();
    2b50:	0e 94 35 29 	call	0x526a	; 0x526a <uart_flush>
        uart_send_str(_msg);
    2b54:	80 2f       	mov	r24, r16
    2b56:	91 2f       	mov	r25, r17
    2b58:	0e 94 ff 28 	call	0x51fe	; 0x51fe <uart_send_str>
        delay_ms(20);
    2b5c:	84 e1       	ldi	r24, 0x14	; 20
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
        uart_send_byte(0x1A);
    2b64:	8a e1       	ldi	r24, 0x1A	; 26
    2b66:	0e 94 15 29 	call	0x522a	; 0x522a <uart_send_byte>
        rez = mdm_wait_cmd_ms(2000, (const char*)RESPON_OK);
    2b6a:	62 e5       	ldi	r22, 0x52	; 82
    2b6c:	71 e0       	ldi	r23, 0x01	; 1
    2b6e:	80 ed       	ldi	r24, 0xD0	; 208
    2b70:	97 e0       	ldi	r25, 0x07	; 7
    2b72:	0e 94 59 12 	call	0x24b2	; 0x24b2 <mdm_wait_cmd_ms>
    2b76:	d8 2f       	mov	r29, r24
        if(rez == 1)
    2b78:	81 30       	cpi	r24, 0x01	; 1
    2b7a:	d9 f6       	brne	.-74     	; 0x2b32 <save_sms_sim+0x86>
            unsent_sms = 1;
    2b7c:	81 e0       	ldi	r24, 0x01	; 1
    2b7e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <unsent_sms>
        rez = mdm_wait_cmd_ms(2000, (const char*)RESPON_OK);
    2b82:	d1 e0       	ldi	r29, 0x01	; 1
}
    2b84:	8d 2f       	mov	r24, r29
    2b86:	df 91       	pop	r29
    2b88:	cf 91       	pop	r28
    2b8a:	1f 91       	pop	r17
    2b8c:	0f 91       	pop	r16
    2b8e:	08 95       	ret

00002b90 <send_sms>:
{
    2b90:	ff 92       	push	r15
    2b92:	0f 93       	push	r16
    2b94:	1f 93       	push	r17
    2b96:	cf 93       	push	r28
    2b98:	df 93       	push	r29
    2b9a:	f8 2e       	mov	r15, r24
    2b9c:	09 2f       	mov	r16, r25
    2b9e:	16 2f       	mov	r17, r22
    2ba0:	d7 2f       	mov	r29, r23
    if(deposit < 1)
    2ba2:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <deposit>
    2ba6:	90 91 80 02 	lds	r25, 0x0280	; 0x800280 <deposit+0x1>
        return 0;
    2baa:	c0 e0       	ldi	r28, 0x00	; 0
    if(deposit < 1)
    2bac:	18 16       	cp	r1, r24
    2bae:	19 06       	cpc	r1, r25
    2bb0:	0c f0       	brlt	.+2      	; 0x2bb4 <send_sms+0x24>
    2bb2:	4d c0       	rjmp	.+154    	; 0x2c4e <send_sms+0xbe>
    if(registration_status_ms(2000) == 0)
    2bb4:	60 ed       	ldi	r22, 0xD0	; 208
    2bb6:	77 e0       	ldi	r23, 0x07	; 7
    2bb8:	80 e0       	ldi	r24, 0x00	; 0
    2bba:	90 e0       	ldi	r25, 0x00	; 0
    2bbc:	0e 94 a8 14 	call	0x2950	; 0x2950 <registration_status_ms>
    2bc0:	88 23       	and	r24, r24
    2bc2:	f1 f1       	breq	.+124    	; 0x2c40 <send_sms+0xb0>
    delay_ms(200);
    2bc4:	88 ec       	ldi	r24, 0xC8	; 200
    2bc6:	90 e0       	ldi	r25, 0x00	; 0
    2bc8:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
    sprintf_P(mdm_data, PSTR("AT+CMGS=\"%s\"\r\n"), phone);
    2bcc:	df 93       	push	r29
    2bce:	1f 93       	push	r17
    2bd0:	86 eb       	ldi	r24, 0xB6	; 182
    2bd2:	94 e0       	ldi	r25, 0x04	; 4
    2bd4:	9f 93       	push	r25
    2bd6:	8f 93       	push	r24
    2bd8:	8d e9       	ldi	r24, 0x9D	; 157
    2bda:	92 e0       	ldi	r25, 0x02	; 2
    2bdc:	9f 93       	push	r25
    2bde:	8f 93       	push	r24
    2be0:	0e 94 a7 2e 	call	0x5d4e	; 0x5d4e <sprintf_P>
    uart_flush();
    2be4:	0e 94 35 29 	call	0x526a	; 0x526a <uart_flush>
    uart_send_str(mdm_data);
    2be8:	8d e9       	ldi	r24, 0x9D	; 157
    2bea:	92 e0       	ldi	r25, 0x02	; 2
    2bec:	0e 94 ff 28 	call	0x51fe	; 0x51fe <uart_send_str>
    if(mdm_wait_prompt_ms(1000) == 0)
    2bf0:	88 ee       	ldi	r24, 0xE8	; 232
    2bf2:	93 e0       	ldi	r25, 0x03	; 3
    2bf4:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <mdm_wait_prompt_ms>
    2bf8:	c8 2f       	mov	r28, r24
    2bfa:	0f 90       	pop	r0
    2bfc:	0f 90       	pop	r0
    2bfe:	0f 90       	pop	r0
    2c00:	0f 90       	pop	r0
    2c02:	0f 90       	pop	r0
    2c04:	0f 90       	pop	r0
    2c06:	88 23       	and	r24, r24
    2c08:	49 f1       	breq	.+82     	; 0x2c5c <send_sms+0xcc>
    uart_send_str(str);
    2c0a:	8f 2d       	mov	r24, r15
    2c0c:	90 2f       	mov	r25, r16
    2c0e:	0e 94 ff 28 	call	0x51fe	; 0x51fe <uart_send_str>
    delay_ms(100);
    2c12:	84 e6       	ldi	r24, 0x64	; 100
    2c14:	90 e0       	ldi	r25, 0x00	; 0
    2c16:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
    uart_send_byte(0x1A);
    2c1a:	8a e1       	ldi	r24, 0x1A	; 26
    2c1c:	0e 94 15 29 	call	0x522a	; 0x522a <uart_send_byte>
    rez = mdm_wait_cmd_ms(60000, (const char*)RESPON_CMGS);
    2c20:	62 e8       	ldi	r22, 0x82	; 130
    2c22:	71 e0       	ldi	r23, 0x01	; 1
    2c24:	80 e6       	ldi	r24, 0x60	; 96
    2c26:	9a ee       	ldi	r25, 0xEA	; 234
    2c28:	0e 94 59 12 	call	0x24b2	; 0x24b2 <mdm_wait_cmd_ms>
    2c2c:	c8 2f       	mov	r28, r24
    if(!rez)
    2c2e:	81 11       	cpse	r24, r1
    2c30:	0e c0       	rjmp	.+28     	; 0x2c4e <send_sms+0xbe>
        save_sms_sim(str, phone);
    2c32:	61 2f       	mov	r22, r17
    2c34:	7d 2f       	mov	r23, r29
    2c36:	8f 2d       	mov	r24, r15
    2c38:	90 2f       	mov	r25, r16
    2c3a:	0e 94 56 15 	call	0x2aac	; 0x2aac <save_sms_sim>
    2c3e:	07 c0       	rjmp	.+14     	; 0x2c4e <send_sms+0xbe>
        save_sms_sim(str, phone);
    2c40:	61 2f       	mov	r22, r17
    2c42:	7d 2f       	mov	r23, r29
    2c44:	8f 2d       	mov	r24, r15
    2c46:	90 2f       	mov	r25, r16
    2c48:	0e 94 56 15 	call	0x2aac	; 0x2aac <save_sms_sim>
        return 0;
    2c4c:	c0 e0       	ldi	r28, 0x00	; 0
}
    2c4e:	8c 2f       	mov	r24, r28
    2c50:	df 91       	pop	r29
    2c52:	cf 91       	pop	r28
    2c54:	1f 91       	pop	r17
    2c56:	0f 91       	pop	r16
    2c58:	ff 90       	pop	r15
    2c5a:	08 95       	ret
        save_sms_sim(str, phone);
    2c5c:	61 2f       	mov	r22, r17
    2c5e:	7d 2f       	mov	r23, r29
    2c60:	8f 2d       	mov	r24, r15
    2c62:	90 2f       	mov	r25, r16
    2c64:	0e 94 56 15 	call	0x2aac	; 0x2aac <save_sms_sim>
        return 0;
    2c68:	f2 cf       	rjmp	.-28     	; 0x2c4e <send_sms+0xbe>

00002c6a <send_sms_p>:
{
    2c6a:	ff 92       	push	r15
    2c6c:	0f 93       	push	r16
    2c6e:	1f 93       	push	r17
    2c70:	cf 93       	push	r28
    2c72:	df 93       	push	r29
    2c74:	f8 2e       	mov	r15, r24
    2c76:	09 2f       	mov	r16, r25
    2c78:	16 2f       	mov	r17, r22
    2c7a:	d7 2f       	mov	r29, r23
    if(deposit < 1)
    2c7c:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <deposit>
    2c80:	90 91 80 02 	lds	r25, 0x0280	; 0x800280 <deposit+0x1>
        return 0;
    2c84:	c0 e0       	ldi	r28, 0x00	; 0
    if(deposit < 1)
    2c86:	18 16       	cp	r1, r24
    2c88:	19 06       	cpc	r1, r25
    2c8a:	0c f0       	brlt	.+2      	; 0x2c8e <send_sms_p+0x24>
    2c8c:	4d c0       	rjmp	.+154    	; 0x2d28 <send_sms_p+0xbe>
    if(registration_status_ms(2000) == FALSE)
    2c8e:	60 ed       	ldi	r22, 0xD0	; 208
    2c90:	77 e0       	ldi	r23, 0x07	; 7
    2c92:	80 e0       	ldi	r24, 0x00	; 0
    2c94:	90 e0       	ldi	r25, 0x00	; 0
    2c96:	0e 94 a8 14 	call	0x2950	; 0x2950 <registration_status_ms>
    2c9a:	88 23       	and	r24, r24
    2c9c:	f1 f1       	breq	.+124    	; 0x2d1a <send_sms_p+0xb0>
    delay_ms(200);
    2c9e:	88 ec       	ldi	r24, 0xC8	; 200
    2ca0:	90 e0       	ldi	r25, 0x00	; 0
    2ca2:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
    sprintf_P(mdm_data, PSTR("AT+CMGS=\"%s\"\r\n"), phone);
    2ca6:	df 93       	push	r29
    2ca8:	1f 93       	push	r17
    2caa:	82 e9       	ldi	r24, 0x92	; 146
    2cac:	94 e0       	ldi	r25, 0x04	; 4
    2cae:	9f 93       	push	r25
    2cb0:	8f 93       	push	r24
    2cb2:	8d e9       	ldi	r24, 0x9D	; 157
    2cb4:	92 e0       	ldi	r25, 0x02	; 2
    2cb6:	9f 93       	push	r25
    2cb8:	8f 93       	push	r24
    2cba:	0e 94 a7 2e 	call	0x5d4e	; 0x5d4e <sprintf_P>
    uart_flush();
    2cbe:	0e 94 35 29 	call	0x526a	; 0x526a <uart_flush>
    uart_send_str(mdm_data);
    2cc2:	8d e9       	ldi	r24, 0x9D	; 157
    2cc4:	92 e0       	ldi	r25, 0x02	; 2
    2cc6:	0e 94 ff 28 	call	0x51fe	; 0x51fe <uart_send_str>
    if(mdm_wait_prompt_ms(1000) == FALSE)
    2cca:	88 ee       	ldi	r24, 0xE8	; 232
    2ccc:	93 e0       	ldi	r25, 0x03	; 3
    2cce:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <mdm_wait_prompt_ms>
    2cd2:	c8 2f       	mov	r28, r24
    2cd4:	0f 90       	pop	r0
    2cd6:	0f 90       	pop	r0
    2cd8:	0f 90       	pop	r0
    2cda:	0f 90       	pop	r0
    2cdc:	0f 90       	pop	r0
    2cde:	0f 90       	pop	r0
    2ce0:	88 23       	and	r24, r24
    2ce2:	49 f1       	breq	.+82     	; 0x2d36 <send_sms_p+0xcc>
    uart_send_str_p((const char*)str);
    2ce4:	8f 2d       	mov	r24, r15
    2ce6:	90 2f       	mov	r25, r16
    2ce8:	0e 94 1d 29 	call	0x523a	; 0x523a <uart_send_str_p>
    delay_ms(100);
    2cec:	84 e6       	ldi	r24, 0x64	; 100
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
    uart_send_byte(0x1A);
    2cf4:	8a e1       	ldi	r24, 0x1A	; 26
    2cf6:	0e 94 15 29 	call	0x522a	; 0x522a <uart_send_byte>
    rez = mdm_wait_cmd_ms(60000, (const char*)RESPON_CMGS);
    2cfa:	62 e8       	ldi	r22, 0x82	; 130
    2cfc:	71 e0       	ldi	r23, 0x01	; 1
    2cfe:	80 e6       	ldi	r24, 0x60	; 96
    2d00:	9a ee       	ldi	r25, 0xEA	; 234
    2d02:	0e 94 59 12 	call	0x24b2	; 0x24b2 <mdm_wait_cmd_ms>
    2d06:	c8 2f       	mov	r28, r24
    if(!rez)
    2d08:	81 11       	cpse	r24, r1
    2d0a:	0e c0       	rjmp	.+28     	; 0x2d28 <send_sms_p+0xbe>
        save_sms_sim((char*)str, phone);
    2d0c:	61 2f       	mov	r22, r17
    2d0e:	7d 2f       	mov	r23, r29
    2d10:	8f 2d       	mov	r24, r15
    2d12:	90 2f       	mov	r25, r16
    2d14:	0e 94 56 15 	call	0x2aac	; 0x2aac <save_sms_sim>
    2d18:	07 c0       	rjmp	.+14     	; 0x2d28 <send_sms_p+0xbe>
        save_sms_sim((char*)str, phone);
    2d1a:	61 2f       	mov	r22, r17
    2d1c:	7d 2f       	mov	r23, r29
    2d1e:	8f 2d       	mov	r24, r15
    2d20:	90 2f       	mov	r25, r16
    2d22:	0e 94 56 15 	call	0x2aac	; 0x2aac <save_sms_sim>
        return FALSE;
    2d26:	c0 e0       	ldi	r28, 0x00	; 0
}
    2d28:	8c 2f       	mov	r24, r28
    2d2a:	df 91       	pop	r29
    2d2c:	cf 91       	pop	r28
    2d2e:	1f 91       	pop	r17
    2d30:	0f 91       	pop	r16
    2d32:	ff 90       	pop	r15
    2d34:	08 95       	ret
        save_sms_sim((char *)str, phone);
    2d36:	61 2f       	mov	r22, r17
    2d38:	7d 2f       	mov	r23, r29
    2d3a:	8f 2d       	mov	r24, r15
    2d3c:	90 2f       	mov	r25, r16
    2d3e:	0e 94 56 15 	call	0x2aac	; 0x2aac <save_sms_sim>
        return FALSE;
    2d42:	f2 cf       	rjmp	.-28     	; 0x2d28 <send_sms_p+0xbe>

00002d44 <call_to>:
{
    2d44:	bf 92       	push	r11
    2d46:	cf 92       	push	r12
    2d48:	df 92       	push	r13
    2d4a:	ef 92       	push	r14
    2d4c:	ff 92       	push	r15
    2d4e:	0f 93       	push	r16
    2d50:	1f 93       	push	r17
    2d52:	cf 93       	push	r28
    2d54:	df 93       	push	r29
    2d56:	00 d0       	rcall	.+0      	; 0x2d58 <call_to+0x14>
    2d58:	00 d0       	rcall	.+0      	; 0x2d5a <call_to+0x16>
    2d5a:	0f 92       	push	r0
    2d5c:	cd b7       	in	r28, 0x3d	; 61
    2d5e:	de b7       	in	r29, 0x3e	; 62
    2d60:	b8 2e       	mov	r11, r24
    2d62:	99 83       	std	Y+1, r25	; 0x01
    2d64:	c6 2e       	mov	r12, r22
    2d66:	d7 2e       	mov	r13, r23
    hang_up_call();
    2d68:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <hang_up_call>
    if(deposit < 1)
    2d6c:	20 91 7f 02 	lds	r18, 0x027F	; 0x80027f <deposit>
    2d70:	30 91 80 02 	lds	r19, 0x0280	; 0x800280 <deposit+0x1>
        return 0;
    2d74:	80 e0       	ldi	r24, 0x00	; 0
    if(deposit < 1)
    2d76:	12 16       	cp	r1, r18
    2d78:	13 06       	cpc	r1, r19
    2d7a:	9c f5       	brge	.+102    	; 0x2de2 <call_to+0x9e>
    if(registered_in_gsm_network == 0)
    2d7c:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <registered_in_gsm_network>
    2d80:	88 23       	and	r24, r24
    2d82:	79 f1       	breq	.+94     	; 0x2de2 <call_to+0x9e>
    uint8_t i = 0;
    2d84:	1d 82       	std	Y+5, r1	; 0x05
        sprintf_P(mdm_data, PSTR("ATD%s;\r\n"), phone);
    2d86:	0f 2e       	mov	r0, r31
    2d88:	f9 ec       	ldi	r31, 0xC9	; 201
    2d8a:	ef 2e       	mov	r14, r31
    2d8c:	f5 e0       	ldi	r31, 0x05	; 5
    2d8e:	ff 2e       	mov	r15, r31
    2d90:	f0 2d       	mov	r31, r0
    2d92:	0d e9       	ldi	r16, 0x9D	; 157
    2d94:	12 e0       	ldi	r17, 0x02	; 2
        delay_ms(1000);
    2d96:	88 ee       	ldi	r24, 0xE8	; 232
    2d98:	93 e0       	ldi	r25, 0x03	; 3
    2d9a:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
        i++;
    2d9e:	8d 81       	ldd	r24, Y+5	; 0x05
    2da0:	8f 5f       	subi	r24, 0xFF	; 255
    2da2:	8d 83       	std	Y+5, r24	; 0x05
        sprintf_P(mdm_data, PSTR("ATD%s;\r\n"), phone);
    2da4:	99 81       	ldd	r25, Y+1	; 0x01
    2da6:	9f 93       	push	r25
    2da8:	bf 92       	push	r11
    2daa:	ff 92       	push	r15
    2dac:	ef 92       	push	r14
    2dae:	1f 93       	push	r17
    2db0:	0f 93       	push	r16
    2db2:	0e 94 a7 2e 	call	0x5d4e	; 0x5d4e <sprintf_P>
        uart_flush();
    2db6:	0e 94 35 29 	call	0x526a	; 0x526a <uart_flush>
        uart_send_str(mdm_data);
    2dba:	c8 01       	movw	r24, r16
    2dbc:	0e 94 ff 28 	call	0x51fe	; 0x51fe <uart_send_str>
        if(mdm_wait_cmd_ms(2000, (const char*)RESPON_OK))
    2dc0:	62 e5       	ldi	r22, 0x52	; 82
    2dc2:	71 e0       	ldi	r23, 0x01	; 1
    2dc4:	80 ed       	ldi	r24, 0xD0	; 208
    2dc6:	97 e0       	ldi	r25, 0x07	; 7
    2dc8:	0e 94 59 12 	call	0x24b2	; 0x24b2 <mdm_wait_cmd_ms>
    2dcc:	0f 90       	pop	r0
    2dce:	0f 90       	pop	r0
    2dd0:	0f 90       	pop	r0
    2dd2:	0f 90       	pop	r0
    2dd4:	0f 90       	pop	r0
    2dd6:	0f 90       	pop	r0
    2dd8:	81 11       	cpse	r24, r1
    2dda:	12 c0       	rjmp	.+36     	; 0x2e00 <call_to+0xbc>
    while(i < 3)
    2ddc:	9d 81       	ldd	r25, Y+5	; 0x05
    2dde:	93 30       	cpi	r25, 0x03	; 3
    2de0:	d1 f6       	brne	.-76     	; 0x2d96 <call_to+0x52>
}
    2de2:	0f 90       	pop	r0
    2de4:	0f 90       	pop	r0
    2de6:	0f 90       	pop	r0
    2de8:	0f 90       	pop	r0
    2dea:	0f 90       	pop	r0
    2dec:	df 91       	pop	r29
    2dee:	cf 91       	pop	r28
    2df0:	1f 91       	pop	r17
    2df2:	0f 91       	pop	r16
    2df4:	ff 90       	pop	r15
    2df6:	ef 90       	pop	r14
    2df8:	df 90       	pop	r13
    2dfa:	cf 90       	pop	r12
    2dfc:	bf 90       	pop	r11
    2dfe:	08 95       	ret
            delay_ms(200);
    2e00:	88 ec       	ldi	r24, 0xC8	; 200
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
            softuart_puts_p(PSTR("CALL_OUT_DIAL ... " ));
    2e08:	86 eb       	ldi	r24, 0xB6	; 182
    2e0a:	95 e0       	ldi	r25, 0x05	; 5
    2e0c:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <softuart_puts_p>
            while(call_status()==GSM_CALL_OUT_DIAL) // Цикл выполняется пока набирается номер ...
    2e10:	04 c0       	rjmp	.+8      	; 0x2e1a <call_to+0xd6>
                delay_ms(500); //          Можно добавить код который будет выполняться в процессе набора номера             //
    2e12:	84 ef       	ldi	r24, 0xF4	; 244
    2e14:	91 e0       	ldi	r25, 0x01	; 1
    2e16:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
            while(call_status()==GSM_CALL_OUT_DIAL) // Цикл выполняется пока набирается номер ...
    2e1a:	0e 94 27 14 	call	0x284e	; 0x284e <call_status>
    2e1e:	85 30       	cpi	r24, 0x05	; 5
    2e20:	c1 f3       	breq	.-16     	; 0x2e12 <call_to+0xce>
        delay_ms(200);
    2e22:	88 ec       	ldi	r24, 0xC8	; 200
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
        if(call_status()==GSM_CALL_OUT_BEEP)
    2e2a:	0e 94 27 14 	call	0x284e	; 0x284e <call_status>
    2e2e:	86 30       	cpi	r24, 0x06	; 6
    2e30:	09 f1       	breq	.+66     	; 0x2e74 <call_to+0x130>
        delay_ms(200);
    2e32:	88 ec       	ldi	r24, 0xC8	; 200
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
        if(call_status()==GSM_CALL_ACTIVE)                   // Если соединение установлено (абонент ответил), то ...
    2e3a:	0e 94 27 14 	call	0x284e	; 0x284e <call_status>
    2e3e:	82 30       	cpi	r24, 0x02	; 2
    2e40:	f1 f0       	breq	.+60     	; 0x2e7e <call_to+0x13a>
            softuart_puts_p(PSTR( "No answer!" ));
    2e42:	80 ea       	ldi	r24, 0xA0	; 160
    2e44:	95 e0       	ldi	r25, 0x05	; 5
    2e46:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <softuart_puts_p>
            if(i == 3)
    2e4a:	bd 81       	ldd	r27, Y+5	; 0x05
    2e4c:	b3 30       	cpi	r27, 0x03	; 3
    2e4e:	09 f0       	breq	.+2      	; 0x2e52 <call_to+0x10e>
    2e50:	a2 cf       	rjmp	.-188    	; 0x2d96 <call_to+0x52>
                uint8_t flag = get_flag_alarm();
    2e52:	0e 94 ef 07 	call	0xfde	; 0xfde <get_flag_alarm>
                if(flag == FLAG_ALARM_EXT_MOT)
    2e56:	82 30       	cpi	r24, 0x02	; 2
    2e58:	09 f4       	brne	.+2      	; 0x2e5c <call_to+0x118>
    2e5a:	55 c0       	rjmp	.+170    	; 0x2f06 <call_to+0x1c2>
                else if(flag == FLAG_ALARM_DOOR)
    2e5c:	81 30       	cpi	r24, 0x01	; 1
    2e5e:	09 f4       	brne	.+2      	; 0x2e62 <call_to+0x11e>
    2e60:	59 c0       	rjmp	.+178    	; 0x2f14 <call_to+0x1d0>
                else if(flag == FLAG_ALARM_SINGLE)
    2e62:	8b 30       	cpi	r24, 0x0B	; 11
    2e64:	09 f4       	brne	.+2      	; 0x2e68 <call_to+0x124>
    2e66:	5d c0       	rjmp	.+186    	; 0x2f22 <call_to+0x1de>
    return FALSE;
    2e68:	80 e0       	ldi	r24, 0x00	; 0
    2e6a:	bb cf       	rjmp	.-138    	; 0x2de2 <call_to+0x9e>
                delay_ms(1000);
    2e6c:	88 ee       	ldi	r24, 0xE8	; 232
    2e6e:	93 e0       	ldi	r25, 0x03	; 3
    2e70:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
            while(call_status()==GSM_CALL_OUT_BEEP)
    2e74:	0e 94 27 14 	call	0x284e	; 0x284e <call_status>
    2e78:	86 30       	cpi	r24, 0x06	; 6
    2e7a:	c1 f3       	breq	.-16     	; 0x2e6c <call_to+0x128>
    2e7c:	da cf       	rjmp	.-76     	; 0x2e32 <call_to+0xee>
            delay_ms(2000);
    2e7e:	80 ed       	ldi	r24, 0xD0	; 208
    2e80:	97 e0       	ldi	r25, 0x07	; 7
    2e82:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
            play_amr(file_amr, '0');
    2e86:	60 e3       	ldi	r22, 0x30	; 48
    2e88:	8c 2d       	mov	r24, r12
    2e8a:	9d 2d       	mov	r25, r13
    2e8c:	0e 94 a8 12 	call	0x2550	; 0x2550 <play_amr>
            delay_ms(3000);
    2e90:	88 eb       	ldi	r24, 0xB8	; 184
    2e92:	9b e0       	ldi	r25, 0x0B	; 11
    2e94:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
            play_amr(file_amr, '0');
    2e98:	60 e3       	ldi	r22, 0x30	; 48
    2e9a:	8c 2d       	mov	r24, r12
    2e9c:	9d 2d       	mov	r25, r13
    2e9e:	0e 94 a8 12 	call	0x2550	; 0x2550 <play_amr>
            delay_ms(3000);
    2ea2:	88 eb       	ldi	r24, 0xB8	; 184
    2ea4:	9b e0       	ldi	r25, 0x0B	; 11
    2ea6:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
            play_amr(AUDIO_MENU2, '0');
    2eaa:	60 e3       	ldi	r22, 0x30	; 48
    2eac:	89 e8       	ldi	r24, 0x89	; 137
    2eae:	91 e0       	ldi	r25, 0x01	; 1
    2eb0:	0e 94 a8 12 	call	0x2550	; 0x2550 <play_amr>
            time_stamp_s = get_time_s() + 40;
    2eb4:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <get_time_s>
    2eb8:	69 83       	std	Y+1, r22	; 0x01
    2eba:	7a 83       	std	Y+2, r23	; 0x02
    2ebc:	8b 83       	std	Y+3, r24	; 0x03
    2ebe:	9c 83       	std	Y+4, r25	; 0x04
    2ec0:	6b 01       	movw	r12, r22
    2ec2:	7c 01       	movw	r14, r24
    2ec4:	a8 e2       	ldi	r26, 0x28	; 40
    2ec6:	ca 0e       	add	r12, r26
    2ec8:	d1 1c       	adc	r13, r1
    2eca:	e1 1c       	adc	r14, r1
    2ecc:	f1 1c       	adc	r15, r1
            while((call_status()==GSM_CALL_ACTIVE) && (get_time_s() < time_stamp_s))        // Цикл выполняется пока установлено активное голосовое соединение ...
    2ece:	04 c0       	rjmp	.+8      	; 0x2ed8 <call_to+0x194>
                delay_ms(2000);
    2ed0:	80 ed       	ldi	r24, 0xD0	; 208
    2ed2:	97 e0       	ldi	r25, 0x07	; 7
    2ed4:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
            while((call_status()==GSM_CALL_ACTIVE) && (get_time_s() < time_stamp_s))        // Цикл выполняется пока установлено активное голосовое соединение ...
    2ed8:	0e 94 27 14 	call	0x284e	; 0x284e <call_status>
    2edc:	82 30       	cpi	r24, 0x02	; 2
    2ede:	59 f4       	brne	.+22     	; 0x2ef6 <call_to+0x1b2>
    2ee0:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <get_time_s>
    2ee4:	69 83       	std	Y+1, r22	; 0x01
    2ee6:	7a 83       	std	Y+2, r23	; 0x02
    2ee8:	8b 83       	std	Y+3, r24	; 0x03
    2eea:	9c 83       	std	Y+4, r25	; 0x04
    2eec:	6c 15       	cp	r22, r12
    2eee:	7d 05       	cpc	r23, r13
    2ef0:	8e 05       	cpc	r24, r14
    2ef2:	9f 05       	cpc	r25, r15
    2ef4:	68 f3       	brcs	.-38     	; 0x2ed0 <call_to+0x18c>
            softuart_puts_p(PSTR( "Call ended" ));
    2ef6:	8b ea       	ldi	r24, 0xAB	; 171
    2ef8:	95 e0       	ldi	r25, 0x05	; 5
    2efa:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <softuart_puts_p>
            hang_up_call();
    2efe:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <hang_up_call>
            return 1;
    2f02:	81 e0       	ldi	r24, 0x01	; 1
    2f04:	6e cf       	rjmp	.-292    	; 0x2de2 <call_to+0x9e>
                    send_sms_p(PSTR("ALARM! Motion! ext"), phone);
    2f06:	6b 2d       	mov	r22, r11
    2f08:	79 81       	ldd	r23, Y+1	; 0x01
    2f0a:	8d e8       	ldi	r24, 0x8D	; 141
    2f0c:	95 e0       	ldi	r25, 0x05	; 5
    2f0e:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <send_sms_p>
    2f12:	aa cf       	rjmp	.-172    	; 0x2e68 <call_to+0x124>
                    send_sms_p(PSTR("ALARM! Invasion! Door"), phone);
    2f14:	6b 2d       	mov	r22, r11
    2f16:	79 81       	ldd	r23, Y+1	; 0x01
    2f18:	87 e7       	ldi	r24, 0x77	; 119
    2f1a:	95 e0       	ldi	r25, 0x05	; 5
    2f1c:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <send_sms_p>
    2f20:	a3 cf       	rjmp	.-186    	; 0x2e68 <call_to+0x124>
                    send_sms_p(PSTR("ALARM! Motion! int"), phone);
    2f22:	6b 2d       	mov	r22, r11
    2f24:	79 81       	ldd	r23, Y+1	; 0x01
    2f26:	84 e6       	ldi	r24, 0x64	; 100
    2f28:	95 e0       	ldi	r25, 0x05	; 5
    2f2a:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <send_sms_p>
    2f2e:	9c cf       	rjmp	.-200    	; 0x2e68 <call_to+0x124>

00002f30 <alarm_play_file>:
{
    2f30:	1f 93       	push	r17
    2f32:	cf 93       	push	r28
    2f34:	df 93       	push	r29
    2f36:	18 2f       	mov	r17, r24
    2f38:	d9 2f       	mov	r29, r25
    uint8_t i = 0;
    2f3a:	c0 e0       	ldi	r28, 0x00	; 0
    while(get_phones(i)[0]=='+' && i<TOTAL_ADMIN_NUMBER)
    2f3c:	10 c0       	rjmp	.+32     	; 0x2f5e <alarm_play_file+0x2e>
            delay_ms(1000);
    2f3e:	88 ee       	ldi	r24, 0xE8	; 232
    2f40:	93 e0       	ldi	r25, 0x03	; 3
    2f42:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
        call_to(&get_phones(i)[0], file);
    2f46:	8c 2f       	mov	r24, r28
    2f48:	0e 94 0d 11 	call	0x221a	; 0x221a <get_phones>
    2f4c:	61 2f       	mov	r22, r17
    2f4e:	7d 2f       	mov	r23, r29
    2f50:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <call_to>
        if(stop_next_calls == 1)
    2f54:	20 91 8a 02 	lds	r18, 0x028A	; 0x80028a <stop_next_calls>
    2f58:	21 30       	cpi	r18, 0x01	; 1
    2f5a:	69 f0       	breq	.+26     	; 0x2f76 <alarm_play_file+0x46>
        i++;
    2f5c:	cf 5f       	subi	r28, 0xFF	; 255
    while(get_phones(i)[0]=='+' && i<TOTAL_ADMIN_NUMBER)
    2f5e:	8c 2f       	mov	r24, r28
    2f60:	0e 94 0d 11 	call	0x221a	; 0x221a <get_phones>
    2f64:	fc 01       	movw	r30, r24
    2f66:	20 81       	ld	r18, Z
    2f68:	2b 32       	cpi	r18, 0x2B	; 43
    2f6a:	29 f4       	brne	.+10     	; 0x2f76 <alarm_play_file+0x46>
    2f6c:	c5 30       	cpi	r28, 0x05	; 5
    2f6e:	19 f0       	breq	.+6      	; 0x2f76 <alarm_play_file+0x46>
        if(i != 0)
    2f70:	cc 23       	and	r28, r28
    2f72:	49 f3       	breq	.-46     	; 0x2f46 <alarm_play_file+0x16>
    2f74:	e4 cf       	rjmp	.-56     	; 0x2f3e <alarm_play_file+0xe>
    stop_next_calls = 0;
    2f76:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <stop_next_calls>
}
    2f7a:	df 91       	pop	r29
    2f7c:	cf 91       	pop	r28
    2f7e:	1f 91       	pop	r17
    2f80:	08 95       	ret

00002f82 <send_sms_admins>:
{
    2f82:	1f 93       	push	r17
    2f84:	cf 93       	push	r28
    2f86:	df 93       	push	r29
    2f88:	d8 2f       	mov	r29, r24
    2f8a:	19 2f       	mov	r17, r25
    if(deposit < 1)
    2f8c:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <deposit>
    2f90:	90 91 80 02 	lds	r25, 0x0280	; 0x800280 <deposit+0x1>
    uint8_t i = 0;
    2f94:	c0 e0       	ldi	r28, 0x00	; 0
    if(deposit < 1)
    2f96:	18 16       	cp	r1, r24
    2f98:	19 06       	cpc	r1, r25
    2f9a:	74 f0       	brlt	.+28     	; 0x2fb8 <send_sms_admins+0x36>
}
    2f9c:	df 91       	pop	r29
    2f9e:	cf 91       	pop	r28
    2fa0:	1f 91       	pop	r17
    2fa2:	08 95       	ret
        send_sms_p(_msg, &get_phones(i)[0]);
    2fa4:	8c 2f       	mov	r24, r28
    2fa6:	0e 94 0d 11 	call	0x221a	; 0x221a <get_phones>
    2faa:	68 2f       	mov	r22, r24
    2fac:	79 2f       	mov	r23, r25
    2fae:	8d 2f       	mov	r24, r29
    2fb0:	91 2f       	mov	r25, r17
    2fb2:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <send_sms_p>
        i++;
    2fb6:	cf 5f       	subi	r28, 0xFF	; 255
    while(get_phones(i)[0]=='+' && i<TOTAL_ADMIN_NUMBER)
    2fb8:	8c 2f       	mov	r24, r28
    2fba:	0e 94 0d 11 	call	0x221a	; 0x221a <get_phones>
    2fbe:	fc 01       	movw	r30, r24
    2fc0:	20 81       	ld	r18, Z
    2fc2:	2b 32       	cpi	r18, 0x2B	; 43
    2fc4:	59 f7       	brne	.-42     	; 0x2f9c <send_sms_admins+0x1a>
    2fc6:	c5 30       	cpi	r28, 0x05	; 5
    2fc8:	49 f3       	breq	.-46     	; 0x2f9c <send_sms_admins+0x1a>
        if(i != 0)
    2fca:	cc 23       	and	r28, r28
    2fcc:	59 f3       	breq	.-42     	; 0x2fa4 <send_sms_admins+0x22>
            delay_ms(1000);
    2fce:	88 ee       	ldi	r24, 0xE8	; 232
    2fd0:	93 e0       	ldi	r25, 0x03	; 3
    2fd2:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
    2fd6:	e6 cf       	rjmp	.-52     	; 0x2fa4 <send_sms_admins+0x22>

00002fd8 <check_phone_string>:
{
    2fd8:	e8 2f       	mov	r30, r24
    2fda:	f9 2f       	mov	r31, r25
    if(*ptr++ != '+')
    2fdc:	80 81       	ld	r24, Z
    2fde:	8b 32       	cpi	r24, 0x2B	; 43
    2fe0:	a9 f4       	brne	.+42     	; 0x300c <check_phone_string+0x34>
    2fe2:	9f 01       	movw	r18, r30
    2fe4:	2f 5f       	subi	r18, 0xFF	; 255
    2fe6:	3f 4f       	sbci	r19, 0xFF	; 255
    for(i=0; i<12; i++)
    2fe8:	af 01       	movw	r20, r30
    2fea:	43 5f       	subi	r20, 0xF3	; 243
    2fec:	5f 4f       	sbci	r21, 0xFF	; 255
        if(!isdigit(*ptr++))
    2fee:	f9 01       	movw	r30, r18
    2ff0:	80 81       	ld	r24, Z
    2ff2:	2f 5f       	subi	r18, 0xFF	; 255
    2ff4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ff6:	08 2e       	mov	r0, r24
    2ff8:	00 0c       	add	r0, r0
    2ffa:	99 0b       	sbc	r25, r25
    2ffc:	c0 97       	sbiw	r24, 0x30	; 48
    2ffe:	0a 97       	sbiw	r24, 0x0a	; 10
    3000:	38 f4       	brcc	.+14     	; 0x3010 <check_phone_string+0x38>
    for(i=0; i<12; i++)
    3002:	24 17       	cp	r18, r20
    3004:	35 07       	cpc	r19, r21
    3006:	99 f7       	brne	.-26     	; 0x2fee <check_phone_string+0x16>
    return TRUE;
    3008:	81 e0       	ldi	r24, 0x01	; 1
    300a:	08 95       	ret
        return FALSE;
    300c:	80 e0       	ldi	r24, 0x00	; 0
    300e:	08 95       	ret
            return FALSE;
    3010:	80 e0       	ldi	r24, 0x00	; 0
}
    3012:	08 95       	ret

00003014 <send_unsent_sms>:
{
    3014:	bf 92       	push	r11
    3016:	cf 92       	push	r12
    3018:	df 92       	push	r13
    301a:	ef 92       	push	r14
    301c:	ff 92       	push	r15
    301e:	0f 93       	push	r16
    3020:	1f 93       	push	r17
    3022:	cf 93       	push	r28
    3024:	df 93       	push	r29
    if(unsent_sms == 0)
    3026:	c0 91 02 01 	lds	r28, 0x0102	; 0x800102 <unsent_sms>
    302a:	cc 23       	and	r28, r28
    302c:	e9 f0       	breq	.+58     	; 0x3068 <send_unsent_sms+0x54>
    if(deposit < 1)
    302e:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <deposit>
    3032:	90 91 80 02 	lds	r25, 0x0280	; 0x800280 <deposit+0x1>
        return 0;
    3036:	c0 e0       	ldi	r28, 0x00	; 0
    if(deposit < 1)
    3038:	18 16       	cp	r1, r24
    303a:	19 06       	cpc	r1, r25
    303c:	ac f4       	brge	.+42     	; 0x3068 <send_unsent_sms+0x54>
    delay_ms(100);
    303e:	84 e6       	ldi	r24, 0x64	; 100
    3040:	90 e0       	ldi	r25, 0x00	; 0
    3042:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
    uart_flush();
    3046:	0e 94 35 29 	call	0x526a	; 0x526a <uart_flush>
    uart_send_str_p(PSTR("AT+CMGL=\"STO UNSENT\"\r\n")); // запрашиваем список всех СМСок
    304a:	86 e6       	ldi	r24, 0x66	; 102
    304c:	94 e0       	ldi	r25, 0x04	; 4
    304e:	0e 94 1d 29 	call	0x523a	; 0x523a <uart_send_str_p>
    rez = mdm_wait_cmd_ms(5000, (const char*)RESPON_OK_CMGL);
    3052:	6f e8       	ldi	r22, 0x8F	; 143
    3054:	71 e0       	ldi	r23, 0x01	; 1
    3056:	88 e8       	ldi	r24, 0x88	; 136
    3058:	93 e1       	ldi	r25, 0x13	; 19
    305a:	0e 94 59 12 	call	0x24b2	; 0x24b2 <mdm_wait_cmd_ms>
    if(rez==1)
    305e:	81 30       	cpi	r24, 0x01	; 1
    3060:	71 f0       	breq	.+28     	; 0x307e <send_unsent_sms+0x6a>
    else unsent_sms = 0;
    3062:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <unsent_sms>
    return 0;
    3066:	c0 e0       	ldi	r28, 0x00	; 0
}
    3068:	8c 2f       	mov	r24, r28
    306a:	df 91       	pop	r29
    306c:	cf 91       	pop	r28
    306e:	1f 91       	pop	r17
    3070:	0f 91       	pop	r16
    3072:	ff 90       	pop	r15
    3074:	ef 90       	pop	r14
    3076:	df 90       	pop	r13
    3078:	cf 90       	pop	r12
    307a:	bf 90       	pop	r11
    307c:	08 95       	ret
        ptr = strchr(mdm_data, ':');
    307e:	6a e3       	ldi	r22, 0x3A	; 58
    3080:	70 e0       	ldi	r23, 0x00	; 0
    3082:	8d e9       	ldi	r24, 0x9D	; 157
    3084:	92 e0       	ldi	r25, 0x02	; 2
    3086:	0e 94 0b 2e 	call	0x5c16	; 0x5c16 <strchr>
    308a:	28 2f       	mov	r18, r24
    308c:	39 2f       	mov	r19, r25
        if(ptr)
    308e:	21 15       	cp	r18, r1
    3090:	31 05       	cpc	r19, r1
    3092:	09 f4       	brne	.+2      	; 0x3096 <send_unsent_sms+0x82>
    3094:	ab c0       	rjmp	.+342    	; 0x31ec <send_unsent_sms+0x1d8>
            for(i=0; i<5; i++)
    3096:	2f 5f       	subi	r18, 0xFF	; 255
    3098:	3f 4f       	sbci	r19, 0xFF	; 255
    309a:	40 e0       	ldi	r20, 0x00	; 0
                if(isdigit(*++ptr))
    309c:	e9 01       	movw	r28, r18
    309e:	2f 5f       	subi	r18, 0xFF	; 255
    30a0:	3f 4f       	sbci	r19, 0xFF	; 255
    30a2:	88 81       	ld	r24, Y
    30a4:	08 2e       	mov	r0, r24
    30a6:	00 0c       	add	r0, r0
    30a8:	99 0b       	sbc	r25, r25
    30aa:	c0 97       	sbiw	r24, 0x30	; 48
    30ac:	0a 97       	sbiw	r24, 0x0a	; 10
    30ae:	38 f0       	brcs	.+14     	; 0x30be <send_unsent_sms+0xaa>
            for(i=0; i<5; i++)
    30b0:	4f 5f       	subi	r20, 0xFF	; 255
    30b2:	45 30       	cpi	r20, 0x05	; 5
    30b4:	99 f7       	brne	.-26     	; 0x309c <send_unsent_sms+0x88>
                unsent_sms = 0;
    30b6:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <unsent_sms>
                return 0;
    30ba:	c0 e0       	ldi	r28, 0x00	; 0
    30bc:	d5 cf       	rjmp	.-86     	; 0x3068 <send_unsent_sms+0x54>
            if(i==5)
    30be:	45 30       	cpi	r20, 0x05	; 5
    30c0:	d1 f3       	breq	.-12     	; 0x30b6 <send_unsent_sms+0xa2>
            index = strtoul(ptr, 0, 10);
    30c2:	4a e0       	ldi	r20, 0x0A	; 10
    30c4:	50 e0       	ldi	r21, 0x00	; 0
    30c6:	70 e0       	ldi	r23, 0x00	; 0
    30c8:	60 e0       	ldi	r22, 0x00	; 0
    30ca:	ce 01       	movw	r24, r28
    30cc:	0e 94 4a 2c 	call	0x5894	; 0x5894 <strtoul>
    30d0:	c6 2e       	mov	r12, r22
    30d2:	d7 2e       	mov	r13, r23
    30d4:	e8 2e       	mov	r14, r24
    30d6:	f9 2e       	mov	r15, r25
            if(index < 1)
    30d8:	c1 14       	cp	r12, r1
    30da:	d1 04       	cpc	r13, r1
    30dc:	e1 04       	cpc	r14, r1
    30de:	f1 04       	cpc	r15, r1
    30e0:	09 f4       	brne	.+2      	; 0x30e4 <send_unsent_sms+0xd0>
    30e2:	80 c0       	rjmp	.+256    	; 0x31e4 <send_unsent_sms+0x1d0>
        ptr = strchr(ptr, ','); // ищем первую запятую в строке
    30e4:	6c e2       	ldi	r22, 0x2C	; 44
    30e6:	70 e0       	ldi	r23, 0x00	; 0
    30e8:	ce 01       	movw	r24, r28
    30ea:	0e 94 0b 2e 	call	0x5c16	; 0x5c16 <strchr>
    30ee:	28 2f       	mov	r18, r24
    30f0:	39 2f       	mov	r19, r25
        if(ptr)
    30f2:	21 15       	cp	r18, r1
    30f4:	31 05       	cpc	r19, r1
    30f6:	c1 f0       	breq	.+48     	; 0x3128 <send_unsent_sms+0x114>
            ptr = strchr(ptr, ','); // ищем вторую запятую в строке
    30f8:	6c e2       	ldi	r22, 0x2C	; 44
    30fa:	70 e0       	ldi	r23, 0x00	; 0
    30fc:	c9 01       	movw	r24, r18
    30fe:	0e 94 0b 2e 	call	0x5c16	; 0x5c16 <strchr>
    3102:	28 2f       	mov	r18, r24
    3104:	39 2f       	mov	r19, r25
            if(ptr)
    3106:	21 15       	cp	r18, r1
    3108:	31 05       	cpc	r19, r1
    310a:	71 f0       	breq	.+28     	; 0x3128 <send_unsent_sms+0x114>
                ptr = strchr(ptr, '+');
    310c:	6b e2       	ldi	r22, 0x2B	; 43
    310e:	70 e0       	ldi	r23, 0x00	; 0
    3110:	c9 01       	movw	r24, r18
    3112:	0e 94 0b 2e 	call	0x5c16	; 0x5c16 <strchr>
    3116:	c8 2f       	mov	r28, r24
    3118:	d9 2f       	mov	r29, r25
                if(ptr)
    311a:	20 97       	sbiw	r28, 0x00	; 0
    311c:	29 f0       	breq	.+10     	; 0x3128 <send_unsent_sms+0x114>
                    if(check_phone_string(ptr))
    311e:	ce 01       	movw	r24, r28
    3120:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <check_phone_string>
    3124:	81 11       	cpse	r24, r1
    3126:	66 c0       	rjmp	.+204    	; 0x31f4 <send_unsent_sms+0x1e0>
        delay_ms(3000);
    3128:	88 eb       	ldi	r24, 0xB8	; 184
    312a:	9b e0       	ldi	r25, 0x0B	; 11
    312c:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
        sprintf_P(mdm_data, PSTR("AT+CMSS=%d,\"%s\"\r\n"), (uint16_t)index, rec_phone_number);
    3130:	dc 2d       	mov	r29, r12
    3132:	bd 2c       	mov	r11, r13
    3134:	8f e8       	ldi	r24, 0x8F	; 143
    3136:	92 e0       	ldi	r25, 0x02	; 2
    3138:	9f 93       	push	r25
    313a:	8f 93       	push	r24
    313c:	df 92       	push	r13
    313e:	cf 92       	push	r12
    3140:	84 e5       	ldi	r24, 0x54	; 84
    3142:	94 e0       	ldi	r25, 0x04	; 4
    3144:	9f 93       	push	r25
    3146:	8f 93       	push	r24
    3148:	8d e9       	ldi	r24, 0x9D	; 157
    314a:	92 e0       	ldi	r25, 0x02	; 2
    314c:	9f 93       	push	r25
    314e:	8f 93       	push	r24
    3150:	0e 94 a7 2e 	call	0x5d4e	; 0x5d4e <sprintf_P>
        uart_flush();
    3154:	0e 94 35 29 	call	0x526a	; 0x526a <uart_flush>
        uart_send_str(mdm_data);
    3158:	8d e9       	ldi	r24, 0x9D	; 157
    315a:	92 e0       	ldi	r25, 0x02	; 2
    315c:	0e 94 ff 28 	call	0x51fe	; 0x51fe <uart_send_str>
        rez = mdm_wait_cmd_ms(60000, (const char*)RESPON_CMSS);
    3160:	66 e9       	ldi	r22, 0x96	; 150
    3162:	71 e0       	ldi	r23, 0x01	; 1
    3164:	80 e6       	ldi	r24, 0x60	; 96
    3166:	9a ee       	ldi	r25, 0xEA	; 234
    3168:	0e 94 59 12 	call	0x24b2	; 0x24b2 <mdm_wait_cmd_ms>
        if(rez==1)
    316c:	2d b7       	in	r18, 0x3d	; 61
    316e:	3e b7       	in	r19, 0x3e	; 62
    3170:	28 5f       	subi	r18, 0xF8	; 248
    3172:	3f 4f       	sbci	r19, 0xFF	; 255
    3174:	0f b6       	in	r0, 0x3f	; 63
    3176:	f8 94       	cli
    3178:	3e bf       	out	0x3e, r19	; 62
    317a:	0f be       	out	0x3f, r0	; 63
    317c:	2d bf       	out	0x3d, r18	; 61
        else return 0;
    317e:	c0 e0       	ldi	r28, 0x00	; 0
        if(rez==1)
    3180:	81 30       	cpi	r24, 0x01	; 1
    3182:	09 f0       	breq	.+2      	; 0x3186 <send_unsent_sms+0x172>
    3184:	71 cf       	rjmp	.-286    	; 0x3068 <send_unsent_sms+0x54>
    3186:	c3 e0       	ldi	r28, 0x03	; 3
                sprintf_P(mdm_data, PSTR("AT+CMGD=%d\r\n"), (uint16_t)index); // удаляем обработанную СМСку
    3188:	0f 2e       	mov	r0, r31
    318a:	f7 e4       	ldi	r31, 0x47	; 71
    318c:	ef 2e       	mov	r14, r31
    318e:	f4 e0       	ldi	r31, 0x04	; 4
    3190:	ff 2e       	mov	r15, r31
    3192:	f0 2d       	mov	r31, r0
    3194:	0d e9       	ldi	r16, 0x9D	; 157
    3196:	12 e0       	ldi	r17, 0x02	; 2
                delay_ms(100);
    3198:	84 e6       	ldi	r24, 0x64	; 100
    319a:	90 e0       	ldi	r25, 0x00	; 0
    319c:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
                sprintf_P(mdm_data, PSTR("AT+CMGD=%d\r\n"), (uint16_t)index); // удаляем обработанную СМСку
    31a0:	bf 92       	push	r11
    31a2:	df 93       	push	r29
    31a4:	ff 92       	push	r15
    31a6:	ef 92       	push	r14
    31a8:	1f 93       	push	r17
    31aa:	0f 93       	push	r16
    31ac:	0e 94 a7 2e 	call	0x5d4e	; 0x5d4e <sprintf_P>
                softuart_puts_p(PSTR("del_sms_ind"));
    31b0:	8b e3       	ldi	r24, 0x3B	; 59
    31b2:	94 e0       	ldi	r25, 0x04	; 4
    31b4:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <softuart_puts_p>
                uart_flush();
    31b8:	0e 94 35 29 	call	0x526a	; 0x526a <uart_flush>
                uart_send_str(mdm_data);
    31bc:	c8 01       	movw	r24, r16
    31be:	0e 94 ff 28 	call	0x51fe	; 0x51fe <uart_send_str>
                rez = mdm_wait_cmd_ms(6000, (const char*)RESPON_OK);
    31c2:	62 e5       	ldi	r22, 0x52	; 82
    31c4:	71 e0       	ldi	r23, 0x01	; 1
    31c6:	80 e7       	ldi	r24, 0x70	; 112
    31c8:	97 e1       	ldi	r25, 0x17	; 23
    31ca:	0e 94 59 12 	call	0x24b2	; 0x24b2 <mdm_wait_cmd_ms>
                if(rez == TRUE)
    31ce:	0f 90       	pop	r0
    31d0:	0f 90       	pop	r0
    31d2:	0f 90       	pop	r0
    31d4:	0f 90       	pop	r0
    31d6:	0f 90       	pop	r0
    31d8:	0f 90       	pop	r0
    31da:	81 30       	cpi	r24, 0x01	; 1
    31dc:	b1 f0       	breq	.+44     	; 0x320a <send_unsent_sms+0x1f6>
            for(i=0; i<3; i++)
    31de:	c1 50       	subi	r28, 0x01	; 1
    31e0:	d9 f6       	brne	.-74     	; 0x3198 <send_unsent_sms+0x184>
    31e2:	42 cf       	rjmp	.-380    	; 0x3068 <send_unsent_sms+0x54>
                unsent_sms = 0;
    31e4:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <unsent_sms>
                return 0;
    31e8:	c0 e0       	ldi	r28, 0x00	; 0
    31ea:	3e cf       	rjmp	.-388    	; 0x3068 <send_unsent_sms+0x54>
            unsent_sms = 0;
    31ec:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <unsent_sms>
            return 0;
    31f0:	c0 e0       	ldi	r28, 0x00	; 0
    31f2:	3a cf       	rjmp	.-396    	; 0x3068 <send_unsent_sms+0x54>
                        memcpy(rec_phone_number, ptr, 13);
    31f4:	8d e0       	ldi	r24, 0x0D	; 13
    31f6:	fe 01       	movw	r30, r28
    31f8:	af e8       	ldi	r26, 0x8F	; 143
    31fa:	b2 e0       	ldi	r27, 0x02	; 2
    31fc:	01 90       	ld	r0, Z+
    31fe:	0d 92       	st	X+, r0
    3200:	8a 95       	dec	r24
    3202:	e1 f7       	brne	.-8      	; 0x31fc <send_unsent_sms+0x1e8>
                        rec_phone_number[13] = 0;
    3204:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <rec_phone_number+0xd>
    3208:	8f cf       	rjmp	.-226    	; 0x3128 <send_unsent_sms+0x114>
                    return 1;
    320a:	c8 2f       	mov	r28, r24
    320c:	2d cf       	rjmp	.-422    	; 0x3068 <send_unsent_sms+0x54>

0000320e <delete_all_sms>:
    delay_ms(100);
    320e:	84 e6       	ldi	r24, 0x64	; 100
    3210:	90 e0       	ldi	r25, 0x00	; 0
    3212:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
    uart_flush();
    3216:	0e 94 35 29 	call	0x526a	; 0x526a <uart_flush>
    uart_send_str_p(PSTR("AT+CMGDA=\"DEL ALL\"\r\n"));
    321a:	82 e0       	ldi	r24, 0x02	; 2
    321c:	94 e0       	ldi	r25, 0x04	; 4
    321e:	0e 94 1d 29 	call	0x523a	; 0x523a <uart_send_str_p>
    rez = mdm_wait_cmd_ms(25000, (const char*)RESPON_OK);
    3222:	62 e5       	ldi	r22, 0x52	; 82
    3224:	71 e0       	ldi	r23, 0x01	; 1
    3226:	88 ea       	ldi	r24, 0xA8	; 168
    3228:	91 e6       	ldi	r25, 0x61	; 97
    322a:	0e 94 59 12 	call	0x24b2	; 0x24b2 <mdm_wait_cmd_ms>
}
    322e:	08 95       	ret

00003230 <get_sms>:
{
    3230:	8f 92       	push	r8
    3232:	9f 92       	push	r9
    3234:	af 92       	push	r10
    3236:	bf 92       	push	r11
    3238:	cf 92       	push	r12
    323a:	df 92       	push	r13
    323c:	ef 92       	push	r14
    323e:	ff 92       	push	r15
    3240:	0f 93       	push	r16
    3242:	1f 93       	push	r17
    3244:	cf 93       	push	r28
    3246:	df 93       	push	r29
    3248:	00 d0       	rcall	.+0      	; 0x324a <get_sms+0x1a>
    324a:	00 d0       	rcall	.+0      	; 0x324c <get_sms+0x1c>
    324c:	0f 92       	push	r0
    324e:	cd b7       	in	r28, 0x3d	; 61
    3250:	de b7       	in	r29, 0x3e	; 62
    if(unread_sms == 0)
    3252:	f0 90 8d 02 	lds	r15, 0x028D	; 0x80028d <unread_sms>
    3256:	f1 10       	cpse	r15, r1
    3258:	13 c0       	rjmp	.+38     	; 0x3280 <get_sms+0x50>
}
    325a:	8f 2d       	mov	r24, r15
    325c:	0f 90       	pop	r0
    325e:	0f 90       	pop	r0
    3260:	0f 90       	pop	r0
    3262:	0f 90       	pop	r0
    3264:	0f 90       	pop	r0
    3266:	df 91       	pop	r29
    3268:	cf 91       	pop	r28
    326a:	1f 91       	pop	r17
    326c:	0f 91       	pop	r16
    326e:	ff 90       	pop	r15
    3270:	ef 90       	pop	r14
    3272:	df 90       	pop	r13
    3274:	cf 90       	pop	r12
    3276:	bf 90       	pop	r11
    3278:	af 90       	pop	r10
    327a:	9f 90       	pop	r9
    327c:	8f 90       	pop	r8
    327e:	08 95       	ret
    delay_ms(100);
    3280:	84 e6       	ldi	r24, 0x64	; 100
    3282:	90 e0       	ldi	r25, 0x00	; 0
    3284:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
    uart_send_str_p(PSTR("AT+CMGL=\"REC UNREAD\"\r\n")); // запрашиваем список всех СМСок
    3288:	84 e2       	ldi	r24, 0x24	; 36
    328a:	94 e0       	ldi	r25, 0x04	; 4
    328c:	0e 94 1d 29 	call	0x523a	; 0x523a <uart_send_str_p>
        rez = mdm_wait_cmd_ms(5000, (const char*)RESPON_OK_CMGL);
    3290:	6f e8       	ldi	r22, 0x8F	; 143
    3292:	71 e0       	ldi	r23, 0x01	; 1
    3294:	88 e8       	ldi	r24, 0x88	; 136
    3296:	93 e1       	ldi	r25, 0x13	; 19
    3298:	0e 94 59 12 	call	0x24b2	; 0x24b2 <mdm_wait_cmd_ms>
    329c:	f8 2e       	mov	r15, r24
        if(rez==1)
    329e:	81 e0       	ldi	r24, 0x01	; 1
    32a0:	f8 12       	cpse	r15, r24
    32a2:	cf c0       	rjmp	.+414    	; 0x3442 <get_sms+0x212>
            ptr = strchr(mdm_data, ':');
    32a4:	6a e3       	ldi	r22, 0x3A	; 58
    32a6:	70 e0       	ldi	r23, 0x00	; 0
    32a8:	8d e9       	ldi	r24, 0x9D	; 157
    32aa:	92 e0       	ldi	r25, 0x02	; 2
    32ac:	0e 94 0b 2e 	call	0x5c16	; 0x5c16 <strchr>
    32b0:	48 2f       	mov	r20, r24
    32b2:	59 2f       	mov	r21, r25
            if(ptr)
    32b4:	41 15       	cp	r20, r1
    32b6:	51 05       	cpc	r21, r1
    32b8:	59 f3       	breq	.-42     	; 0x3290 <get_sms+0x60>
                for(i=0; i<5; i++)
    32ba:	4f 5f       	subi	r20, 0xFF	; 255
    32bc:	5f 4f       	sbci	r21, 0xFF	; 255
    32be:	90 e0       	ldi	r25, 0x00	; 0
                    if(isdigit(*++ptr))
    32c0:	8a 01       	movw	r16, r20
    32c2:	4f 5f       	subi	r20, 0xFF	; 255
    32c4:	5f 4f       	sbci	r21, 0xFF	; 255
    32c6:	d8 01       	movw	r26, r16
    32c8:	2c 91       	ld	r18, X
    32ca:	02 2e       	mov	r0, r18
    32cc:	00 0c       	add	r0, r0
    32ce:	33 0b       	sbc	r19, r19
    32d0:	20 53       	subi	r18, 0x30	; 48
    32d2:	31 09       	sbc	r19, r1
    32d4:	2a 30       	cpi	r18, 0x0A	; 10
    32d6:	31 05       	cpc	r19, r1
    32d8:	20 f0       	brcs	.+8      	; 0x32e2 <get_sms+0xb2>
                for(i=0; i<5; i++)
    32da:	9f 5f       	subi	r25, 0xFF	; 255
    32dc:	95 30       	cpi	r25, 0x05	; 5
    32de:	81 f7       	brne	.-32     	; 0x32c0 <get_sms+0x90>
    32e0:	d7 cf       	rjmp	.-82     	; 0x3290 <get_sms+0x60>
                if(i==5)
    32e2:	95 30       	cpi	r25, 0x05	; 5
    32e4:	a9 f2       	breq	.-86     	; 0x3290 <get_sms+0x60>
                index = strtoul(ptr, 0, 10);
    32e6:	4a e0       	ldi	r20, 0x0A	; 10
    32e8:	50 e0       	ldi	r21, 0x00	; 0
    32ea:	70 e0       	ldi	r23, 0x00	; 0
    32ec:	60 e0       	ldi	r22, 0x00	; 0
    32ee:	c8 01       	movw	r24, r16
    32f0:	0e 94 4a 2c 	call	0x5894	; 0x5894 <strtoul>
    32f4:	86 2e       	mov	r8, r22
    32f6:	97 2e       	mov	r9, r23
    32f8:	a8 2e       	mov	r10, r24
    32fa:	b9 2e       	mov	r11, r25
                if(index>0xFFFF)
    32fc:	81 14       	cp	r8, r1
    32fe:	91 04       	cpc	r9, r1
    3300:	b1 e0       	ldi	r27, 0x01	; 1
    3302:	ab 06       	cpc	r10, r27
    3304:	b1 04       	cpc	r11, r1
    3306:	20 f6       	brcc	.-120    	; 0x3290 <get_sms+0x60>
            ptr = strchr(ptr, ','); // ищем первую запятую в строке
    3308:	6c e2       	ldi	r22, 0x2C	; 44
    330a:	70 e0       	ldi	r23, 0x00	; 0
    330c:	c8 01       	movw	r24, r16
    330e:	0e 94 0b 2e 	call	0x5c16	; 0x5c16 <strchr>
    3312:	28 2f       	mov	r18, r24
    3314:	39 2f       	mov	r19, r25
            if(ptr)
    3316:	21 15       	cp	r18, r1
    3318:	31 05       	cpc	r19, r1
    331a:	09 f4       	brne	.+2      	; 0x331e <get_sms+0xee>
    331c:	b9 cf       	rjmp	.-142    	; 0x3290 <get_sms+0x60>
                ptr = strchr(ptr, ','); // ищем вторую запятую в строке
    331e:	6c e2       	ldi	r22, 0x2C	; 44
    3320:	70 e0       	ldi	r23, 0x00	; 0
    3322:	c9 01       	movw	r24, r18
    3324:	0e 94 0b 2e 	call	0x5c16	; 0x5c16 <strchr>
    3328:	28 2f       	mov	r18, r24
    332a:	39 2f       	mov	r19, r25
                if(ptr)
    332c:	21 15       	cp	r18, r1
    332e:	31 05       	cpc	r19, r1
    3330:	09 f4       	brne	.+2      	; 0x3334 <get_sms+0x104>
    3332:	ae cf       	rjmp	.-164    	; 0x3290 <get_sms+0x60>
                    ptr = strchr(ptr, '+');
    3334:	6b e2       	ldi	r22, 0x2B	; 43
    3336:	70 e0       	ldi	r23, 0x00	; 0
    3338:	c9 01       	movw	r24, r18
    333a:	0e 94 0b 2e 	call	0x5c16	; 0x5c16 <strchr>
    333e:	08 2f       	mov	r16, r24
    3340:	19 2f       	mov	r17, r25
                    if(ptr)
    3342:	01 15       	cp	r16, r1
    3344:	11 05       	cpc	r17, r1
    3346:	81 f0       	breq	.+32     	; 0x3368 <get_sms+0x138>
                        if(check_phone_string(ptr))
    3348:	c8 01       	movw	r24, r16
    334a:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <check_phone_string>
    334e:	88 23       	and	r24, r24
    3350:	09 f4       	brne	.+2      	; 0x3354 <get_sms+0x124>
    3352:	9e cf       	rjmp	.-196    	; 0x3290 <get_sms+0x60>
                            memcpy(rec_phone_number, ptr, 13);
    3354:	8d e0       	ldi	r24, 0x0D	; 13
    3356:	f8 01       	movw	r30, r16
    3358:	af e8       	ldi	r26, 0x8F	; 143
    335a:	b2 e0       	ldi	r27, 0x02	; 2
    335c:	01 90       	ld	r0, Z+
    335e:	0d 92       	st	X+, r0
    3360:	8a 95       	dec	r24
    3362:	e1 f7       	brne	.-8      	; 0x335c <get_sms+0x12c>
                            rec_phone_number[13] = 0;
    3364:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <rec_phone_number+0xd>
            rez = mdm_wait_str(5000);
    3368:	88 e8       	ldi	r24, 0x88	; 136
    336a:	93 e1       	ldi	r25, 0x13	; 19
    336c:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <mdm_wait_str>
    3370:	18 2f       	mov	r17, r24
            if(rez==1)
    3372:	81 30       	cpi	r24, 0x01	; 1
    3374:	29 f0       	breq	.+10     	; 0x3380 <get_sms+0x150>
                delete_all_sms();
    3376:	0e 94 07 19 	call	0x320e	; 0x320e <delete_all_sms>
                unread_sms = 0;
    337a:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <unread_sms>
                return 1;
    337e:	6d cf       	rjmp	.-294    	; 0x325a <get_sms+0x2a>
    uint32_t time_stamp = get_time_ms() + time_to_wait_ms;
    3380:	0e 94 65 27 	call	0x4eca	; 0x4eca <get_time_ms>
    3384:	6b 01       	movw	r12, r22
    3386:	7c 01       	movw	r14, r24
    3388:	e8 ee       	ldi	r30, 0xE8	; 232
    338a:	ce 0e       	add	r12, r30
    338c:	e3 e0       	ldi	r30, 0x03	; 3
    338e:	de 1e       	adc	r13, r30
    3390:	e1 1c       	adc	r14, r1
    3392:	f1 1c       	adc	r15, r1
        if(get_time_ms() < time_stamp) // интервал после последнего принятого байта
    3394:	0e 94 65 27 	call	0x4eca	; 0x4eca <get_time_ms>
    3398:	6a 83       	std	Y+2, r22	; 0x02
    339a:	7b 83       	std	Y+3, r23	; 0x03
    339c:	8c 83       	std	Y+4, r24	; 0x04
    339e:	9d 83       	std	Y+5, r25	; 0x05
    33a0:	6c 15       	cp	r22, r12
    33a2:	7d 05       	cpc	r23, r13
    33a4:	8e 05       	cpc	r24, r14
    33a6:	9f 05       	cpc	r25, r15
    33a8:	a0 f0       	brcs	.+40     	; 0x33d2 <get_sms+0x1a2>
        if(is_queue_not_empty())
    33aa:	0e 94 da 28 	call	0x51b4	; 0x51b4 <is_queue_not_empty>
    33ae:	88 23       	and	r24, r24
    33b0:	89 f3       	breq	.-30     	; 0x3394 <get_sms+0x164>
            dummy = get_byte_from_queue();
    33b2:	0e 94 cd 28 	call	0x519a	; 0x519a <get_byte_from_queue>
    33b6:	89 83       	std	Y+1, r24	; 0x01
            dummy = dummy;
    33b8:	89 81       	ldd	r24, Y+1	; 0x01
    33ba:	89 83       	std	Y+1, r24	; 0x01
            time_stamp = get_time_ms() + time_to_wait_ms;
    33bc:	0e 94 65 27 	call	0x4eca	; 0x4eca <get_time_ms>
    33c0:	6b 01       	movw	r12, r22
    33c2:	7c 01       	movw	r14, r24
    33c4:	f8 ee       	ldi	r31, 0xE8	; 232
    33c6:	cf 0e       	add	r12, r31
    33c8:	f3 e0       	ldi	r31, 0x03	; 3
    33ca:	df 1e       	adc	r13, r31
    33cc:	e1 1c       	adc	r14, r1
    33ce:	f1 1c       	adc	r15, r1
    33d0:	e1 cf       	rjmp	.-62     	; 0x3394 <get_sms+0x164>
                process_sms_body(mdm_data);
    33d2:	8d e9       	ldi	r24, 0x9D	; 157
    33d4:	92 e0       	ldi	r25, 0x02	; 2
    33d6:	0e 94 b3 20 	call	0x4166	; 0x4166 <process_sms_body>
    33da:	03 e0       	ldi	r16, 0x03	; 3
                    sprintf_P(mdm_data, PSTR("AT+CMGD=%d\r\n"), (uint16_t)index); // удаляем обработанную СМСку
    33dc:	0f 2e       	mov	r0, r31
    33de:	f7 e1       	ldi	r31, 0x17	; 23
    33e0:	cf 2e       	mov	r12, r31
    33e2:	f4 e0       	ldi	r31, 0x04	; 4
    33e4:	df 2e       	mov	r13, r31
    33e6:	f0 2d       	mov	r31, r0
    33e8:	0f 2e       	mov	r0, r31
    33ea:	fd e9       	ldi	r31, 0x9D	; 157
    33ec:	ef 2e       	mov	r14, r31
    33ee:	f2 e0       	ldi	r31, 0x02	; 2
    33f0:	ff 2e       	mov	r15, r31
    33f2:	f0 2d       	mov	r31, r0
                    delay_ms(100);
    33f4:	84 e6       	ldi	r24, 0x64	; 100
    33f6:	90 e0       	ldi	r25, 0x00	; 0
    33f8:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
                    sprintf_P(mdm_data, PSTR("AT+CMGD=%d\r\n"), (uint16_t)index); // удаляем обработанную СМСку
    33fc:	9f 92       	push	r9
    33fe:	8f 92       	push	r8
    3400:	df 92       	push	r13
    3402:	cf 92       	push	r12
    3404:	ff 92       	push	r15
    3406:	ef 92       	push	r14
    3408:	0e 94 a7 2e 	call	0x5d4e	; 0x5d4e <sprintf_P>
                    uart_flush();
    340c:	0e 94 35 29 	call	0x526a	; 0x526a <uart_flush>
                    uart_send_str(mdm_data);
    3410:	c7 01       	movw	r24, r14
    3412:	0e 94 ff 28 	call	0x51fe	; 0x51fe <uart_send_str>
                    rez = mdm_wait_cmd_ms(10000, (const char*)RESPON_OK);
    3416:	62 e5       	ldi	r22, 0x52	; 82
    3418:	71 e0       	ldi	r23, 0x01	; 1
    341a:	80 e1       	ldi	r24, 0x10	; 16
    341c:	97 e2       	ldi	r25, 0x27	; 39
    341e:	0e 94 59 12 	call	0x24b2	; 0x24b2 <mdm_wait_cmd_ms>
                    if(rez == TRUE)
    3422:	0f 90       	pop	r0
    3424:	0f 90       	pop	r0
    3426:	0f 90       	pop	r0
    3428:	0f 90       	pop	r0
    342a:	0f 90       	pop	r0
    342c:	0f 90       	pop	r0
    342e:	81 30       	cpi	r24, 0x01	; 1
    3430:	11 f0       	breq	.+4      	; 0x3436 <get_sms+0x206>
                for(i=0; i<3; i++)
    3432:	01 50       	subi	r16, 0x01	; 1
    3434:	f9 f6       	brne	.-66     	; 0x33f4 <get_sms+0x1c4>
                delay_ms(100);
    3436:	84 e6       	ldi	r24, 0x64	; 100
    3438:	90 e0       	ldi	r25, 0x00	; 0
    343a:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
                return 1;
    343e:	f1 2e       	mov	r15, r17
    3440:	0c cf       	rjmp	.-488    	; 0x325a <get_sms+0x2a>
            delete_all_sms(); // попытка обойти глюк модема
    3442:	0e 94 07 19 	call	0x320e	; 0x320e <delete_all_sms>
            unread_sms = 0;
    3446:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <unread_sms>
            return 0;
    344a:	f1 2c       	mov	r15, r1
    344c:	06 cf       	rjmp	.-500    	; 0x325a <get_sms+0x2a>

0000344e <incoming_call_processing>:
{
    344e:	cf 93       	push	r28
    3450:	df 93       	push	r29
    3452:	00 d0       	rcall	.+0      	; 0x3454 <incoming_call_processing+0x6>
    3454:	00 d0       	rcall	.+0      	; 0x3456 <incoming_call_processing+0x8>
    3456:	cd b7       	in	r28, 0x3d	; 61
    3458:	de b7       	in	r29, 0x3e	; 62
    if(incoming_call == 0)
    345a:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <incoming_call>
    345e:	88 23       	and	r24, r24
    3460:	09 f4       	brne	.+2      	; 0x3464 <incoming_call_processing+0x16>
    3462:	5f c0       	rjmp	.+190    	; 0x3522 <incoming_call_processing+0xd4>
    incoming_call = 0;
    3464:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <incoming_call>
    if(call_from_user)
    3468:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <call_from_user>
    346c:	88 23       	and	r24, r24
    346e:	09 f4       	brne	.+2      	; 0x3472 <incoming_call_processing+0x24>
    3470:	56 c0       	rjmp	.+172    	; 0x351e <incoming_call_processing+0xd0>
        uart_flush();
    3472:	0e 94 35 29 	call	0x526a	; 0x526a <uart_flush>
        uart_send_str_p(PSTR("ATA\r\n"));
    3476:	8c ef       	ldi	r24, 0xFC	; 252
    3478:	93 e0       	ldi	r25, 0x03	; 3
    347a:	0e 94 1d 29 	call	0x523a	; 0x523a <uart_send_str_p>
        delay_ms(2000);
    347e:	80 ed       	ldi	r24, 0xD0	; 208
    3480:	97 e0       	ldi	r25, 0x07	; 7
    3482:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
        if(get_guard() == 1)
    3486:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <get_guard>
    348a:	81 30       	cpi	r24, 0x01	; 1
    348c:	09 f4       	brne	.+2      	; 0x3490 <incoming_call_processing+0x42>
    348e:	41 c0       	rjmp	.+130    	; 0x3512 <incoming_call_processing+0xc4>
            play_amr(AUDIO_GUARD_OFF, '0');
    3490:	60 e3       	ldi	r22, 0x30	; 48
    3492:	85 e5       	ldi	r24, 0x55	; 85
    3494:	91 e0       	ldi	r25, 0x01	; 1
    3496:	0e 94 a8 12 	call	0x2550	; 0x2550 <play_amr>
        delay_ms(2000);
    349a:	80 ed       	ldi	r24, 0xD0	; 208
    349c:	97 e0       	ldi	r25, 0x07	; 7
    349e:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
        play_amr(AUDIO_MENU, '0');
    34a2:	60 e3       	ldi	r22, 0x30	; 48
    34a4:	8d e9       	ldi	r24, 0x9D	; 157
    34a6:	91 e0       	ldi	r25, 0x01	; 1
    34a8:	0e 94 a8 12 	call	0x2550	; 0x2550 <play_amr>
        call_from_user = 0;
    34ac:	10 92 8c 02 	sts	0x028C, r1	; 0x80028c <call_from_user>
        duration_call_s = get_time_s() + 40;
    34b0:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <get_time_s>
    34b4:	dc 01       	movw	r26, r24
    34b6:	cb 01       	movw	r24, r22
    34b8:	88 96       	adiw	r24, 0x28	; 40
    34ba:	a1 1d       	adc	r26, r1
    34bc:	b1 1d       	adc	r27, r1
    34be:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <duration_call_s.13>
    34c2:	90 93 6c 02 	sts	0x026C, r25	; 0x80026c <duration_call_s.13+0x1>
    34c6:	a0 93 6d 02 	sts	0x026D, r26	; 0x80026d <duration_call_s.13+0x2>
    34ca:	b0 93 6e 02 	sts	0x026E, r27	; 0x80026e <duration_call_s.13+0x3>
        while(call_status() == GSM_CALL_ACTIVE)
    34ce:	0e 94 27 14 	call	0x284e	; 0x284e <call_status>
    34d2:	82 30       	cpi	r24, 0x02	; 2
    34d4:	31 f5       	brne	.+76     	; 0x3522 <incoming_call_processing+0xd4>
            delay_ms(3000);
    34d6:	88 eb       	ldi	r24, 0xB8	; 184
    34d8:	9b e0       	ldi	r25, 0x0B	; 11
    34da:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
            if(get_time_s() > duration_call_s)
    34de:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <get_time_s>
    34e2:	69 83       	std	Y+1, r22	; 0x01
    34e4:	7a 83       	std	Y+2, r23	; 0x02
    34e6:	8b 83       	std	Y+3, r24	; 0x03
    34e8:	9c 83       	std	Y+4, r25	; 0x04
    34ea:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <duration_call_s.13>
    34ee:	90 91 6c 02 	lds	r25, 0x026C	; 0x80026c <duration_call_s.13+0x1>
    34f2:	a0 91 6d 02 	lds	r26, 0x026D	; 0x80026d <duration_call_s.13+0x2>
    34f6:	b0 91 6e 02 	lds	r27, 0x026E	; 0x80026e <duration_call_s.13+0x3>
    34fa:	29 81       	ldd	r18, Y+1	; 0x01
    34fc:	3a 81       	ldd	r19, Y+2	; 0x02
    34fe:	4b 81       	ldd	r20, Y+3	; 0x03
    3500:	5c 81       	ldd	r21, Y+4	; 0x04
    3502:	82 17       	cp	r24, r18
    3504:	93 07       	cpc	r25, r19
    3506:	a4 07       	cpc	r26, r20
    3508:	b5 07       	cpc	r27, r21
    350a:	08 f7       	brcc	.-62     	; 0x34ce <incoming_call_processing+0x80>
                hang_up_call();
    350c:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <hang_up_call>
                break;
    3510:	08 c0       	rjmp	.+16     	; 0x3522 <incoming_call_processing+0xd4>
            play_amr(AUDIO_GUARD_ON, '0');
    3512:	60 e3       	ldi	r22, 0x30	; 48
    3514:	87 e5       	ldi	r24, 0x57	; 87
    3516:	91 e0       	ldi	r25, 0x01	; 1
    3518:	0e 94 a8 12 	call	0x2550	; 0x2550 <play_amr>
    351c:	be cf       	rjmp	.-132    	; 0x349a <incoming_call_processing+0x4c>
        hang_up_call();
    351e:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <hang_up_call>
}
    3522:	0f 90       	pop	r0
    3524:	0f 90       	pop	r0
    3526:	0f 90       	pop	r0
    3528:	0f 90       	pop	r0
    352a:	df 91       	pop	r29
    352c:	cf 91       	pop	r28
    352e:	08 95       	ret

00003530 <setup_init>:
{
    3530:	cf 92       	push	r12
    3532:	df 92       	push	r13
    3534:	ef 92       	push	r14
    3536:	ff 92       	push	r15
    3538:	cf 93       	push	r28
    353a:	df 93       	push	r29
    353c:	00 d0       	rcall	.+0      	; 0x353e <setup_init+0xe>
    353e:	00 d0       	rcall	.+0      	; 0x3540 <setup_init+0x10>
    3540:	cd b7       	in	r28, 0x3d	; 61
    3542:	de b7       	in	r29, 0x3e	; 62
    uint32_t time_stamp = get_time_s() + 600; // 600 sec init modem
    3544:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <get_time_s>
    3548:	6b 01       	movw	r12, r22
    354a:	7c 01       	movw	r14, r24
    354c:	88 e5       	ldi	r24, 0x58	; 88
    354e:	c8 0e       	add	r12, r24
    3550:	82 e0       	ldi	r24, 0x02	; 2
    3552:	d8 1e       	adc	r13, r24
    3554:	e1 1c       	adc	r14, r1
    3556:	f1 1c       	adc	r15, r1
    3558:	0c c0       	rjmp	.+24     	; 0x3572 <setup_init+0x42>
            if((get_time_s() > time_stamp))
    355a:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <get_time_s>
    355e:	c6 16       	cp	r12, r22
    3560:	d7 06       	cpc	r13, r23
    3562:	e8 06       	cpc	r14, r24
    3564:	f9 06       	cpc	r15, r25
    3566:	08 f4       	brcc	.+2      	; 0x356a <setup_init+0x3a>
    3568:	8c c0       	rjmp	.+280    	; 0x3682 <setup_init+0x152>
            delay_ms(1000);
    356a:	88 ee       	ldi	r24, 0xE8	; 232
    356c:	93 e0       	ldi	r25, 0x03	; 3
    356e:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
            uart_flush();
    3572:	0e 94 35 29 	call	0x526a	; 0x526a <uart_flush>
            uart_send_str_p(PSTR("AT\r\n"));
    3576:	87 ef       	ldi	r24, 0xF7	; 247
    3578:	93 e0       	ldi	r25, 0x03	; 3
    357a:	0e 94 1d 29 	call	0x523a	; 0x523a <uart_send_str_p>
            if ((respons = mdm_wait_cmd_ms(1000, (const char*)RESPON_OK)))
    357e:	62 e5       	ldi	r22, 0x52	; 82
    3580:	71 e0       	ldi	r23, 0x01	; 1
    3582:	88 ee       	ldi	r24, 0xE8	; 232
    3584:	93 e0       	ldi	r25, 0x03	; 3
    3586:	0e 94 59 12 	call	0x24b2	; 0x24b2 <mdm_wait_cmd_ms>
    358a:	88 23       	and	r24, r24
    358c:	31 f3       	breq	.-52     	; 0x355a <setup_init+0x2a>
        delay_ms(500);
    358e:	84 ef       	ldi	r24, 0xF4	; 244
    3590:	91 e0       	ldi	r25, 0x01	; 1
    3592:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
        uart_flush();
    3596:	0e 94 35 29 	call	0x526a	; 0x526a <uart_flush>
        uart_send_str_p(PSTR("ATE0\r\n"));
    359a:	80 ef       	ldi	r24, 0xF0	; 240
    359c:	93 e0       	ldi	r25, 0x03	; 3
    359e:	0e 94 1d 29 	call	0x523a	; 0x523a <uart_send_str_p>
        delay_ms(2000);
    35a2:	80 ed       	ldi	r24, 0xD0	; 208
    35a4:	97 e0       	ldi	r25, 0x07	; 7
    35a6:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
        uart_flush();
    35aa:	0e 94 35 29 	call	0x526a	; 0x526a <uart_flush>
        uart_send_str_p(PSTR("AT+CMGF=1\r\n"));
    35ae:	84 ee       	ldi	r24, 0xE4	; 228
    35b0:	93 e0       	ldi	r25, 0x03	; 3
    35b2:	0e 94 1d 29 	call	0x523a	; 0x523a <uart_send_str_p>
        if ((respons = mdm_wait_cmd_ms(3000, (const char*)RESPON_OK)))
    35b6:	62 e5       	ldi	r22, 0x52	; 82
    35b8:	71 e0       	ldi	r23, 0x01	; 1
    35ba:	88 eb       	ldi	r24, 0xB8	; 184
    35bc:	9b e0       	ldi	r25, 0x0B	; 11
    35be:	0e 94 59 12 	call	0x24b2	; 0x24b2 <mdm_wait_cmd_ms>
    35c2:	88 23       	and	r24, r24
    35c4:	b1 f2       	breq	.-84     	; 0x3572 <setup_init+0x42>
            delay_ms(500);
    35c6:	84 ef       	ldi	r24, 0xF4	; 244
    35c8:	91 e0       	ldi	r25, 0x01	; 1
    35ca:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
            uart_flush();
    35ce:	0e 94 35 29 	call	0x526a	; 0x526a <uart_flush>
            uart_send_str_p(PSTR("AT+CNMI=2,1,0,1,0\r\n"));
    35d2:	80 ed       	ldi	r24, 0xD0	; 208
    35d4:	93 e0       	ldi	r25, 0x03	; 3
    35d6:	0e 94 1d 29 	call	0x523a	; 0x523a <uart_send_str_p>
            if ((respons = mdm_wait_cmd_ms(3000, (const char*)RESPON_OK)))
    35da:	62 e5       	ldi	r22, 0x52	; 82
    35dc:	71 e0       	ldi	r23, 0x01	; 1
    35de:	88 eb       	ldi	r24, 0xB8	; 184
    35e0:	9b e0       	ldi	r25, 0x0B	; 11
    35e2:	0e 94 59 12 	call	0x24b2	; 0x24b2 <mdm_wait_cmd_ms>
    35e6:	88 23       	and	r24, r24
    35e8:	21 f2       	breq	.-120    	; 0x3572 <setup_init+0x42>
                delay_ms(500);
    35ea:	84 ef       	ldi	r24, 0xF4	; 244
    35ec:	91 e0       	ldi	r25, 0x01	; 1
    35ee:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
                uart_flush();
    35f2:	0e 94 35 29 	call	0x526a	; 0x526a <uart_flush>
                uart_send_str_p(PSTR("AT+CLIP=1\r\n"));
    35f6:	84 ec       	ldi	r24, 0xC4	; 196
    35f8:	93 e0       	ldi	r25, 0x03	; 3
    35fa:	0e 94 1d 29 	call	0x523a	; 0x523a <uart_send_str_p>
                if ((respons = mdm_wait_cmd_ms(3000, (const char*)RESPON_OK)))
    35fe:	62 e5       	ldi	r22, 0x52	; 82
    3600:	71 e0       	ldi	r23, 0x01	; 1
    3602:	88 eb       	ldi	r24, 0xB8	; 184
    3604:	9b e0       	ldi	r25, 0x0B	; 11
    3606:	0e 94 59 12 	call	0x24b2	; 0x24b2 <mdm_wait_cmd_ms>
    360a:	88 23       	and	r24, r24
    360c:	09 f4       	brne	.+2      	; 0x3610 <setup_init+0xe0>
    360e:	b1 cf       	rjmp	.-158    	; 0x3572 <setup_init+0x42>
                    delay_ms(500);
    3610:	84 ef       	ldi	r24, 0xF4	; 244
    3612:	91 e0       	ldi	r25, 0x01	; 1
    3614:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
                    uart_flush();
    3618:	0e 94 35 29 	call	0x526a	; 0x526a <uart_flush>
                    uart_send_str_p(PSTR("AT+CPMS=\"SM\",\"SM\",\"SM\"\r\n"));
    361c:	8b ea       	ldi	r24, 0xAB	; 171
    361e:	93 e0       	ldi	r25, 0x03	; 3
    3620:	0e 94 1d 29 	call	0x523a	; 0x523a <uart_send_str_p>
                    if ((respons = mdm_wait_cmd_ms(5000, (const char*)RESPON_OK)))
    3624:	62 e5       	ldi	r22, 0x52	; 82
    3626:	71 e0       	ldi	r23, 0x01	; 1
    3628:	88 e8       	ldi	r24, 0x88	; 136
    362a:	93 e1       	ldi	r25, 0x13	; 19
    362c:	0e 94 59 12 	call	0x24b2	; 0x24b2 <mdm_wait_cmd_ms>
    3630:	88 23       	and	r24, r24
    3632:	09 f4       	brne	.+2      	; 0x3636 <setup_init+0x106>
    3634:	9e cf       	rjmp	.-196    	; 0x3572 <setup_init+0x42>
                        delay_ms(500);
    3636:	84 ef       	ldi	r24, 0xF4	; 244
    3638:	91 e0       	ldi	r25, 0x01	; 1
    363a:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
                        uart_flush();
    363e:	0e 94 35 29 	call	0x526a	; 0x526a <uart_flush>
                        uart_send_str_p(PSTR("AT+DDET=1,50,0,1\r\n"));
    3642:	88 e9       	ldi	r24, 0x98	; 152
    3644:	93 e0       	ldi	r25, 0x03	; 3
    3646:	0e 94 1d 29 	call	0x523a	; 0x523a <uart_send_str_p>
                        if ((respons = mdm_wait_cmd_ms(3000, (const char*)RESPON_OK)))
    364a:	62 e5       	ldi	r22, 0x52	; 82
    364c:	71 e0       	ldi	r23, 0x01	; 1
    364e:	88 eb       	ldi	r24, 0xB8	; 184
    3650:	9b e0       	ldi	r25, 0x0B	; 11
    3652:	0e 94 59 12 	call	0x24b2	; 0x24b2 <mdm_wait_cmd_ms>
    3656:	89 83       	std	Y+1, r24	; 0x01
    3658:	88 23       	and	r24, r24
    365a:	09 f4       	brne	.+2      	; 0x365e <setup_init+0x12e>
    365c:	8a cf       	rjmp	.-236    	; 0x3572 <setup_init+0x42>
    registration_status_ms(2000);
    365e:	60 ed       	ldi	r22, 0xD0	; 208
    3660:	77 e0       	ldi	r23, 0x07	; 7
    3662:	80 e0       	ldi	r24, 0x00	; 0
    3664:	90 e0       	ldi	r25, 0x00	; 0
    3666:	0e 94 a8 14 	call	0x2950	; 0x2950 <registration_status_ms>
}
    366a:	89 81       	ldd	r24, Y+1	; 0x01
    366c:	0f 90       	pop	r0
    366e:	0f 90       	pop	r0
    3670:	0f 90       	pop	r0
    3672:	0f 90       	pop	r0
    3674:	df 91       	pop	r29
    3676:	cf 91       	pop	r28
    3678:	ff 90       	pop	r15
    367a:	ef 90       	pop	r14
    367c:	df 90       	pop	r13
    367e:	cf 90       	pop	r12
    3680:	08 95       	ret
                reset_mcu(1);
    3682:	81 e0       	ldi	r24, 0x01	; 1
    3684:	0e 94 45 1b 	call	0x368a	; 0x368a <reset_mcu>
    3688:	70 cf       	rjmp	.-288    	; 0x356a <setup_init+0x3a>

0000368a <reset_mcu>:
{
    368a:	cf 93       	push	r28
    368c:	c8 2f       	mov	r28, r24
    if(get_reset_count_mcu() < 254)
    368e:	0e 94 04 11 	call	0x2208	; 0x2208 <get_reset_count_mcu>
    3692:	8e 3f       	cpi	r24, 0xFE	; 254
    3694:	78 f4       	brcc	.+30     	; 0x36b4 <reset_mcu+0x2a>
        inc_reset_count_mcu();
    3696:	0e 94 07 11 	call	0x220e	; 0x220e <inc_reset_count_mcu>
    EEPROM_update();
    369a:	0e 94 c8 10 	call	0x2190	; 0x2190 <EEPROM_update>
    DigitalWrite(PIN_PWR_GSM, LOW);
    369e:	5f 98       	cbi	0x0b, 7	; 11
    delay_s(3);
    36a0:	83 e0       	ldi	r24, 0x03	; 3
    36a2:	0e 94 fc 27 	call	0x4ff8	; 0x4ff8 <delay_s>
    DigitalWrite(PIN_PWR_GSM, HIGH);
    36a6:	5f 9a       	sbi	0x0b, 7	; 11
    setup_init();
    36a8:	0e 94 98 1a 	call	0x3530	; 0x3530 <setup_init>
    if(all == 1)
    36ac:	c1 30       	cpi	r28, 0x01	; 1
    36ae:	31 f0       	breq	.+12     	; 0x36bc <reset_mcu+0x32>
}
    36b0:	cf 91       	pop	r28
    36b2:	08 95       	ret
    else set_reset_count_mcu(0);
    36b4:	80 e0       	ldi	r24, 0x00	; 0
    36b6:	0e 94 01 11 	call	0x2202	; 0x2202 <set_reset_count_mcu>
    36ba:	ef cf       	rjmp	.-34     	; 0x369a <reset_mcu+0x10>
        cli(); // запрещаем прерывания и ждем перезагрузки по сторожевому таймеру
    36bc:	f8 94       	cli
        while(1);
    36be:	ff cf       	rjmp	.-2      	; 0x36be <reset_mcu+0x34>

000036c0 <check_registration>:
{
    36c0:	cf 93       	push	r28
    36c2:	df 93       	push	r29
    36c4:	00 d0       	rcall	.+0      	; 0x36c6 <check_registration+0x6>
    36c6:	00 d0       	rcall	.+0      	; 0x36c8 <check_registration+0x8>
    36c8:	cd b7       	in	r28, 0x3d	; 61
    36ca:	de b7       	in	r29, 0x3e	; 62
    if(get_time_s() > (time_of_last_check + TIME_CHECK_REG))
    36cc:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <get_time_s>
    36d0:	69 83       	std	Y+1, r22	; 0x01
    36d2:	7a 83       	std	Y+2, r23	; 0x02
    36d4:	8b 83       	std	Y+3, r24	; 0x03
    36d6:	9c 83       	std	Y+4, r25	; 0x04
    36d8:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <time_of_last_check.38>
    36dc:	90 91 7c 02 	lds	r25, 0x027C	; 0x80027c <time_of_last_check.38+0x1>
    36e0:	a0 91 7d 02 	lds	r26, 0x027D	; 0x80027d <time_of_last_check.38+0x2>
    36e4:	b0 91 7e 02 	lds	r27, 0x027E	; 0x80027e <time_of_last_check.38+0x3>
    36e8:	88 58       	subi	r24, 0x88	; 136
    36ea:	9f 4f       	sbci	r25, 0xFF	; 255
    36ec:	af 4f       	sbci	r26, 0xFF	; 255
    36ee:	bf 4f       	sbci	r27, 0xFF	; 255
    36f0:	29 81       	ldd	r18, Y+1	; 0x01
    36f2:	3a 81       	ldd	r19, Y+2	; 0x02
    36f4:	4b 81       	ldd	r20, Y+3	; 0x03
    36f6:	5c 81       	ldd	r21, Y+4	; 0x04
    36f8:	82 17       	cp	r24, r18
    36fa:	93 07       	cpc	r25, r19
    36fc:	a4 07       	cpc	r26, r20
    36fe:	b5 07       	cpc	r27, r21
    3700:	40 f0       	brcs	.+16     	; 0x3712 <check_registration+0x52>
    return 0;
    3702:	80 e0       	ldi	r24, 0x00	; 0
}
    3704:	0f 90       	pop	r0
    3706:	0f 90       	pop	r0
    3708:	0f 90       	pop	r0
    370a:	0f 90       	pop	r0
    370c:	df 91       	pop	r29
    370e:	cf 91       	pop	r28
    3710:	08 95       	ret
        if(registration_status_ms(2000) == 0)
    3712:	60 ed       	ldi	r22, 0xD0	; 208
    3714:	77 e0       	ldi	r23, 0x07	; 7
    3716:	80 e0       	ldi	r24, 0x00	; 0
    3718:	90 e0       	ldi	r25, 0x00	; 0
    371a:	0e 94 a8 14 	call	0x2950	; 0x2950 <registration_status_ms>
    371e:	81 11       	cpse	r24, r1
    3720:	1f c0       	rjmp	.+62     	; 0x3760 <check_registration+0xa0>
            cnt++;
    3722:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <cnt.37>
    3726:	8f 5f       	subi	r24, 0xFF	; 255
    3728:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <cnt.37>
            softuart_puts_p(PSTR("not reg gsm"));
    372c:	8f ed       	ldi	r24, 0xDF	; 223
    372e:	94 e0       	ldi	r25, 0x04	; 4
    3730:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <softuart_puts_p>
            if(cnt >= 5)
    3734:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <cnt.37>
    3738:	85 30       	cpi	r24, 0x05	; 5
    373a:	74 f4       	brge	.+28     	; 0x3758 <check_registration+0x98>
        time_of_last_check = get_time_s();
    373c:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <get_time_s>
    3740:	60 93 7b 02 	sts	0x027B, r22	; 0x80027b <time_of_last_check.38>
    3744:	70 93 7c 02 	sts	0x027C, r23	; 0x80027c <time_of_last_check.38+0x1>
    3748:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <time_of_last_check.38+0x2>
    374c:	90 93 7e 02 	sts	0x027E, r25	; 0x80027e <time_of_last_check.38+0x3>
        send_unsent_sms();
    3750:	0e 94 0a 18 	call	0x3014	; 0x3014 <send_unsent_sms>
    return 0;
    3754:	80 e0       	ldi	r24, 0x00	; 0
    3756:	d6 cf       	rjmp	.-84     	; 0x3704 <check_registration+0x44>
                reset_mcu(0);
    3758:	80 e0       	ldi	r24, 0x00	; 0
    375a:	0e 94 45 1b 	call	0x368a	; 0x368a <reset_mcu>
    375e:	ee cf       	rjmp	.-36     	; 0x373c <check_registration+0x7c>
            cnt=0;
    3760:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <cnt.37>
            time_of_last_check = get_time_s();
    3764:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <get_time_s>
    3768:	60 93 7b 02 	sts	0x027B, r22	; 0x80027b <time_of_last_check.38>
    376c:	70 93 7c 02 	sts	0x027C, r23	; 0x80027c <time_of_last_check.38+0x1>
    3770:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <time_of_last_check.38+0x2>
    3774:	90 93 7e 02 	sts	0x027E, r25	; 0x80027e <time_of_last_check.38+0x3>
            return 1;
    3778:	81 e0       	ldi	r24, 0x01	; 1
    377a:	c4 cf       	rjmp	.-120    	; 0x3704 <check_registration+0x44>

0000377c <send_USSD>:
{
    377c:	4f 92       	push	r4
    377e:	5f 92       	push	r5
    3780:	6f 92       	push	r6
    3782:	7f 92       	push	r7
    3784:	8f 92       	push	r8
    3786:	9f 92       	push	r9
    3788:	af 92       	push	r10
    378a:	bf 92       	push	r11
    378c:	cf 92       	push	r12
    378e:	df 92       	push	r13
    3790:	ef 92       	push	r14
    3792:	ff 92       	push	r15
    3794:	0f 93       	push	r16
    3796:	1f 93       	push	r17
    3798:	cf 93       	push	r28
    379a:	df 93       	push	r29
    379c:	cd b7       	in	r28, 0x3d	; 61
    379e:	de b7       	in	r29, 0x3e	; 62
    37a0:	c1 56       	subi	r28, 0x61	; 97
    37a2:	d1 09       	sbc	r29, r1
    37a4:	0f b6       	in	r0, 0x3f	; 63
    37a6:	f8 94       	cli
    37a8:	de bf       	out	0x3e, r29	; 62
    37aa:	0f be       	out	0x3f, r0	; 63
    37ac:	cd bf       	out	0x3d, r28	; 61
    37ae:	01 e0       	ldi	r16, 0x01	; 1
    37b0:	10 e0       	ldi	r17, 0x00	; 0
    37b2:	75 c0       	rjmp	.+234    	; 0x389e <send_USSD+0x122>
            delay_ms(500);
    37b4:	84 ef       	ldi	r24, 0xF4	; 244
    37b6:	91 e0       	ldi	r25, 0x01	; 1
    37b8:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
        uart_flush();
    37bc:	0e 94 35 29 	call	0x526a	; 0x526a <uart_flush>
        uart_send_str_p(PSTR("AT+CUSD=1,\""));
    37c0:	8c e8       	ldi	r24, 0x8C	; 140
    37c2:	93 e0       	ldi	r25, 0x03	; 3
    37c4:	0e 94 1d 29 	call	0x523a	; 0x523a <uart_send_str_p>
        uart_send_str_p(PSTR("*101#"));
    37c8:	86 e8       	ldi	r24, 0x86	; 134
    37ca:	93 e0       	ldi	r25, 0x03	; 3
    37cc:	0e 94 1d 29 	call	0x523a	; 0x523a <uart_send_str_p>
        uart_send_str_p(PSTR("\"\r\n"));
    37d0:	82 e8       	ldi	r24, 0x82	; 130
    37d2:	93 e0       	ldi	r25, 0x03	; 3
    37d4:	0e 94 1d 29 	call	0x523a	; 0x523a <uart_send_str_p>
        if(mdm_wait_cmd_ms(10000, (const char*)RESPON_OK) == 1)
    37d8:	62 e5       	ldi	r22, 0x52	; 82
    37da:	71 e0       	ldi	r23, 0x01	; 1
    37dc:	80 e1       	ldi	r24, 0x10	; 16
    37de:	97 e2       	ldi	r25, 0x27	; 39
    37e0:	0e 94 59 12 	call	0x24b2	; 0x24b2 <mdm_wait_cmd_ms>
    37e4:	81 30       	cpi	r24, 0x01	; 1
    37e6:	09 f4       	brne	.+2      	; 0x37ea <send_USSD+0x6e>
    37e8:	72 c0       	rjmp	.+228    	; 0x38ce <send_USSD+0x152>
    for(i = 0; i < 3; i++)
    37ea:	03 30       	cpi	r16, 0x03	; 3
    37ec:	08 f4       	brcc	.+2      	; 0x37f0 <send_USSD+0x74>
    37ee:	55 c0       	rjmp	.+170    	; 0x389a <send_USSD+0x11e>
    uint32_t timeout = 0;
    37f0:	c1 2c       	mov	r12, r1
    37f2:	d1 2c       	mov	r13, r1
    37f4:	76 01       	movw	r14, r12
    if(i == 3)
    37f6:	03 30       	cpi	r16, 0x03	; 3
    37f8:	09 f4       	brne	.+2      	; 0x37fc <send_USSD+0x80>
    37fa:	6c c1       	rjmp	.+728    	; 0x3ad4 <send_USSD+0x358>
    while(get_time_s() < timeout)
    37fc:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <get_time_s>
    3800:	a2 96       	adiw	r28, 0x22	; 34
    3802:	6c af       	std	Y+60, r22	; 0x3c
    3804:	7d af       	std	Y+61, r23	; 0x3d
    3806:	8e af       	std	Y+62, r24	; 0x3e
    3808:	9f af       	std	Y+63, r25	; 0x3f
    380a:	a2 97       	sbiw	r28, 0x22	; 34
    380c:	6c 15       	cp	r22, r12
    380e:	7d 05       	cpc	r23, r13
    3810:	8e 05       	cpc	r24, r14
    3812:	9f 05       	cpc	r25, r15
    3814:	08 f0       	brcs	.+2      	; 0x3818 <send_USSD+0x9c>
    3816:	45 c1       	rjmp	.+650    	; 0x3aa2 <send_USSD+0x326>
        ptr = gsm_poll_for_string();
    3818:	0e 94 43 11 	call	0x2286	; 0x2286 <gsm_poll_for_string>
    381c:	08 2f       	mov	r16, r24
    381e:	19 2f       	mov	r17, r25
        if(ptr)
    3820:	01 15       	cp	r16, r1
    3822:	11 05       	cpc	r17, r1
    3824:	59 f3       	breq	.-42     	; 0x37fc <send_USSD+0x80>
            if(strstr(ptr, "+CUSD:")) //
    3826:	6f ea       	ldi	r22, 0xAF	; 175
    3828:	71 e0       	ldi	r23, 0x01	; 1
    382a:	c8 01       	movw	r24, r16
    382c:	0e 94 16 2e 	call	0x5c2c	; 0x5c2c <strstr>
    3830:	89 2b       	or	r24, r25
    3832:	09 f4       	brne	.+2      	; 0x3836 <send_USSD+0xba>
    3834:	51 c1       	rjmp	.+674    	; 0x3ad8 <send_USSD+0x35c>
                ptr = strchr(ptr, '"');
    3836:	62 e2       	ldi	r22, 0x22	; 34
    3838:	70 e0       	ldi	r23, 0x00	; 0
    383a:	c8 01       	movw	r24, r16
    383c:	06 96       	adiw	r24, 0x06	; 6
    383e:	0e 94 0b 2e 	call	0x5c16	; 0x5c16 <strchr>
    3842:	a8 2e       	mov	r10, r24
    3844:	b9 2e       	mov	r11, r25
                    return 0;
    3846:	80 e0       	ldi	r24, 0x00	; 0
                if(!ptr)
    3848:	a1 14       	cp	r10, r1
    384a:	b1 04       	cpc	r11, r1
    384c:	09 f4       	brne	.+2      	; 0x3850 <send_USSD+0xd4>
    384e:	2a c1       	rjmp	.+596    	; 0x3aa4 <send_USSD+0x328>
                ptr++;
    3850:	9f ef       	ldi	r25, 0xFF	; 255
    3852:	a9 1a       	sub	r10, r25
    3854:	b9 0a       	sbc	r11, r25
                memmove(temp_ussd, ptr, 92);
    3856:	8c e5       	ldi	r24, 0x5C	; 92
    3858:	f5 01       	movw	r30, r10
    385a:	de 01       	movw	r26, r28
    385c:	11 96       	adiw	r26, 0x01	; 1
    385e:	01 90       	ld	r0, Z+
    3860:	0d 92       	st	X+, r0
    3862:	8a 95       	dec	r24
    3864:	e1 f7       	brne	.-8      	; 0x385e <send_USSD+0xe2>
    uint8_t  byteNext = 0;
    uint16_t numIn    = 0;
    uint16_t numOut   = 0;
    len*=2;
    //
    while(numIn<len)
    3866:	de 01       	movw	r26, r28
    3868:	11 96       	adiw	r26, 0x01	; 1
    386a:	7d 01       	movw	r14, r26
    386c:	4e 01       	movw	r8, r28
    386e:	b1 e6       	ldi	r27, 0x61	; 97
    3870:	8b 0e       	add	r8, r27
    3872:	91 1c       	adc	r9, r1
    uint16_t numOut   = 0;
    3874:	d1 2c       	mov	r13, r1
    3876:	c1 2c       	mov	r12, r1
                        dst[numOut]=byteNext+0x80;
                        numOut++;
                    }
                    else											//	Симолы 'А-Я,а-п' - 04 16 - 04 63  =>  208 144 - 208 191
                    {
                        dst[numOut]=0xD1;    //	Симолы 'р-я'     - 04 64 - 04 79  =>  209 128 - 209 143
    3878:	0f 2e       	mov	r0, r31
    387a:	f1 ed       	ldi	r31, 0xD1	; 209
    387c:	6f 2e       	mov	r6, r31
    387e:	f0 2d       	mov	r31, r0
                        dst[numOut]=0xD0;
    3880:	0f 2e       	mov	r0, r31
    3882:	f0 ed       	ldi	r31, 0xD0	; 208
    3884:	7f 2e       	mov	r7, r31
    3886:	f0 2d       	mov	r31, r0
                    dst[numOut]=byteNext+0x40;
    3888:	0f 2e       	mov	r0, r31
    388a:	f1 e9       	ldi	r31, 0x91	; 145
    388c:	4f 2e       	mov	r4, r31
    388e:	f0 2d       	mov	r31, r0
                dst[numOut]=byteNext+0x80;
    3890:	0f 2e       	mov	r0, r31
    3892:	f1 e8       	ldi	r31, 0x81	; 129
    3894:	5f 2e       	mov	r5, r31
    3896:	f0 2d       	mov	r31, r0
    3898:	49 c0       	rjmp	.+146    	; 0x392c <send_USSD+0x1b0>
    389a:	1f 5f       	subi	r17, 0xFF	; 255
    389c:	0f 5f       	subi	r16, 0xFF	; 255
        if(i != 0)
    389e:	11 11       	cpse	r17, r1
    38a0:	89 cf       	rjmp	.-238    	; 0x37b4 <send_USSD+0x38>
        uart_flush();
    38a2:	0e 94 35 29 	call	0x526a	; 0x526a <uart_flush>
        uart_send_str_p(PSTR("AT+CUSD=1,\""));
    38a6:	8c e8       	ldi	r24, 0x8C	; 140
    38a8:	93 e0       	ldi	r25, 0x03	; 3
    38aa:	0e 94 1d 29 	call	0x523a	; 0x523a <uart_send_str_p>
        uart_send_str_p(PSTR("*101#"));
    38ae:	86 e8       	ldi	r24, 0x86	; 134
    38b0:	93 e0       	ldi	r25, 0x03	; 3
    38b2:	0e 94 1d 29 	call	0x523a	; 0x523a <uart_send_str_p>
        uart_send_str_p(PSTR("\"\r\n"));
    38b6:	82 e8       	ldi	r24, 0x82	; 130
    38b8:	93 e0       	ldi	r25, 0x03	; 3
    38ba:	0e 94 1d 29 	call	0x523a	; 0x523a <uart_send_str_p>
        if(mdm_wait_cmd_ms(10000, (const char*)RESPON_OK) == 1)
    38be:	62 e5       	ldi	r22, 0x52	; 82
    38c0:	71 e0       	ldi	r23, 0x01	; 1
    38c2:	80 e1       	ldi	r24, 0x10	; 16
    38c4:	97 e2       	ldi	r25, 0x27	; 39
    38c6:	0e 94 59 12 	call	0x24b2	; 0x24b2 <mdm_wait_cmd_ms>
    38ca:	81 30       	cpi	r24, 0x01	; 1
    38cc:	31 f7       	brne	.-52     	; 0x389a <send_USSD+0x11e>
            timeout = get_time_s() + 10;
    38ce:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <get_time_s>
    38d2:	6b 01       	movw	r12, r22
    38d4:	7c 01       	movw	r14, r24
    38d6:	8a e0       	ldi	r24, 0x0A	; 10
    38d8:	c8 0e       	add	r12, r24
    38da:	d1 1c       	adc	r13, r1
    38dc:	e1 1c       	adc	r14, r1
    38de:	f1 1c       	adc	r15, r1
            softuart_puts_ln("ussd send ok");
    38e0:	82 ea       	ldi	r24, 0xA2	; 162
    38e2:	91 e0       	ldi	r25, 0x01	; 1
    38e4:	0e 94 f3 25 	call	0x4be6	; 0x4be6 <softuart_puts_ln>
            break;
    38e8:	01 2f       	mov	r16, r17
    38ea:	85 cf       	rjmp	.-246    	; 0x37f6 <send_USSD+0x7a>
            if(byteNext==0x01)
    38ec:	81 30       	cpi	r24, 0x01	; 1
    38ee:	81 f0       	breq	.+32     	; 0x3910 <send_USSD+0x194>
                if(byteNext==0x51)
    38f0:	81 35       	cpi	r24, 0x51	; 81
    38f2:	09 f4       	brne	.+2      	; 0x38f6 <send_USSD+0x17a>
    38f4:	3f c0       	rjmp	.+126    	; 0x3974 <send_USSD+0x1f8>
                    if(byteNext< 0x40)
    38f6:	80 34       	cpi	r24, 0x40	; 64
    38f8:	08 f0       	brcs	.+2      	; 0x38fc <send_USSD+0x180>
    38fa:	45 c0       	rjmp	.+138    	; 0x3986 <send_USSD+0x20a>
                        dst[numOut]=0xD0;
    38fc:	f5 01       	movw	r30, r10
    38fe:	ec 0d       	add	r30, r12
    3900:	fd 1d       	adc	r31, r13
    3902:	70 82       	st	Z, r7
                        dst[numOut]=byteNext+0x80;
    3904:	80 58       	subi	r24, 0x80	; 128
    3906:	81 83       	std	Z+1, r24	; 0x01
                        numOut++;
    3908:	82 e0       	ldi	r24, 0x02	; 2
    390a:	c8 0e       	add	r12, r24
    390c:	d1 1c       	adc	r13, r1
    390e:	08 c0       	rjmp	.+16     	; 0x3920 <send_USSD+0x1a4>
                dst[numOut]=0xD0;
    3910:	f5 01       	movw	r30, r10
    3912:	ec 0d       	add	r30, r12
    3914:	fd 1d       	adc	r31, r13
    3916:	70 82       	st	Z, r7
                dst[numOut]=byteNext+0x80;
    3918:	51 82       	std	Z+1, r5	; 0x01
                numOut++;
    391a:	e2 e0       	ldi	r30, 0x02	; 2
    391c:	ce 0e       	add	r12, r30
    391e:	d1 1c       	adc	r13, r1
    while(numIn<len)
    3920:	a4 e0       	ldi	r26, 0x04	; 4
    3922:	ea 0e       	add	r14, r26
    3924:	f1 1c       	adc	r15, r1
    3926:	e8 14       	cp	r14, r8
    3928:	f9 04       	cpc	r15, r9
    392a:	b9 f1       	breq	.+110    	; 0x399a <send_USSD+0x21e>
        byteThis = hex_to_char(src[pos+numIn])*16 + hex_to_char(src[pos+numIn+1]);
    392c:	f7 01       	movw	r30, r14
    392e:	80 81       	ld	r24, Z
    3930:	0e 94 2e 11 	call	0x225c	; 0x225c <hex_to_char>
    3934:	08 2f       	mov	r16, r24
    3936:	d7 01       	movw	r26, r14
    3938:	11 96       	adiw	r26, 0x01	; 1
    393a:	8c 91       	ld	r24, X
    393c:	0e 94 2e 11 	call	0x225c	; 0x225c <hex_to_char>
    3940:	02 95       	swap	r16
    3942:	00 7f       	andi	r16, 0xF0	; 240
    3944:	08 0f       	add	r16, r24
        byteNext = hex_to_char(src[pos+numIn])*16 + hex_to_char(src[pos+numIn+1]);
    3946:	f7 01       	movw	r30, r14
    3948:	82 81       	ldd	r24, Z+2	; 0x02
    394a:	0e 94 2e 11 	call	0x225c	; 0x225c <hex_to_char>
    394e:	18 2f       	mov	r17, r24
    3950:	d7 01       	movw	r26, r14
    3952:	13 96       	adiw	r26, 0x03	; 3
    3954:	8c 91       	ld	r24, X
    3956:	0e 94 2e 11 	call	0x225c	; 0x225c <hex_to_char>
    395a:	12 95       	swap	r17
    395c:	10 7f       	andi	r17, 0xF0	; 240
    395e:	81 0f       	add	r24, r17
        if(byteThis==0x00)
    3960:	01 11       	cpse	r16, r1
    3962:	c4 cf       	rjmp	.-120    	; 0x38ec <send_USSD+0x170>
            dst[numOut]=byteNext;
    3964:	f5 01       	movw	r30, r10
    3966:	ec 0d       	add	r30, r12
    3968:	fd 1d       	adc	r31, r13
    396a:	80 83       	st	Z, r24
            numOut++;
    396c:	bf ef       	ldi	r27, 0xFF	; 255
    396e:	cb 1a       	sub	r12, r27
    3970:	db 0a       	sbc	r13, r27
    3972:	d6 cf       	rjmp	.-84     	; 0x3920 <send_USSD+0x1a4>
                    dst[numOut]=0xD1;
    3974:	f5 01       	movw	r30, r10
    3976:	ec 0d       	add	r30, r12
    3978:	fd 1d       	adc	r31, r13
    397a:	60 82       	st	Z, r6
                    dst[numOut]=byteNext+0x40;
    397c:	41 82       	std	Z+1, r4	; 0x01
                    numOut++;
    397e:	f2 e0       	ldi	r31, 0x02	; 2
    3980:	cf 0e       	add	r12, r31
    3982:	d1 1c       	adc	r13, r1
    3984:	cd cf       	rjmp	.-102    	; 0x3920 <send_USSD+0x1a4>
                        dst[numOut]=0xD1;    //	Симолы 'р-я'     - 04 64 - 04 79  =>  209 128 - 209 143
    3986:	f5 01       	movw	r30, r10
    3988:	ec 0d       	add	r30, r12
    398a:	fd 1d       	adc	r31, r13
    398c:	60 82       	st	Z, r6
                        numOut++;
                        dst[numOut]=byteNext+0x40;
    398e:	80 5c       	subi	r24, 0xC0	; 192
    3990:	81 83       	std	Z+1, r24	; 0x01
                        numOut++;
    3992:	92 e0       	ldi	r25, 0x02	; 2
    3994:	c9 0e       	add	r12, r25
    3996:	d1 1c       	adc	r13, r1
    3998:	c3 cf       	rjmp	.-122    	; 0x3920 <send_USSD+0x1a4>
                    }
    }
    dst[numOut]=0;																									//
    399a:	f5 01       	movw	r30, r10
    399c:	ec 0d       	add	r30, r12
    399e:	fd 1d       	adc	r31, r13
    39a0:	10 82       	st	Z, r1
                ptr = strchr(ptr, ' ');
    39a2:	60 e2       	ldi	r22, 0x20	; 32
    39a4:	70 e0       	ldi	r23, 0x00	; 0
    39a6:	c5 01       	movw	r24, r10
    39a8:	0e 94 0b 2e 	call	0x5c16	; 0x5c16 <strchr>
    39ac:	28 2f       	mov	r18, r24
    39ae:	39 2f       	mov	r19, r25
                if(ptr)
    39b0:	21 15       	cp	r18, r1
    39b2:	31 05       	cpc	r19, r1
    39b4:	09 f4       	brne	.+2      	; 0x39b8 <send_USSD+0x23c>
    39b6:	61 c0       	rjmp	.+194    	; 0x3a7a <send_USSD+0x2fe>
                    ptr = strchr(ptr, ' ');
    39b8:	60 e2       	ldi	r22, 0x20	; 32
    39ba:	70 e0       	ldi	r23, 0x00	; 0
    39bc:	c9 01       	movw	r24, r18
    39be:	01 96       	adiw	r24, 0x01	; 1
    39c0:	0e 94 0b 2e 	call	0x5c16	; 0x5c16 <strchr>
    39c4:	08 2f       	mov	r16, r24
    39c6:	19 2f       	mov	r17, r25
                    if(ptr)
    39c8:	01 15       	cp	r16, r1
    39ca:	11 05       	cpc	r17, r1
    39cc:	09 f4       	brne	.+2      	; 0x39d0 <send_USSD+0x254>
    39ce:	4b c0       	rjmp	.+150    	; 0x3a66 <send_USSD+0x2ea>
                        ptr++;
    39d0:	0f 5f       	subi	r16, 0xFF	; 255
    39d2:	1f 4f       	sbci	r17, 0xFF	; 255

static uint8_t len_to_char(char *p_src, uint8_t end_ch)
{
    uint8_t i=0;

    for( i = 0; i < strlen(p_src) && p_src[i]!=end_ch; i++) {;}
    39d4:	f8 01       	movw	r30, r16
    39d6:	01 90       	ld	r0, Z+
    39d8:	00 20       	and	r0, r0
    39da:	e9 f7       	brne	.-6      	; 0x39d6 <send_USSD+0x25a>
    39dc:	9f 01       	movw	r18, r30
    39de:	21 50       	subi	r18, 0x01	; 1
    39e0:	31 09       	sbc	r19, r1
    39e2:	20 1b       	sub	r18, r16
    39e4:	31 0b       	sbc	r19, r17
    39e6:	80 e0       	ldi	r24, 0x00	; 0
    39e8:	01 c0       	rjmp	.+2      	; 0x39ec <send_USSD+0x270>
    39ea:	8f 5f       	subi	r24, 0xFF	; 255
    39ec:	48 2f       	mov	r20, r24
    39ee:	50 e0       	ldi	r21, 0x00	; 0
    39f0:	42 17       	cp	r20, r18
    39f2:	53 07       	cpc	r21, r19
    39f4:	30 f4       	brcc	.+12     	; 0x3a02 <send_USSD+0x286>
    39f6:	f8 01       	movw	r30, r16
    39f8:	e4 0f       	add	r30, r20
    39fa:	f5 1f       	adc	r31, r21
    39fc:	90 81       	ld	r25, Z
    39fe:	90 32       	cpi	r25, 0x20	; 32
    3a00:	a1 f7       	brne	.-24     	; 0x39ea <send_USSD+0x26e>
                if(cnt_ch > 7)
    3a02:	88 30       	cpi	r24, 0x08	; 8
    3a04:	08 f0       	brcs	.+2      	; 0x3a08 <send_USSD+0x28c>
    3a06:	43 c0       	rjmp	.+134    	; 0x3a8e <send_USSD+0x312>
                memmove(arr_dep, ptr, cnt_ch);
    3a08:	b8 01       	movw	r22, r16
    3a0a:	81 e8       	ldi	r24, 0x81	; 129
    3a0c:	92 e0       	ldi	r25, 0x02	; 2
    3a0e:	0e 94 f2 2d 	call	0x5be4	; 0x5be4 <memmove>
                ptr = strtok(ptr, ".");
    3a12:	66 eb       	ldi	r22, 0xB6	; 182
    3a14:	71 e0       	ldi	r23, 0x01	; 1
    3a16:	c8 01       	movw	r24, r16
    3a18:	0e 94 e0 2d 	call	0x5bc0	; 0x5bc0 <strtok>
    3a1c:	08 2f       	mov	r16, r24
    3a1e:	19 2f       	mov	r17, r25
                    return 0;
    3a20:	80 e0       	ldi	r24, 0x00	; 0
                if(!ptr)
    3a22:	01 15       	cp	r16, r1
    3a24:	11 05       	cpc	r17, r1
    3a26:	f1 f1       	breq	.+124    	; 0x3aa4 <send_USSD+0x328>
                softuart_puts_ln(arr_dep);
    3a28:	81 e8       	ldi	r24, 0x81	; 129
    3a2a:	92 e0       	ldi	r25, 0x02	; 2
    3a2c:	0e 94 f3 25 	call	0x4be6	; 0x4be6 <softuart_puts_ln>
                deposit = atoi(ptr);
    3a30:	c8 01       	movw	r24, r16
    3a32:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <atoi>
    3a36:	28 2f       	mov	r18, r24
    3a38:	39 2f       	mov	r19, r25
    3a3a:	30 93 80 02 	sts	0x0280, r19	; 0x800280 <deposit+0x1>
    3a3e:	20 93 7f 02 	sts	0x027F, r18	; 0x80027f <deposit>
                    return 0;
    3a42:	80 e0       	ldi	r24, 0x00	; 0
                if(deposit <= 0)
    3a44:	12 16       	cp	r1, r18
    3a46:	13 06       	cpc	r1, r19
    3a48:	6c f5       	brge	.+90     	; 0x3aa4 <send_USSD+0x328>
            return 1;
    3a4a:	81 e0       	ldi	r24, 0x01	; 1
                else if(deposit < 10)
    3a4c:	2a 30       	cpi	r18, 0x0A	; 10
    3a4e:	31 05       	cpc	r19, r1
    3a50:	4c f5       	brge	.+82     	; 0x3aa4 <send_USSD+0x328>
                    softuart_puts_p(PSTR( "Deposit < 10 rub" ));
    3a52:	81 e7       	ldi	r24, 0x71	; 113
    3a54:	93 e0       	ldi	r25, 0x03	; 3
    3a56:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <softuart_puts_p>
                    send_sms_admins(PSTR( "Deposit < 10 RUB" ));
    3a5a:	80 e6       	ldi	r24, 0x60	; 96
    3a5c:	93 e0       	ldi	r25, 0x03	; 3
    3a5e:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <send_sms_admins>
            return 1;
    3a62:	81 e0       	ldi	r24, 0x01	; 1
    3a64:	1f c0       	rjmp	.+62     	; 0x3aa4 <send_USSD+0x328>
                        memcpy(arr_dep, "err", 3);
    3a66:	e1 e8       	ldi	r30, 0x81	; 129
    3a68:	f2 e0       	ldi	r31, 0x02	; 2
    3a6a:	85 e6       	ldi	r24, 0x65	; 101
    3a6c:	92 e7       	ldi	r25, 0x72	; 114
    3a6e:	91 83       	std	Z+1, r25	; 0x01
    3a70:	80 83       	st	Z, r24
    3a72:	82 e7       	ldi	r24, 0x72	; 114
    3a74:	82 83       	std	Z+2, r24	; 0x02
                        return 0;
    3a76:	80 e0       	ldi	r24, 0x00	; 0
    3a78:	15 c0       	rjmp	.+42     	; 0x3aa4 <send_USSD+0x328>
                    memcpy(arr_dep, "err", 3);
    3a7a:	e1 e8       	ldi	r30, 0x81	; 129
    3a7c:	f2 e0       	ldi	r31, 0x02	; 2
    3a7e:	85 e6       	ldi	r24, 0x65	; 101
    3a80:	92 e7       	ldi	r25, 0x72	; 114
    3a82:	91 83       	std	Z+1, r25	; 0x01
    3a84:	80 83       	st	Z, r24
    3a86:	82 e7       	ldi	r24, 0x72	; 114
    3a88:	82 83       	std	Z+2, r24	; 0x02
                    return 0;
    3a8a:	80 e0       	ldi	r24, 0x00	; 0
    3a8c:	0b c0       	rjmp	.+22     	; 0x3aa4 <send_USSD+0x328>
                    memcpy(arr_dep, "err", 3);
    3a8e:	e1 e8       	ldi	r30, 0x81	; 129
    3a90:	f2 e0       	ldi	r31, 0x02	; 2
    3a92:	85 e6       	ldi	r24, 0x65	; 101
    3a94:	92 e7       	ldi	r25, 0x72	; 114
    3a96:	91 83       	std	Z+1, r25	; 0x01
    3a98:	80 83       	st	Z, r24
    3a9a:	82 e7       	ldi	r24, 0x72	; 114
    3a9c:	82 83       	std	Z+2, r24	; 0x02
                    return 0;
    3a9e:	80 e0       	ldi	r24, 0x00	; 0
    3aa0:	01 c0       	rjmp	.+2      	; 0x3aa4 <send_USSD+0x328>
    return 0;
    3aa2:	80 e0       	ldi	r24, 0x00	; 0
}
    3aa4:	cf 59       	subi	r28, 0x9F	; 159
    3aa6:	df 4f       	sbci	r29, 0xFF	; 255
    3aa8:	0f b6       	in	r0, 0x3f	; 63
    3aaa:	f8 94       	cli
    3aac:	de bf       	out	0x3e, r29	; 62
    3aae:	0f be       	out	0x3f, r0	; 63
    3ab0:	cd bf       	out	0x3d, r28	; 61
    3ab2:	df 91       	pop	r29
    3ab4:	cf 91       	pop	r28
    3ab6:	1f 91       	pop	r17
    3ab8:	0f 91       	pop	r16
    3aba:	ff 90       	pop	r15
    3abc:	ef 90       	pop	r14
    3abe:	df 90       	pop	r13
    3ac0:	cf 90       	pop	r12
    3ac2:	bf 90       	pop	r11
    3ac4:	af 90       	pop	r10
    3ac6:	9f 90       	pop	r9
    3ac8:	8f 90       	pop	r8
    3aca:	7f 90       	pop	r7
    3acc:	6f 90       	pop	r6
    3ace:	5f 90       	pop	r5
    3ad0:	4f 90       	pop	r4
    3ad2:	08 95       	ret
        return 0;
    3ad4:	80 e0       	ldi	r24, 0x00	; 0
    3ad6:	e6 cf       	rjmp	.-52     	; 0x3aa4 <send_USSD+0x328>
            return 1;
    3ad8:	81 e0       	ldi	r24, 0x01	; 1
    3ada:	e4 cf       	rjmp	.-56     	; 0x3aa4 <send_USSD+0x328>

00003adc <check_deposit>:
{
    3adc:	cf 93       	push	r28
    3ade:	df 93       	push	r29
    3ae0:	00 d0       	rcall	.+0      	; 0x3ae2 <check_deposit+0x6>
    3ae2:	00 d0       	rcall	.+0      	; 0x3ae4 <check_deposit+0x8>
    3ae4:	cd b7       	in	r28, 0x3d	; 61
    3ae6:	de b7       	in	r29, 0x3e	; 62
    if(get_time_m() > (last_check_balance + 1440))//1440 min = 24h
    3ae8:	0e 94 a5 27 	call	0x4f4a	; 0x4f4a <get_time_m>
    3aec:	69 83       	std	Y+1, r22	; 0x01
    3aee:	7a 83       	std	Y+2, r23	; 0x02
    3af0:	8b 83       	std	Y+3, r24	; 0x03
    3af2:	9c 83       	std	Y+4, r25	; 0x04
    3af4:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <last_check_balance.33>
    3af8:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <last_check_balance.33+0x1>
    3afc:	a0 91 78 02 	lds	r26, 0x0278	; 0x800278 <last_check_balance.33+0x2>
    3b00:	b0 91 79 02 	lds	r27, 0x0279	; 0x800279 <last_check_balance.33+0x3>
    3b04:	80 56       	subi	r24, 0x60	; 96
    3b06:	9a 4f       	sbci	r25, 0xFA	; 250
    3b08:	af 4f       	sbci	r26, 0xFF	; 255
    3b0a:	bf 4f       	sbci	r27, 0xFF	; 255
    3b0c:	29 81       	ldd	r18, Y+1	; 0x01
    3b0e:	3a 81       	ldd	r19, Y+2	; 0x02
    3b10:	4b 81       	ldd	r20, Y+3	; 0x03
    3b12:	5c 81       	ldd	r21, Y+4	; 0x04
    3b14:	82 17       	cp	r24, r18
    3b16:	93 07       	cpc	r25, r19
    3b18:	a4 07       	cpc	r26, r20
    3b1a:	b5 07       	cpc	r27, r21
    3b1c:	38 f0       	brcs	.+14     	; 0x3b2c <check_deposit+0x50>
}
    3b1e:	0f 90       	pop	r0
    3b20:	0f 90       	pop	r0
    3b22:	0f 90       	pop	r0
    3b24:	0f 90       	pop	r0
    3b26:	df 91       	pop	r29
    3b28:	cf 91       	pop	r28
    3b2a:	08 95       	ret
        if(send_USSD() == 0)
    3b2c:	0e 94 be 1b 	call	0x377c	; 0x377c <send_USSD>
    3b30:	81 11       	cpse	r24, r1
    3b32:	14 c0       	rjmp	.+40     	; 0x3b5c <check_deposit+0x80>
            last_check_balance += 60;
    3b34:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <last_check_balance.33>
    3b38:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <last_check_balance.33+0x1>
    3b3c:	a0 91 78 02 	lds	r26, 0x0278	; 0x800278 <last_check_balance.33+0x2>
    3b40:	b0 91 79 02 	lds	r27, 0x0279	; 0x800279 <last_check_balance.33+0x3>
    3b44:	cc 96       	adiw	r24, 0x3c	; 60
    3b46:	a1 1d       	adc	r26, r1
    3b48:	b1 1d       	adc	r27, r1
    3b4a:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <last_check_balance.33>
    3b4e:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <last_check_balance.33+0x1>
    3b52:	a0 93 78 02 	sts	0x0278, r26	; 0x800278 <last_check_balance.33+0x2>
    3b56:	b0 93 79 02 	sts	0x0279, r27	; 0x800279 <last_check_balance.33+0x3>
            return;
    3b5a:	e1 cf       	rjmp	.-62     	; 0x3b1e <check_deposit+0x42>
        last_check_balance = get_time_m();
    3b5c:	0e 94 a5 27 	call	0x4f4a	; 0x4f4a <get_time_m>
    3b60:	60 93 76 02 	sts	0x0276, r22	; 0x800276 <last_check_balance.33>
    3b64:	70 93 77 02 	sts	0x0277, r23	; 0x800277 <last_check_balance.33+0x1>
    3b68:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <last_check_balance.33+0x2>
    3b6c:	90 93 79 02 	sts	0x0279, r25	; 0x800279 <last_check_balance.33+0x3>
    3b70:	d6 cf       	rjmp	.-84     	; 0x3b1e <check_deposit+0x42>

00003b72 <led_gsm>:
    if(registered_in_gsm_network == 1)
    3b72:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <registered_in_gsm_network>
    3b76:	81 30       	cpi	r24, 0x01	; 1
    3b78:	71 f0       	breq	.+28     	; 0x3b96 <led_gsm+0x24>
        j++;
    3b7a:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <j.0>
    3b7e:	8f 5f       	subi	r24, 0xFF	; 255
    3b80:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <j.0>
        if(j > 50)
    3b84:	83 33       	cpi	r24, 0x33	; 51
    3b86:	30 f0       	brcs	.+12     	; 0x3b94 <led_gsm+0x22>
            DigitalLevelToggle(GREEN_LED);
    3b88:	85 b1       	in	r24, 0x05	; 5
    3b8a:	90 e1       	ldi	r25, 0x10	; 16
    3b8c:	89 27       	eor	r24, r25
    3b8e:	85 b9       	out	0x05, r24	; 5
            j = 0;
    3b90:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <j.0>
}
    3b94:	08 95       	ret
        DigitalWrite(GREEN_LED, HIGH);
    3b96:	2c 9a       	sbi	0x05, 4	; 5
    3b98:	08 95       	ret

00003b9a <get_phone_number>:
}
    3b9a:	8f e8       	ldi	r24, 0x8F	; 143
    3b9c:	92 e0       	ldi	r25, 0x02	; 2
    3b9e:	08 95       	ret

00003ba0 <get_arr_dep>:
}
    3ba0:	81 e8       	ldi	r24, 0x81	; 129
    3ba2:	92 e0       	ldi	r25, 0x02	; 2
    3ba4:	08 95       	ret

00003ba6 <main>:
#include "main.h"



int main(void)
{
    3ba6:	cd b7       	in	r28, 0x3d	; 61
    3ba8:	de b7       	in	r29, 0x3e	; 62
    3baa:	68 97       	sbiw	r28, 0x18	; 24
    3bac:	0f b6       	in	r0, 0x3f	; 63
    3bae:	f8 94       	cli
    3bb0:	de bf       	out	0x3e, r29	; 62
    3bb2:	0f be       	out	0x3f, r0	; 63
    3bb4:	cd bf       	out	0x3d, r28	; 61
    _WDT_RESET(); // сброс сторожевого таймера
    3bb6:	a8 95       	wdr
    WDTCSR = (1<<WDE) | (1<<WDP0) | (1<<WDP3);
    3bb8:	89 e2       	ldi	r24, 0x29	; 41
    3bba:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    port_init();
    3bbe:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <port_init>
    timer1_init();
    3bc2:	0e 94 1e 26 	call	0x4c3c	; 0x4c3c <timer1_init>
    softuart_init();
    3bc6:	0e 94 b0 25 	call	0x4b60	; 0x4b60 <softuart_init>
    init_uart();
    3bca:	0e 94 9c 28 	call	0x5138	; 0x5138 <init_uart>
    sei();
    3bce:	78 94       	sei
    rst_default();
    3bd0:	0e 94 46 0c 	call	0x188c	; 0x188c <rst_default>
    softuart_puts_p(PSTR("Start..."));
    3bd4:	83 ee       	ldi	r24, 0xE3	; 227
    3bd6:	95 e0       	ldi	r25, 0x05	; 5
    3bd8:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <softuart_puts_p>
    init_internal_temperature();
    3bdc:	0e 94 0c 08 	call	0x1018	; 0x1018 <init_internal_temperature>
    charge_bat();
    3be0:	0e 94 1e 0c 	call	0x183c	; 0x183c <charge_bat>
    delay_ms(5000);
    3be4:	88 e8       	ldi	r24, 0x88	; 136
    3be6:	93 e1       	ldi	r25, 0x13	; 19
    3be8:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
    if (setup_init())
    3bec:	0e 94 98 1a 	call	0x3530	; 0x3530 <setup_init>
    3bf0:	81 11       	cpse	r24, r1
    3bf2:	35 c0       	rjmp	.+106    	; 0x3c5e <main+0xb8>
    {
        send_USSD();
        softuart_puts_p(PSTR("setup_ok"));
    }
    eeprom_read_config(1);
    3bf4:	81 e0       	ldi	r24, 0x01	; 1
    3bf6:	0e 94 90 10 	call	0x2120	; 0x2120 <eeprom_read_config>
    if(get_ext_temp() == 1)
    3bfa:	0e 94 2b 11 	call	0x2256	; 0x2256 <get_ext_temp>
    3bfe:	81 30       	cpi	r24, 0x01	; 1
    3c00:	a9 f1       	breq	.+106    	; 0x3c6c <main+0xc6>
        init_ds18x20();
    reset_soft_wdt();
    3c02:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <reset_soft_wdt>
    delay_ms(5000);
    3c06:	88 e8       	ldi	r24, 0x88	; 136
    3c08:	93 e1       	ldi	r25, 0x13	; 19
    3c0a:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
    power_control();
    3c0e:	0e 94 cb 09 	call	0x1396	; 0x1396 <power_control>
    delete_all_sms();
    3c12:	0e 94 07 19 	call	0x320e	; 0x320e <delete_all_sms>
    #if(DEBUG==1)
    print_ram_free();
    3c16:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <print_ram_free>
    #endif
    beep_non_block(100);
    3c1a:	84 e6       	ldi	r24, 0x64	; 100
    3c1c:	90 e0       	ldi	r25, 0x00	; 0
    3c1e:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <beep_non_block>
    softuart_puts_p(PSTR("Init Ok"));
    3c22:	82 ed       	ldi	r24, 0xD2	; 210
    3c24:	95 e0       	ldi	r25, 0x05	; 5
    3c26:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <softuart_puts_p>
    uint32_t now = get_time_s();
    3c2a:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <get_time_s>
    3c2e:	46 2e       	mov	r4, r22
    3c30:	57 2e       	mov	r5, r23
    3c32:	68 2e       	mov	r6, r24
    3c34:	79 2e       	mov	r7, r25
            #endif
            //debug_report();
            char debug_buffer[8];
            char debug_buffer2[12];
            //char debug_buffer3[12];
            sprintf(debug_buffer,"bat=%d", analog_read(BATTERY));
    3c36:	0f 2e       	mov	r0, r31
    3c38:	f8 eb       	ldi	r31, 0xB8	; 184
    3c3a:	af 2e       	mov	r10, r31
    3c3c:	f1 e0       	ldi	r31, 0x01	; 1
    3c3e:	bf 2e       	mov	r11, r31
    3c40:	f0 2d       	mov	r31, r0
    3c42:	8e 01       	movw	r16, r28
    3c44:	03 5f       	subi	r16, 0xF3	; 243
    3c46:	1f 4f       	sbci	r17, 0xFF	; 255
            softuart_puts_ln(debug_buffer);
            delay_ms(100);
            sprintf(debug_buffer2,"t_int=%dC", analog_read(INT_TEMP));
    3c48:	0f 2e       	mov	r0, r31
    3c4a:	ff eb       	ldi	r31, 0xBF	; 191
    3c4c:	cf 2e       	mov	r12, r31
    3c4e:	f1 e0       	ldi	r31, 0x01	; 1
    3c50:	df 2e       	mov	r13, r31
    3c52:	f0 2d       	mov	r31, r0
    3c54:	9e 01       	movw	r18, r28
    3c56:	2f 5f       	subi	r18, 0xFF	; 255
    3c58:	3f 4f       	sbci	r19, 0xFF	; 255
    3c5a:	79 01       	movw	r14, r18
    3c5c:	10 c0       	rjmp	.+32     	; 0x3c7e <main+0xd8>
        send_USSD();
    3c5e:	0e 94 be 1b 	call	0x377c	; 0x377c <send_USSD>
        softuart_puts_p(PSTR("setup_ok"));
    3c62:	8a ed       	ldi	r24, 0xDA	; 218
    3c64:	95 e0       	ldi	r25, 0x05	; 5
    3c66:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <softuart_puts_p>
    3c6a:	c4 cf       	rjmp	.-120    	; 0x3bf4 <main+0x4e>
        init_ds18x20();
    3c6c:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <init_ds18x20>
    3c70:	c8 cf       	rjmp	.-112    	; 0x3c02 <main+0x5c>
            //softuart_puts_ln("123");
            now = get_time_s();
        }
        while(is_queue_not_empty())
        {
            get_message_from_mdm();
    3c72:	0e 94 0d 12 	call	0x241a	; 0x241a <get_message_from_mdm>
        while(is_queue_not_empty())
    3c76:	0e 94 da 28 	call	0x51b4	; 0x51b4 <is_queue_not_empty>
    3c7a:	81 11       	cpse	r24, r1
    3c7c:	fa cf       	rjmp	.-12     	; 0x3c72 <main+0xcc>
        reset_soft_wdt();
    3c7e:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <reset_soft_wdt>
        incoming_call_processing();
    3c82:	0e 94 27 1a 	call	0x344e	; 0x344e <incoming_call_processing>
        check_guard();
    3c86:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <check_guard>
        check_registration();
    3c8a:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <check_registration>
        check_deposit();
    3c8e:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <check_deposit>
        power_control();
    3c92:	0e 94 cb 09 	call	0x1396	; 0x1396 <power_control>
        check_temperature_smoke();
    3c96:	0e 94 a7 0b 	call	0x174e	; 0x174e <check_temperature_smoke>
        get_sms();
    3c9a:	0e 94 18 19 	call	0x3230	; 0x3230 <get_sms>
        if(get_time_s() > now + 10)
    3c9e:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <get_time_s>
    3ca2:	6d 8b       	std	Y+21, r22	; 0x15
    3ca4:	7e 8b       	std	Y+22, r23	; 0x16
    3ca6:	8f 8b       	std	Y+23, r24	; 0x17
    3ca8:	98 8f       	std	Y+24, r25	; 0x18
    3caa:	d3 01       	movw	r26, r6
    3cac:	c2 01       	movw	r24, r4
    3cae:	0a 96       	adiw	r24, 0x0a	; 10
    3cb0:	a1 1d       	adc	r26, r1
    3cb2:	b1 1d       	adc	r27, r1
    3cb4:	2d 89       	ldd	r18, Y+21	; 0x15
    3cb6:	3e 89       	ldd	r19, Y+22	; 0x16
    3cb8:	4f 89       	ldd	r20, Y+23	; 0x17
    3cba:	58 8d       	ldd	r21, Y+24	; 0x18
    3cbc:	82 17       	cp	r24, r18
    3cbe:	93 07       	cpc	r25, r19
    3cc0:	a4 07       	cpc	r26, r20
    3cc2:	b5 07       	cpc	r27, r21
    3cc4:	c0 f6       	brcc	.-80     	; 0x3c76 <main+0xd0>
            print_ram_free();
    3cc6:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <print_ram_free>
            sprintf(debug_buffer,"bat=%d", analog_read(BATTERY));
    3cca:	80 e0       	ldi	r24, 0x00	; 0
    3ccc:	0e 94 1a 08 	call	0x1034	; 0x1034 <analog_read>
    3cd0:	9f 93       	push	r25
    3cd2:	8f 93       	push	r24
    3cd4:	bf 92       	push	r11
    3cd6:	af 92       	push	r10
    3cd8:	1f 93       	push	r17
    3cda:	0f 93       	push	r16
    3cdc:	0e 94 84 2e 	call	0x5d08	; 0x5d08 <sprintf>
            softuart_puts_ln(debug_buffer);
    3ce0:	c8 01       	movw	r24, r16
    3ce2:	0e 94 f3 25 	call	0x4be6	; 0x4be6 <softuart_puts_ln>
            delay_ms(100);
    3ce6:	84 e6       	ldi	r24, 0x64	; 100
    3ce8:	90 e0       	ldi	r25, 0x00	; 0
    3cea:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <delay_ms>
            sprintf(debug_buffer2,"t_int=%dC", analog_read(INT_TEMP));
    3cee:	88 e0       	ldi	r24, 0x08	; 8
    3cf0:	0e 94 1a 08 	call	0x1034	; 0x1034 <analog_read>
    3cf4:	9f 93       	push	r25
    3cf6:	8f 93       	push	r24
    3cf8:	df 92       	push	r13
    3cfa:	cf 92       	push	r12
    3cfc:	ff 92       	push	r15
    3cfe:	ef 92       	push	r14
    3d00:	0e 94 84 2e 	call	0x5d08	; 0x5d08 <sprintf>
            softuart_puts_ln(debug_buffer2);
    3d04:	c7 01       	movw	r24, r14
    3d06:	0e 94 f3 25 	call	0x4be6	; 0x4be6 <softuart_puts_ln>
            now = get_time_s();
    3d0a:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <get_time_s>
    3d0e:	46 2e       	mov	r4, r22
    3d10:	57 2e       	mov	r5, r23
    3d12:	68 2e       	mov	r6, r24
    3d14:	79 2e       	mov	r7, r25
    3d16:	0f b6       	in	r0, 0x3f	; 63
    3d18:	f8 94       	cli
    3d1a:	de bf       	out	0x3e, r29	; 62
    3d1c:	0f be       	out	0x3f, r0	; 63
    3d1e:	cd bf       	out	0x3d, r28	; 61
    3d20:	aa cf       	rjmp	.-172    	; 0x3c76 <main+0xd0>

00003d22 <port_init>:
}

//*******************************************************************************************************************
void port_init(void)
{
    PinMode(PIN_PWR_GSM, OUTPUT);
    3d22:	57 9a       	sbi	0x0a, 7	; 10
    DigitalWrite(PIN_PWR_GSM, HIGH);
    3d24:	5f 9a       	sbi	0x0b, 7	; 11

    PinMode(PIN_BUZZER, OUTPUT);
    3d26:	21 9a       	sbi	0x04, 1	; 4
    DigitalWrite(PIN_BUZZER, LOW);
    3d28:	29 98       	cbi	0x05, 1	; 5

    PinMode(PIN_BEEP, OUTPUT);
    3d2a:	22 9a       	sbi	0x04, 2	; 4
    DigitalWrite(PIN_BEEP, LOW);
    3d2c:	2a 98       	cbi	0x05, 2	; 5
    PinMode(MOTION_SENSOR, INPUT);
    3d2e:	3b 98       	cbi	0x07, 3	; 7
    DigitalWrite(MOTION_SENSOR, LOW);
    3d30:	43 98       	cbi	0x08, 3	; 8
    PinMode(EXT_MOTION_SENSOR, INPUT);
    3d32:	55 98       	cbi	0x0a, 5	; 10
    DigitalWrite(EXT_MOTION_SENSOR, HIGH);
    3d34:	5d 9a       	sbi	0x0b, 5	; 11
    PinMode(DOOR, INPUT);
    3d36:	23 98       	cbi	0x04, 3	; 4
    DigitalWrite(DOOR, HIGH);
    3d38:	2b 9a       	sbi	0x05, 3	; 5
    PinMode(SMOKE_SENSOR, INPUT);
    3d3a:	3d 98       	cbi	0x07, 5	; 7
    DigitalWrite(SMOKE_SENSOR, HIGH);
    3d3c:	45 9a       	sbi	0x08, 5	; 8
    PinMode(EXT_POWER, INPUT);
    3d3e:	52 98       	cbi	0x0a, 2	; 10
    DigitalWrite(EXT_POWER, LOW);
    3d40:	5a 98       	cbi	0x0b, 2	; 11
    PinMode(RED_LED, OUTPUT);
    3d42:	25 9a       	sbi	0x04, 5	; 4
    DigitalWrite(RED_LED, LOW);
    3d44:	2d 98       	cbi	0x05, 5	; 5
    PinMode(GREEN_LED, OUTPUT);
    3d46:	24 9a       	sbi	0x04, 4	; 4
    DigitalWrite(GREEN_LED, LOW);
    3d48:	2c 98       	cbi	0x05, 4	; 5
    PinMode(BTN_GUARD, INPUT);
    3d4a:	3a 98       	cbi	0x07, 2	; 7
    DigitalWrite(BTN_GUARD, HIGH);
    3d4c:	42 9a       	sbi	0x08, 2	; 8
    PinMode(BTN_SOS, INPUT);
    3d4e:	54 98       	cbi	0x0a, 4	; 10
    DigitalWrite(BTN_SOS, HIGH);
    3d50:	5c 9a       	sbi	0x0b, 4	; 11
    PinMode(BTN_DEFAULT, INPUT);
    3d52:	3c 98       	cbi	0x07, 4	; 7
    DigitalWrite(BTN_DEFAULT, HIGH);
    3d54:	44 9a       	sbi	0x08, 4	; 8

    sensor_port_init();
    led_port_init();
    button_port_init();
    unused_port_init();
}
    3d56:	08 95       	ret

00003d58 <led_management>:
void led_management(void)
{
    static uint8_t i = 0;
    static uint8_t j = 0;

    if(get_time_from_button_s() < 0xFFFF)
    3d58:	0e 94 94 28 	call	0x5128	; 0x5128 <get_time_from_button_s>
    3d5c:	01 96       	adiw	r24, 0x01	; 1
    3d5e:	79 f0       	breq	.+30     	; 0x3d7e <led_management+0x26>
    {
        i++;
    3d60:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <i.14>
    3d64:	8f 5f       	subi	r24, 0xFF	; 255
    3d66:	80 93 eb 03 	sts	0x03EB, r24	; 0x8003eb <i.14>
        if(i > 30) //every 300ms
    3d6a:	8f 31       	cpi	r24, 0x1F	; 31
    3d6c:	30 f0       	brcs	.+12     	; 0x3d7a <led_management+0x22>
        {
            DigitalLevelToggle(RED_LED);
    3d6e:	85 b1       	in	r24, 0x05	; 5
    3d70:	90 e2       	ldi	r25, 0x20	; 32
    3d72:	89 27       	eor	r24, r25
    3d74:	85 b9       	out	0x05, r24	; 5
            i = 0;
    3d76:	10 92 eb 03 	sts	0x03EB, r1	; 0x8003eb <i.14>
        }
        DigitalWrite(GREEN_LED, LOW);
    3d7a:	2c 98       	cbi	0x05, 4	; 5
    3d7c:	08 95       	ret
    }
    else if(get_guard() == 1)
    3d7e:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <get_guard>
    3d82:	81 30       	cpi	r24, 0x01	; 1
    3d84:	79 f4       	brne	.+30     	; 0x3da4 <led_management+0x4c>
    {
        j++;
    3d86:	80 91 ea 03 	lds	r24, 0x03EA	; 0x8003ea <j.13>
    3d8a:	8f 5f       	subi	r24, 0xFF	; 255
    3d8c:	80 93 ea 03 	sts	0x03EA, r24	; 0x8003ea <j.13>
        if(j > 100) //every 1 sec
    3d90:	85 36       	cpi	r24, 0x65	; 101
    3d92:	30 f0       	brcs	.+12     	; 0x3da0 <led_management+0x48>
        {
            DigitalLevelToggle(RED_LED);
    3d94:	85 b1       	in	r24, 0x05	; 5
    3d96:	90 e2       	ldi	r25, 0x20	; 32
    3d98:	89 27       	eor	r24, r25
    3d9a:	85 b9       	out	0x05, r24	; 5
            j = 0;
    3d9c:	10 92 ea 03 	sts	0x03EA, r1	; 0x8003ea <j.13>
        }
        DigitalWrite(GREEN_LED, LOW);
    3da0:	2c 98       	cbi	0x05, 4	; 5
    3da2:	08 95       	ret

    }
    else if(get_guard() == 0)
    3da4:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <get_guard>
    3da8:	81 11       	cpse	r24, r1
    {
        DigitalWrite(RED_LED, LOW);
        led_gsm();
    }
}
    3daa:	08 95       	ret
        DigitalWrite(RED_LED, LOW);
    3dac:	2d 98       	cbi	0x05, 5	; 5
        led_gsm();
    3dae:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <led_gsm>
}
    3db2:	fb cf       	rjmp	.-10     	; 0x3daa <led_management+0x52>

00003db4 <check_single_sensor>:
    static uint8_t cnt = 0;
    static uint8_t pause_count = 0;
    char motion;

    motion = is_single_sensor();
    if(motion && pause_count == 0)
    3db4:	33 9b       	sbis	0x06, 3	; 6
    3db6:	12 c0       	rjmp	.+36     	; 0x3ddc <check_single_sensor+0x28>
    3db8:	80 91 e9 03 	lds	r24, 0x03E9	; 0x8003e9 <pause_count.12>
    3dbc:	81 11       	cpse	r24, r1
    3dbe:	17 c0       	rjmp	.+46     	; 0x3dee <check_single_sensor+0x3a>
    {
        cnt++;
    3dc0:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <cnt.11>
    3dc4:	8f 5f       	subi	r24, 0xFF	; 255
    3dc6:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <cnt.11>
        if(cnt >= 3)
    3dca:	83 30       	cpi	r24, 0x03	; 3
    3dcc:	68 f0       	brcs	.+26     	; 0x3de8 <check_single_sensor+0x34>
        {
            single_motion_detected = 1;
    3dce:	81 e0       	ldi	r24, 0x01	; 1
    3dd0:	80 93 ef 03 	sts	0x03EF, r24	; 0x8003ef <single_motion_detected>
            pause_count = 2;
            cnt = 0;
    3dd4:	10 92 e8 03 	sts	0x03E8, r1	; 0x8003e8 <cnt.11>
    else
    {
        cnt =0;

    }
    if(pause_count > 0)
    3dd8:	82 e0       	ldi	r24, 0x02	; 2
    3dda:	0d c0       	rjmp	.+26     	; 0x3df6 <check_single_sensor+0x42>
        cnt =0;
    3ddc:	10 92 e8 03 	sts	0x03E8, r1	; 0x8003e8 <cnt.11>
    if(pause_count > 0)
    3de0:	80 91 e9 03 	lds	r24, 0x03E9	; 0x8003e9 <pause_count.12>
    3de4:	81 11       	cpse	r24, r1
    3de6:	07 c0       	rjmp	.+14     	; 0x3df6 <check_single_sensor+0x42>
        pause_count--;

    }
    else
    {
        single_motion_detected = 0;
    3de8:	10 92 ef 03 	sts	0x03EF, r1	; 0x8003ef <single_motion_detected>
    }
}
    3dec:	08 95       	ret
        cnt =0;
    3dee:	10 92 e8 03 	sts	0x03E8, r1	; 0x8003e8 <cnt.11>
    if(pause_count > 0)
    3df2:	80 91 e9 03 	lds	r24, 0x03E9	; 0x8003e9 <pause_count.12>
        pause_count--;
    3df6:	81 50       	subi	r24, 0x01	; 1
    3df8:	80 93 e9 03 	sts	0x03E9, r24	; 0x8003e9 <pause_count.12>
    3dfc:	08 95       	ret

00003dfe <get_single_motion_detected>:
///***************************************************************************************************
uint8_t get_single_motion_detected(void)
{
    return single_motion_detected;
}
    3dfe:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <single_motion_detected>
    3e02:	08 95       	ret

00003e04 <is_btn_rst_pressed>:

}
////*******************************************************************************************************************
uint8_t is_btn_rst_pressed(void)
{
    if(DigitalRead(BTN_DEFAULT))
    3e04:	86 b1       	in	r24, 0x06	; 6
    3e06:	82 95       	swap	r24
    3e08:	81 70       	andi	r24, 0x01	; 1
    else
    {
        return 1;
    }

}
    3e0a:	91 e0       	ldi	r25, 0x01	; 1
    3e0c:	89 27       	eor	r24, r25
    3e0e:	08 95       	ret

00003e10 <check_button>:
    static uint8_t button_state = 0;
    static uint8_t press_sos_button = 0;
    static uint8_t button_sos_state = 0;
    static uint8_t sos_state = 0;

    if(is_btn_guard_pressed())
    3e10:	32 9b       	sbis	0x06, 2	; 6
    3e12:	14 c0       	rjmp	.+40     	; 0x3e3c <check_button+0x2c>
        }

    }
    else
    {
        press_button = 0;
    3e14:	10 92 e7 03 	sts	0x03E7, r1	; 0x8003e7 <press_button.10>
        button_state = 0;
    3e18:	10 92 e6 03 	sts	0x03E6, r1	; 0x8003e6 <button_state.9>
    }

    if(sos_state == 1)
    3e1c:	80 91 e5 03 	lds	r24, 0x03E5	; 0x8003e5 <sos_state.8>
    3e20:	81 30       	cpi	r24, 0x01	; 1
    3e22:	09 f4       	brne	.+2      	; 0x3e26 <check_button+0x16>
    3e24:	61 c0       	rjmp	.+194    	; 0x3ee8 <check_button+0xd8>
        return;
    if(is_btn_sos_pressed())
    3e26:	4c 99       	sbic	0x09, 4	; 9
    3e28:	5b c0       	rjmp	.+182    	; 0x3ee0 <check_button+0xd0>
    {

        if(press_sos_button < 10)
    3e2a:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <press_sos_button.7>
    3e2e:	8a 30       	cpi	r24, 0x0A	; 10
    3e30:	08 f0       	brcs	.+2      	; 0x3e34 <check_button+0x24>
    3e32:	49 c0       	rjmp	.+146    	; 0x3ec6 <check_button+0xb6>
            press_sos_button++;
    3e34:	8f 5f       	subi	r24, 0xFF	; 255
    3e36:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <press_sos_button.7>
    3e3a:	08 95       	ret
        if(get_guard() == 0)
    3e3c:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <get_guard>
    3e40:	81 11       	cpse	r24, r1
    3e42:	07 c0       	rjmp	.+14     	; 0x3e52 <check_button+0x42>
            if(press_button < 15)
    3e44:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <press_button.10>
    3e48:	8f 30       	cpi	r24, 0x0F	; 15
    3e4a:	78 f4       	brcc	.+30     	; 0x3e6a <check_button+0x5a>
                press_button++;
    3e4c:	8f 5f       	subi	r24, 0xFF	; 255
    3e4e:	80 93 e7 03 	sts	0x03E7, r24	; 0x8003e7 <press_button.10>
        if(get_guard() == 1 || get_time_from_button_s() != 0xFFFF)
    3e52:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <get_guard>
    3e56:	81 30       	cpi	r24, 0x01	; 1
    3e58:	d1 f4       	brne	.+52     	; 0x3e8e <check_button+0x7e>
            if(press_button < 5)
    3e5a:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <press_button.10>
    3e5e:	85 30       	cpi	r24, 0x05	; 5
    3e60:	d8 f4       	brcc	.+54     	; 0x3e98 <check_button+0x88>
                press_button++;
    3e62:	8f 5f       	subi	r24, 0xFF	; 255
    3e64:	80 93 e7 03 	sts	0x03E7, r24	; 0x8003e7 <press_button.10>
    3e68:	d9 cf       	rjmp	.-78     	; 0x3e1c <check_button+0xc>
            else if(button_state == 0)
    3e6a:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <button_state.9>
    3e6e:	81 11       	cpse	r24, r1
    3e70:	f0 cf       	rjmp	.-32     	; 0x3e52 <check_button+0x42>
                set_time_from_button_s(0);
    3e72:	90 e0       	ldi	r25, 0x00	; 0
    3e74:	80 e0       	ldi	r24, 0x00	; 0
    3e76:	0e 94 8c 28 	call	0x5118	; 0x5118 <set_time_from_button_s>
                button_state = 1;
    3e7a:	81 e0       	ldi	r24, 0x01	; 1
    3e7c:	80 93 e6 03 	sts	0x03E6, r24	; 0x8003e6 <button_state.9>
                EEPROM_update();
    3e80:	0e 94 c8 10 	call	0x2190	; 0x2190 <EEPROM_update>
                beep_non_block(100);
    3e84:	84 e6       	ldi	r24, 0x64	; 100
    3e86:	90 e0       	ldi	r25, 0x00	; 0
    3e88:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <beep_non_block>
    3e8c:	e2 cf       	rjmp	.-60     	; 0x3e52 <check_button+0x42>
        if(get_guard() == 1 || get_time_from_button_s() != 0xFFFF)
    3e8e:	0e 94 94 28 	call	0x5128	; 0x5128 <get_time_from_button_s>
    3e92:	01 96       	adiw	r24, 0x01	; 1
    3e94:	11 f7       	brne	.-60     	; 0x3e5a <check_button+0x4a>
    3e96:	c2 cf       	rjmp	.-124    	; 0x3e1c <check_button+0xc>
            else if(button_state == 0)
    3e98:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <button_state.9>
    3e9c:	81 11       	cpse	r24, r1
    3e9e:	be cf       	rjmp	.-132    	; 0x3e1c <check_button+0xc>
                buzzer_stop();
    3ea0:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <buzzer_stop>
                set_guard(0);
    3ea4:	80 e0       	ldi	r24, 0x00	; 0
    3ea6:	0e 94 e6 10 	call	0x21cc	; 0x21cc <set_guard>
                set_time_from_button_s(0xFFFF);
    3eaa:	8f ef       	ldi	r24, 0xFF	; 255
    3eac:	9f ef       	ldi	r25, 0xFF	; 255
    3eae:	0e 94 8c 28 	call	0x5118	; 0x5118 <set_time_from_button_s>
                button_state = 1;
    3eb2:	81 e0       	ldi	r24, 0x01	; 1
    3eb4:	80 93 e6 03 	sts	0x03E6, r24	; 0x8003e6 <button_state.9>
                EEPROM_update();
    3eb8:	0e 94 c8 10 	call	0x2190	; 0x2190 <EEPROM_update>
                beep_non_block(100);
    3ebc:	84 e6       	ldi	r24, 0x64	; 100
    3ebe:	90 e0       	ldi	r25, 0x00	; 0
    3ec0:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <beep_non_block>
    3ec4:	ab cf       	rjmp	.-170    	; 0x3e1c <check_button+0xc>
        else if(button_sos_state == 0)
    3ec6:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <button_sos_state.6>
    3eca:	81 11       	cpse	r24, r1
    3ecc:	0d c0       	rjmp	.+26     	; 0x3ee8 <check_button+0xd8>
        {
            button_sos_state = 1;
    3ece:	81 e0       	ldi	r24, 0x01	; 1
    3ed0:	80 93 e3 03 	sts	0x03E3, r24	; 0x8003e3 <button_sos_state.6>
            sos_state = 1;
    3ed4:	80 93 e5 03 	sts	0x03E5, r24	; 0x8003e5 <sos_state.8>
            set_flag_alarm(FLAG_ALARM_SOS);
    3ed8:	8c e0       	ldi	r24, 0x0C	; 12
    3eda:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <set_flag_alarm>
    3ede:	08 95       	ret
        }

    }
    else
    {
        press_sos_button = 0;
    3ee0:	10 92 e4 03 	sts	0x03E4, r1	; 0x8003e4 <press_sos_button.7>
        button_sos_state = 0;
    3ee4:	10 92 e3 03 	sts	0x03E3, r1	; 0x8003e3 <button_sos_state.6>
    }
}
    3ee8:	08 95       	ret

00003eea <check_door_sensor>:
    static uint8_t cnt = 0;
    static uint8_t pause_count = 0;
    char motion;

    motion = is_door_sensor();
    if(motion && pause_count == 0)
    3eea:	1b 9b       	sbis	0x03, 3	; 3
    3eec:	12 c0       	rjmp	.+36     	; 0x3f12 <check_door_sensor+0x28>
    3eee:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <pause_count.5>
    3ef2:	81 11       	cpse	r24, r1
    3ef4:	17 c0       	rjmp	.+46     	; 0x3f24 <check_door_sensor+0x3a>
    {
        cnt++;
    3ef6:	80 91 e1 03 	lds	r24, 0x03E1	; 0x8003e1 <cnt.4>
    3efa:	8f 5f       	subi	r24, 0xFF	; 255
    3efc:	80 93 e1 03 	sts	0x03E1, r24	; 0x8003e1 <cnt.4>
        if(cnt >= 20)
    3f00:	84 31       	cpi	r24, 0x14	; 20
    3f02:	68 f0       	brcs	.+26     	; 0x3f1e <check_door_sensor+0x34>
        {
            flag_open_door = 1;
    3f04:	81 e0       	ldi	r24, 0x01	; 1
    3f06:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <flag_open_door>
            pause_count = 10;
            cnt = 0;
    3f0a:	10 92 e1 03 	sts	0x03E1, r1	; 0x8003e1 <cnt.4>
    else
    {
        cnt =0;

    }
    if(pause_count > 0)
    3f0e:	8a e0       	ldi	r24, 0x0A	; 10
    3f10:	0d c0       	rjmp	.+26     	; 0x3f2c <check_door_sensor+0x42>
        cnt =0;
    3f12:	10 92 e1 03 	sts	0x03E1, r1	; 0x8003e1 <cnt.4>
    if(pause_count > 0)
    3f16:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <pause_count.5>
    3f1a:	81 11       	cpse	r24, r1
    3f1c:	07 c0       	rjmp	.+14     	; 0x3f2c <check_door_sensor+0x42>
        pause_count--;

    }
    else
    {
        flag_open_door = 0;
    3f1e:	10 92 ee 03 	sts	0x03EE, r1	; 0x8003ee <flag_open_door>
    }
}
    3f22:	08 95       	ret
        cnt =0;
    3f24:	10 92 e1 03 	sts	0x03E1, r1	; 0x8003e1 <cnt.4>
    if(pause_count > 0)
    3f28:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <pause_count.5>
        pause_count--;
    3f2c:	81 50       	subi	r24, 0x01	; 1
    3f2e:	80 93 e2 03 	sts	0x03E2, r24	; 0x8003e2 <pause_count.5>
    3f32:	08 95       	ret

00003f34 <get_flag_open_door>:

//*****************************************************************************
uint8_t get_flag_open_door(void)
{
    return flag_open_door;
}
    3f34:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <flag_open_door>
    3f38:	08 95       	ret

00003f3a <check_ext_mot_sensor>:
    static uint8_t cnt = 0;
    static uint8_t pause_count = 0;
    char motion;

    motion = is_ext_mot_sensor();
    if(motion && pause_count == 0)
    3f3a:	4d 9b       	sbis	0x09, 5	; 9
    3f3c:	12 c0       	rjmp	.+36     	; 0x3f62 <check_ext_mot_sensor+0x28>
    3f3e:	80 91 e0 03 	lds	r24, 0x03E0	; 0x8003e0 <pause_count.3>
    3f42:	81 11       	cpse	r24, r1
    3f44:	17 c0       	rjmp	.+46     	; 0x3f74 <check_ext_mot_sensor+0x3a>
    {
        cnt++;
    3f46:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <cnt.2>
    3f4a:	8f 5f       	subi	r24, 0xFF	; 255
    3f4c:	80 93 df 03 	sts	0x03DF, r24	; 0x8003df <cnt.2>
        if(cnt >= 5)
    3f50:	85 30       	cpi	r24, 0x05	; 5
    3f52:	68 f0       	brcs	.+26     	; 0x3f6e <check_ext_mot_sensor+0x34>
        {
            flag_ext_mot_sens_detected = 1;
    3f54:	81 e0       	ldi	r24, 0x01	; 1
    3f56:	80 93 ed 03 	sts	0x03ED, r24	; 0x8003ed <flag_ext_mot_sens_detected>
            pause_count = 3;
            cnt = 0;
    3f5a:	10 92 df 03 	sts	0x03DF, r1	; 0x8003df <cnt.2>
    else
    {
        cnt =0;

    }
    if(pause_count > 0)
    3f5e:	83 e0       	ldi	r24, 0x03	; 3
    3f60:	0d c0       	rjmp	.+26     	; 0x3f7c <check_ext_mot_sensor+0x42>
        cnt =0;
    3f62:	10 92 df 03 	sts	0x03DF, r1	; 0x8003df <cnt.2>
    if(pause_count > 0)
    3f66:	80 91 e0 03 	lds	r24, 0x03E0	; 0x8003e0 <pause_count.3>
    3f6a:	81 11       	cpse	r24, r1
    3f6c:	07 c0       	rjmp	.+14     	; 0x3f7c <check_ext_mot_sensor+0x42>
        pause_count--;

    }
    else
    {
        flag_ext_mot_sens_detected = 0;
    3f6e:	10 92 ed 03 	sts	0x03ED, r1	; 0x8003ed <flag_ext_mot_sens_detected>
    }
}
    3f72:	08 95       	ret
        cnt =0;
    3f74:	10 92 df 03 	sts	0x03DF, r1	; 0x8003df <cnt.2>
    if(pause_count > 0)
    3f78:	80 91 e0 03 	lds	r24, 0x03E0	; 0x8003e0 <pause_count.3>
        pause_count--;
    3f7c:	81 50       	subi	r24, 0x01	; 1
    3f7e:	80 93 e0 03 	sts	0x03E0, r24	; 0x8003e0 <pause_count.3>
    3f82:	08 95       	ret

00003f84 <get_flag_ext_mot_sens_detected>:

//*****************************************************************************
uint8_t get_flag_ext_mot_sens_detected(void)
{
    return flag_ext_mot_sens_detected;
}
    3f84:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <flag_ext_mot_sens_detected>
    3f88:	08 95       	ret

00003f8a <check_smoke_sensor>:
    static uint8_t cnt = 0;
    static uint8_t pause_count = 0;
    char motion;

    motion = is_smoke_sensor();
    if(motion && pause_count == 0)
    3f8a:	35 9b       	sbis	0x06, 5	; 6
    3f8c:	12 c0       	rjmp	.+36     	; 0x3fb2 <check_smoke_sensor+0x28>
    3f8e:	80 91 de 03 	lds	r24, 0x03DE	; 0x8003de <pause_count.1>
    3f92:	81 11       	cpse	r24, r1
    3f94:	17 c0       	rjmp	.+46     	; 0x3fc4 <check_smoke_sensor+0x3a>
    {
        cnt++;
    3f96:	80 91 dd 03 	lds	r24, 0x03DD	; 0x8003dd <cnt.0>
    3f9a:	8f 5f       	subi	r24, 0xFF	; 255
    3f9c:	80 93 dd 03 	sts	0x03DD, r24	; 0x8003dd <cnt.0>
        if(cnt >= 10)
    3fa0:	8a 30       	cpi	r24, 0x0A	; 10
    3fa2:	68 f0       	brcs	.+26     	; 0x3fbe <check_smoke_sensor+0x34>
        {
            flag_smoke_sensor = 1;
    3fa4:	81 e0       	ldi	r24, 0x01	; 1
    3fa6:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <flag_smoke_sensor>
            pause_count = 5;
            cnt = 0;
    3faa:	10 92 dd 03 	sts	0x03DD, r1	; 0x8003dd <cnt.0>
    else
    {
        cnt =0;

    }
    if(pause_count > 0)
    3fae:	85 e0       	ldi	r24, 0x05	; 5
    3fb0:	0d c0       	rjmp	.+26     	; 0x3fcc <check_smoke_sensor+0x42>
        cnt =0;
    3fb2:	10 92 dd 03 	sts	0x03DD, r1	; 0x8003dd <cnt.0>
    if(pause_count > 0)
    3fb6:	80 91 de 03 	lds	r24, 0x03DE	; 0x8003de <pause_count.1>
    3fba:	81 11       	cpse	r24, r1
    3fbc:	07 c0       	rjmp	.+14     	; 0x3fcc <check_smoke_sensor+0x42>
        pause_count--;

    }
    else
    {
        flag_smoke_sensor = 0;
    3fbe:	10 92 ec 03 	sts	0x03EC, r1	; 0x8003ec <flag_smoke_sensor>
    }
}
    3fc2:	08 95       	ret
        cnt =0;
    3fc4:	10 92 dd 03 	sts	0x03DD, r1	; 0x8003dd <cnt.0>
    if(pause_count > 0)
    3fc8:	80 91 de 03 	lds	r24, 0x03DE	; 0x8003de <pause_count.1>
        pause_count--;
    3fcc:	81 50       	subi	r24, 0x01	; 1
    3fce:	80 93 de 03 	sts	0x03DE, r24	; 0x8003de <pause_count.1>
    3fd2:	08 95       	ret

00003fd4 <get_flag_smoke_sensor>:

//*****************************************************************************
uint8_t get_flag_smoke_sensor(void)
{
    return flag_smoke_sensor;
}
    3fd4:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <flag_smoke_sensor>
    3fd8:	08 95       	ret

00003fda <set_phones>:

//*******************************************************************************************************************
// принимает список телефонов через запятую, адрес назначения и максимальный размер области назначения

static char* set_phones(char *phones, char *dest, char max_num)
{
    3fda:	af 92       	push	r10
    3fdc:	bf 92       	push	r11
    3fde:	cf 92       	push	r12
    3fe0:	df 92       	push	r13
    3fe2:	ef 92       	push	r14
    3fe4:	ff 92       	push	r15
    3fe6:	0f 93       	push	r16
    3fe8:	1f 93       	push	r17
    3fea:	cf 93       	push	r28
    3fec:	df 93       	push	r29
    3fee:	08 2f       	mov	r16, r24
    3ff0:	19 2f       	mov	r17, r25
    3ff2:	e6 2e       	mov	r14, r22
    3ff4:	f7 2e       	mov	r15, r23
    3ff6:	d4 2f       	mov	r29, r20
    uint8_t n, i;
    char *ptr = phones;
    n=0;

    for(uint8_t j = 0; j < TOTAL_ADMIN_NUMBER; j++)
    3ff8:	c0 e0       	ldi	r28, 0x00	; 0
    {
        get_phones(j)[0] = 0;
    3ffa:	8c 2f       	mov	r24, r28
    3ffc:	0e 94 0d 11 	call	0x221a	; 0x221a <get_phones>
    4000:	fc 01       	movw	r30, r24
    4002:	10 82       	st	Z, r1
    for(uint8_t j = 0; j < TOTAL_ADMIN_NUMBER; j++)
    4004:	cf 5f       	subi	r28, 0xFF	; 255
    4006:	c5 30       	cpi	r28, 0x05	; 5
    4008:	c1 f7       	brne	.-16     	; 0x3ffa <set_phones+0x20>
    char *ptr = phones;
    400a:	68 01       	movw	r12, r16
    n=0;
    400c:	c0 e0       	ldi	r28, 0x00	; 0
    }
    while(check_phone_string(ptr))
    {
        n++;
        if(n > max_num)
    400e:	ad 2e       	mov	r10, r29
    4010:	0d 2e       	mov	r0, r29
    4012:	00 0c       	add	r0, r0
    4014:	bb 08       	sbc	r11, r11
    while(check_phone_string(ptr))
    4016:	c6 01       	movw	r24, r12
    4018:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <check_phone_string>
    401c:	88 23       	and	r24, r24
    401e:	89 f0       	breq	.+34     	; 0x4042 <set_phones+0x68>
        n++;
    4020:	cf 5f       	subi	r28, 0xFF	; 255
        if(n > max_num)
    4022:	ca 15       	cp	r28, r10
    4024:	1b 04       	cpc	r1, r11
    4026:	11 f0       	breq	.+4      	; 0x402c <set_phones+0x52>
    4028:	0c f0       	brlt	.+2      	; 0x402c <set_phones+0x52>
    402a:	5a c0       	rjmp	.+180    	; 0x40e0 <set_phones+0x106>
            return 0;
        ptr+=13;
        if(*ptr == ';')
    402c:	f6 01       	movw	r30, r12
    402e:	85 85       	ldd	r24, Z+13	; 0x0d
    4030:	8b 33       	cpi	r24, 0x3B	; 59
    4032:	39 f0       	breq	.+14     	; 0x4042 <set_phones+0x68>
            break;
        else if(*ptr == ',')
    4034:	8c 32       	cpi	r24, 0x2C	; 44
    4036:	09 f0       	breq	.+2      	; 0x403a <set_phones+0x60>
    4038:	56 c0       	rjmp	.+172    	; 0x40e6 <set_phones+0x10c>
        {
            ptr++;
    403a:	fe e0       	ldi	r31, 0x0E	; 14
    403c:	cf 0e       	add	r12, r31
    403e:	d1 1c       	adc	r13, r1
            continue;
    4040:	ea cf       	rjmp	.-44     	; 0x4016 <set_phones+0x3c>
        }
        else
            return 0;
    }
    ptr = phones;
    for(i=0; i<n; i++)
    4042:	cc 23       	and	r28, r28
    4044:	31 f1       	breq	.+76     	; 0x4092 <set_phones+0xb8>
    4046:	c7 01       	movw	r24, r14
    4048:	6f ef       	ldi	r22, 0xFF	; 255
    404a:	6c 0f       	add	r22, r28
    404c:	27 e0       	ldi	r18, 0x07	; 7
    404e:	62 9f       	mul	r22, r18
    4050:	b0 01       	movw	r22, r0
    4052:	11 24       	eor	r1, r1
    4054:	66 0f       	add	r22, r22
    4056:	77 1f       	adc	r23, r23
    4058:	97 01       	movw	r18, r14
    405a:	22 5f       	subi	r18, 0xF2	; 242
    405c:	3f 4f       	sbci	r19, 0xFF	; 255
    405e:	62 0f       	add	r22, r18
    4060:	73 1f       	adc	r23, r19
    ptr = phones;
    4062:	98 01       	movw	r18, r16
    {
        memcpy(&dest[i*14], ptr, 13);
    4064:	4d e0       	ldi	r20, 0x0D	; 13
    4066:	f9 01       	movw	r30, r18
    4068:	dc 01       	movw	r26, r24
    406a:	01 90       	ld	r0, Z+
    406c:	0d 92       	st	X+, r0
    406e:	4a 95       	dec	r20
    4070:	e1 f7       	brne	.-8      	; 0x406a <set_phones+0x90>
        dest[i*14 + 13] = 0;
    4072:	fc 01       	movw	r30, r24
    4074:	15 86       	std	Z+13, r1	; 0x0d
        ptr+=14;
    4076:	22 5f       	subi	r18, 0xF2	; 242
    4078:	3f 4f       	sbci	r19, 0xFF	; 255
    for(i=0; i<n; i++)
    407a:	0e 96       	adiw	r24, 0x0e	; 14
    407c:	86 17       	cp	r24, r22
    407e:	97 07       	cpc	r25, r23
    4080:	89 f7       	brne	.-30     	; 0x4064 <set_phones+0x8a>
        ptr+=14;
    4082:	f7 e0       	ldi	r31, 0x07	; 7
    4084:	cf 9f       	mul	r28, r31
    4086:	c0 01       	movw	r24, r0
    4088:	11 24       	eor	r1, r1
    408a:	88 0f       	add	r24, r24
    408c:	99 1f       	adc	r25, r25
    408e:	08 0f       	add	r16, r24
    4090:	19 1f       	adc	r17, r25
    }
    memset(&dest[n*14], 0, 14*(max_num-n));
    4092:	2c 2f       	mov	r18, r28
    4094:	30 e0       	ldi	r19, 0x00	; 0
    4096:	6d 2f       	mov	r22, r29
    4098:	dd 0f       	add	r29, r29
    409a:	77 0b       	sbc	r23, r23
    409c:	62 1b       	sub	r22, r18
    409e:	73 0b       	sbc	r23, r19
    40a0:	ab 01       	movw	r20, r22
    40a2:	44 0f       	add	r20, r20
    40a4:	55 1f       	adc	r21, r21
    40a6:	44 0f       	add	r20, r20
    40a8:	55 1f       	adc	r21, r21
    40aa:	44 0f       	add	r20, r20
    40ac:	55 1f       	adc	r21, r21
    40ae:	46 1b       	sub	r20, r22
    40b0:	57 0b       	sbc	r21, r23
    40b2:	44 0f       	add	r20, r20
    40b4:	55 1f       	adc	r21, r21
    40b6:	c9 01       	movw	r24, r18
    40b8:	88 0f       	add	r24, r24
    40ba:	99 1f       	adc	r25, r25
    40bc:	88 0f       	add	r24, r24
    40be:	99 1f       	adc	r25, r25
    40c0:	88 0f       	add	r24, r24
    40c2:	99 1f       	adc	r25, r25
    40c4:	82 1b       	sub	r24, r18
    40c6:	93 0b       	sbc	r25, r19
    40c8:	88 0f       	add	r24, r24
    40ca:	99 1f       	adc	r25, r25
    40cc:	70 e0       	ldi	r23, 0x00	; 0
    40ce:	60 e0       	ldi	r22, 0x00	; 0
    40d0:	8e 0d       	add	r24, r14
    40d2:	9f 1d       	adc	r25, r15
    40d4:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <memset>
    set_admin_mode(1);
    40d8:	81 e0       	ldi	r24, 0x01	; 1
    40da:	0e 94 1c 11 	call	0x2238	; 0x2238 <set_admin_mode>
    return ptr;
    40de:	05 c0       	rjmp	.+10     	; 0x40ea <set_phones+0x110>
            return 0;
    40e0:	10 e0       	ldi	r17, 0x00	; 0
    40e2:	00 e0       	ldi	r16, 0x00	; 0
    40e4:	02 c0       	rjmp	.+4      	; 0x40ea <set_phones+0x110>
            return 0;
    40e6:	10 e0       	ldi	r17, 0x00	; 0
    40e8:	00 e0       	ldi	r16, 0x00	; 0
}
    40ea:	c8 01       	movw	r24, r16
    40ec:	df 91       	pop	r29
    40ee:	cf 91       	pop	r28
    40f0:	1f 91       	pop	r17
    40f2:	0f 91       	pop	r16
    40f4:	ff 90       	pop	r15
    40f6:	ef 90       	pop	r14
    40f8:	df 90       	pop	r13
    40fa:	cf 90       	pop	r12
    40fc:	bf 90       	pop	r11
    40fe:	af 90       	pop	r10
    4100:	08 95       	ret

00004102 <find_phone_in_phone_list>:
{
    4102:	0f 93       	push	r16
    4104:	1f 93       	push	r17
    4106:	cf 93       	push	r28
    4108:	df 93       	push	r29
    410a:	18 2f       	mov	r17, r24
    410c:	09 2f       	mov	r16, r25
    410e:	d6 2f       	mov	r29, r22
    if(lst==ADMIN_LIST)
    4110:	61 30       	cpi	r22, 0x01	; 1
    4112:	f9 f4       	brne	.+62     	; 0x4152 <find_phone_in_phone_list+0x50>
        for(i=0; i<TOTAL_ADMIN_NUMBER; i++)
    4114:	c0 e0       	ldi	r28, 0x00	; 0
    4116:	03 c0       	rjmp	.+6      	; 0x411e <find_phone_in_phone_list+0x1c>
    4118:	cf 5f       	subi	r28, 0xFF	; 255
    411a:	c5 30       	cpi	r28, 0x05	; 5
    411c:	d1 f0       	breq	.+52     	; 0x4152 <find_phone_in_phone_list+0x50>
            if(get_phones(i)[0] == '+')
    411e:	8c 2f       	mov	r24, r28
    4120:	0e 94 0d 11 	call	0x221a	; 0x221a <get_phones>
    4124:	fc 01       	movw	r30, r24
    4126:	20 81       	ld	r18, Z
    4128:	2b 32       	cpi	r18, 0x2B	; 43
    412a:	b1 f7       	brne	.-20     	; 0x4118 <find_phone_in_phone_list+0x16>
                if(memcmp(phone, &get_phones(i)[0], 13) == 0)
    412c:	8c 2f       	mov	r24, r28
    412e:	0e 94 0d 11 	call	0x221a	; 0x221a <get_phones>
    4132:	68 2f       	mov	r22, r24
    4134:	79 2f       	mov	r23, r25
    4136:	4d e0       	ldi	r20, 0x0D	; 13
    4138:	50 e0       	ldi	r21, 0x00	; 0
    413a:	81 2f       	mov	r24, r17
    413c:	90 2f       	mov	r25, r16
    413e:	0e 94 e5 2d 	call	0x5bca	; 0x5bca <memcmp>
    4142:	89 2b       	or	r24, r25
    4144:	49 f7       	brne	.-46     	; 0x4118 <find_phone_in_phone_list+0x16>
                    softuart_puts_p(PSTR("phone ok"));
    4146:	8c e7       	ldi	r24, 0x7C	; 124
    4148:	98 e0       	ldi	r25, 0x08	; 8
    414a:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <softuart_puts_p>
                    return 1; // телефон найден в списке админов
    414e:	8d 2f       	mov	r24, r29
    4150:	05 c0       	rjmp	.+10     	; 0x415c <find_phone_in_phone_list+0x5a>
    softuart_puts_p(PSTR("not phone"));
    4152:	82 e7       	ldi	r24, 0x72	; 114
    4154:	98 e0       	ldi	r25, 0x08	; 8
    4156:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <softuart_puts_p>
    return 0;
    415a:	80 e0       	ldi	r24, 0x00	; 0
}
    415c:	df 91       	pop	r29
    415e:	cf 91       	pop	r28
    4160:	1f 91       	pop	r17
    4162:	0f 91       	pop	r16
    4164:	08 95       	ret

00004166 <process_sms_body>:
{
    4166:	2f 92       	push	r2
    4168:	3f 92       	push	r3
    416a:	4f 92       	push	r4
    416c:	5f 92       	push	r5
    416e:	6f 92       	push	r6
    4170:	7f 92       	push	r7
    4172:	8f 92       	push	r8
    4174:	9f 92       	push	r9
    4176:	af 92       	push	r10
    4178:	bf 92       	push	r11
    417a:	cf 92       	push	r12
    417c:	df 92       	push	r13
    417e:	ef 92       	push	r14
    4180:	ff 92       	push	r15
    4182:	0f 93       	push	r16
    4184:	1f 93       	push	r17
    4186:	cf 93       	push	r28
    4188:	df 93       	push	r29
    418a:	cd b7       	in	r28, 0x3d	; 61
    418c:	de b7       	in	r29, 0x3e	; 62
    418e:	c2 5a       	subi	r28, 0xA2	; 162
    4190:	d1 09       	sbc	r29, r1
    4192:	0f b6       	in	r0, 0x3f	; 63
    4194:	f8 94       	cli
    4196:	de bf       	out	0x3e, r29	; 62
    4198:	0f be       	out	0x3f, r0	; 63
    419a:	cd bf       	out	0x3d, r28	; 61
    419c:	08 2f       	mov	r16, r24
    419e:	19 2f       	mov	r17, r25
    if(memcmp_P(ptr, PSTR("set:"), 4) == 0)
    41a0:	44 e0       	ldi	r20, 0x04	; 4
    41a2:	50 e0       	ldi	r21, 0x00	; 0
    41a4:	6d e6       	ldi	r22, 0x6D	; 109
    41a6:	78 e0       	ldi	r23, 0x08	; 8
    41a8:	c8 01       	movw	r24, r16
    41aa:	0e 94 b9 2d 	call	0x5b72	; 0x5b72 <memcmp_P>
    41ae:	89 2b       	or	r24, r25
    41b0:	09 f4       	brne	.+2      	; 0x41b4 <process_sms_body+0x4e>
    41b2:	78 c0       	rjmp	.+240    	; 0x42a4 <process_sms_body+0x13e>
    else if(memcmp_P(ptr, PSTR("get:"), 4) == 0)
    41b4:	44 e0       	ldi	r20, 0x04	; 4
    41b6:	50 e0       	ldi	r21, 0x00	; 0
    41b8:	61 e5       	ldi	r22, 0x51	; 81
    41ba:	78 e0       	ldi	r23, 0x08	; 8
    41bc:	c8 01       	movw	r24, r16
    41be:	0e 94 b9 2d 	call	0x5b72	; 0x5b72 <memcmp_P>
    41c2:	89 2b       	or	r24, r25
    41c4:	09 f4       	brne	.+2      	; 0x41c8 <process_sms_body+0x62>
    41c6:	5d c2       	rjmp	.+1210   	; 0x4682 <process_sms_body+0x51c>
    else if(memcmp_P(ptr, PSTR("resetdefault;"), 13) == 0)
    41c8:	4d e0       	ldi	r20, 0x0D	; 13
    41ca:	50 e0       	ldi	r21, 0x00	; 0
    41cc:	64 e2       	ldi	r22, 0x24	; 36
    41ce:	78 e0       	ldi	r23, 0x08	; 8
    41d0:	c8 01       	movw	r24, r16
    41d2:	0e 94 b9 2d 	call	0x5b72	; 0x5b72 <memcmp_P>
    41d6:	89 2b       	or	r24, r25
    41d8:	09 f4       	brne	.+2      	; 0x41dc <process_sms_body+0x76>
    41da:	aa c3       	rjmp	.+1876   	; 0x4930 <process_sms_body+0x7ca>
    else if(memcmp_P(ptr, PSTR("reboot;"), 7) == 0)
    41dc:	47 e0       	ldi	r20, 0x07	; 7
    41de:	50 e0       	ldi	r21, 0x00	; 0
    41e0:	6c ec       	ldi	r22, 0xCC	; 204
    41e2:	77 e0       	ldi	r23, 0x07	; 7
    41e4:	c8 01       	movw	r24, r16
    41e6:	0e 94 b9 2d 	call	0x5b72	; 0x5b72 <memcmp_P>
    41ea:	89 2b       	or	r24, r25
    41ec:	09 f4       	brne	.+2      	; 0x41f0 <process_sms_body+0x8a>
    41ee:	c1 c3       	rjmp	.+1922   	; 0x4972 <process_sms_body+0x80c>
    else if(memcmp_P(ptr, PSTR("help;"), 5) == 0)
    41f0:	45 e0       	ldi	r20, 0x05	; 5
    41f2:	50 e0       	ldi	r21, 0x00	; 0
    41f4:	60 ea       	ldi	r22, 0xA0	; 160
    41f6:	77 e0       	ldi	r23, 0x07	; 7
    41f8:	c8 01       	movw	r24, r16
    41fa:	0e 94 b9 2d 	call	0x5b72	; 0x5b72 <memcmp_P>
    41fe:	89 2b       	or	r24, r25
    4200:	09 f4       	brne	.+2      	; 0x4204 <process_sms_body+0x9e>
    4202:	d3 c3       	rjmp	.+1958   	; 0x49aa <process_sms_body+0x844>
    else if(memcmp_P(ptr, PSTR("helpget;"), 8) == 0)
    4204:	48 e0       	ldi	r20, 0x08	; 8
    4206:	50 e0       	ldi	r21, 0x00	; 0
    4208:	69 e8       	ldi	r22, 0x89	; 137
    420a:	77 e0       	ldi	r23, 0x07	; 7
    420c:	c8 01       	movw	r24, r16
    420e:	0e 94 b9 2d 	call	0x5b72	; 0x5b72 <memcmp_P>
    4212:	89 2b       	or	r24, r25
    4214:	09 f4       	brne	.+2      	; 0x4218 <process_sms_body+0xb2>
    4216:	e2 c3       	rjmp	.+1988   	; 0x49dc <process_sms_body+0x876>
    else if(memcmp_P(ptr, PSTR("helpset;"), 8) == 0)
    4218:	48 e0       	ldi	r20, 0x08	; 8
    421a:	50 e0       	ldi	r21, 0x00	; 0
    421c:	62 e7       	ldi	r22, 0x72	; 114
    421e:	77 e0       	ldi	r23, 0x07	; 7
    4220:	c8 01       	movw	r24, r16
    4222:	0e 94 b9 2d 	call	0x5b72	; 0x5b72 <memcmp_P>
    4226:	89 2b       	or	r24, r25
    4228:	09 f4       	brne	.+2      	; 0x422c <process_sms_body+0xc6>
    422a:	f1 c3       	rjmp	.+2018   	; 0x4a0e <process_sms_body+0x8a8>
    else if(memcmp_P(ptr, PSTR("report;"), 7) == 0)
    422c:	47 e0       	ldi	r20, 0x07	; 7
    422e:	50 e0       	ldi	r21, 0x00	; 0
    4230:	6c e5       	ldi	r22, 0x5C	; 92
    4232:	77 e0       	ldi	r23, 0x07	; 7
    4234:	c8 01       	movw	r24, r16
    4236:	0e 94 b9 2d 	call	0x5b72	; 0x5b72 <memcmp_P>
    423a:	89 2b       	or	r24, r25
    423c:	09 f4       	brne	.+2      	; 0x4240 <process_sms_body+0xda>
    423e:	00 c4       	rjmp	.+2048   	; 0x4a40 <process_sms_body+0x8da>
    else if(memcmp_P(ptr, PSTR("phones="), 7) == 0)
    4240:	47 e0       	ldi	r20, 0x07	; 7
    4242:	50 e0       	ldi	r21, 0x00	; 0
    4244:	66 e4       	ldi	r22, 0x46	; 70
    4246:	77 e0       	ldi	r23, 0x07	; 7
    4248:	c8 01       	movw	r24, r16
    424a:	0e 94 b9 2d 	call	0x5b72	; 0x5b72 <memcmp_P>
    424e:	89 2b       	or	r24, r25
    4250:	09 f0       	breq	.+2      	; 0x4254 <process_sms_body+0xee>
    4252:	87 c0       	rjmp	.+270    	; 0x4362 <process_sms_body+0x1fc>
        if( get_admin_mode() == 0 || (find_phone_in_phone_list(get_phone_number(), ADMIN_LIST) == 1))
    4254:	0e 94 1f 11 	call	0x223e	; 0x223e <get_admin_mode>
    4258:	88 23       	and	r24, r24
    425a:	41 f0       	breq	.+16     	; 0x426c <process_sms_body+0x106>
    425c:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <get_phone_number>
    4260:	61 e0       	ldi	r22, 0x01	; 1
    4262:	0e 94 81 20 	call	0x4102	; 0x4102 <find_phone_in_phone_list>
    4266:	81 30       	cpi	r24, 0x01	; 1
    4268:	09 f0       	breq	.+2      	; 0x426c <process_sms_body+0x106>
    426a:	ff c3       	rjmp	.+2046   	; 0x4a6a <process_sms_body+0x904>
            ptr = set_phones(ptr, &get_phones(0)[0], TOTAL_ADMIN_NUMBER);
    426c:	80 e0       	ldi	r24, 0x00	; 0
    426e:	0e 94 0d 11 	call	0x221a	; 0x221a <get_phones>
    4272:	68 2f       	mov	r22, r24
    4274:	79 2f       	mov	r23, r25
    4276:	45 e0       	ldi	r20, 0x05	; 5
    4278:	c8 01       	movw	r24, r16
    427a:	07 96       	adiw	r24, 0x07	; 7
    427c:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <set_phones>
            set_admin_mode(1);
    4280:	81 e0       	ldi	r24, 0x01	; 1
    4282:	0e 94 1c 11 	call	0x2238	; 0x2238 <set_admin_mode>
            EEPROM_update();
    4286:	0e 94 c8 10 	call	0x2190	; 0x2190 <EEPROM_update>
            send_sms_p(PSTR("Set admins ok"), get_phone_number());
    428a:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <get_phone_number>
    428e:	68 2f       	mov	r22, r24
    4290:	79 2f       	mov	r23, r25
    4292:	88 e3       	ldi	r24, 0x38	; 56
    4294:	97 e0       	ldi	r25, 0x07	; 7
    4296:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <send_sms_p>
            softuart_puts_p(PSTR("Set admins ok"));
    429a:	8a e2       	ldi	r24, 0x2A	; 42
    429c:	97 e0       	ldi	r25, 0x07	; 7
    429e:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <softuart_puts_p>
            return;
    42a2:	5f c0       	rjmp	.+190    	; 0x4362 <process_sms_body+0x1fc>
        if((find_phone_in_phone_list(get_phone_number(), ADMIN_LIST) == 0))
    42a4:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <get_phone_number>
    42a8:	61 e0       	ldi	r22, 0x01	; 1
    42aa:	0e 94 81 20 	call	0x4102	; 0x4102 <find_phone_in_phone_list>
    42ae:	88 23       	and	r24, r24
    42b0:	39 f0       	breq	.+14     	; 0x42c0 <process_sms_body+0x15a>
        ptr += 4;
    42b2:	0c 5f       	subi	r16, 0xFC	; 252
    42b4:	1f 4f       	sbci	r17, 0xFF	; 255
        i=0;
    42b6:	f1 2c       	mov	r15, r1
            temp = 0;
    42b8:	d1 2c       	mov	r13, r1
            temp = 1;
    42ba:	ee 24       	eor	r14, r14
    42bc:	e3 94       	inc	r14
    42be:	10 c0       	rjmp	.+32     	; 0x42e0 <process_sms_body+0x17a>
            send_sms_p(PSTR("Access denied"), get_phone_number());
    42c0:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <get_phone_number>
    42c4:	68 2f       	mov	r22, r24
    42c6:	79 2f       	mov	r23, r25
    42c8:	8f e5       	ldi	r24, 0x5F	; 95
    42ca:	98 e0       	ldi	r25, 0x08	; 8
    42cc:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <send_sms_p>
            return;
    42d0:	48 c0       	rjmp	.+144    	; 0x4362 <process_sms_body+0x1fc>
        set_pause_alarm_report_s(interval);
    42d2:	0e 94 25 11 	call	0x224a	; 0x224a <set_pause_alarm_report_s>
        ptr++;
    42d6:	09 81       	ldd	r16, Y+1	; 0x01
    42d8:	1a 81       	ldd	r17, Y+2	; 0x02
    42da:	0f 5f       	subi	r16, 0xFF	; 255
    42dc:	1f 4f       	sbci	r17, 0xFF	; 255
                i++;
    42de:	f3 94       	inc	r15
        while(ptr && *ptr)
    42e0:	f8 01       	movw	r30, r16
    42e2:	80 81       	ld	r24, Z
    42e4:	88 23       	and	r24, r24
    42e6:	09 f4       	brne	.+2      	; 0x42ea <process_sms_body+0x184>
    42e8:	d9 c3       	rjmp	.+1970   	; 0x4a9c <process_sms_body+0x936>
            ptr = set_param(ptr);
    42ea:	1a 83       	std	Y+2, r17	; 0x02
    42ec:	09 83       	std	Y+1, r16	; 0x01
    if(memcmp_P(ptr, PSTR("pause_alarm="), 12) == 0)
    42ee:	4c e0       	ldi	r20, 0x0C	; 12
    42f0:	50 e0       	ldi	r21, 0x00	; 0
    42f2:	6f e0       	ldi	r22, 0x0F	; 15
    42f4:	77 e0       	ldi	r23, 0x07	; 7
    42f6:	c8 01       	movw	r24, r16
    42f8:	0e 94 b9 2d 	call	0x5b72	; 0x5b72 <memcmp_P>
    42fc:	89 2b       	or	r24, r25
    42fe:	09 f0       	breq	.+2      	; 0x4302 <process_sms_body+0x19c>
    4300:	4a c0       	rjmp	.+148    	; 0x4396 <process_sms_body+0x230>
        ptr+=12;
    4302:	c8 01       	movw	r24, r16
    4304:	0c 96       	adiw	r24, 0x0c	; 12
    4306:	9a 83       	std	Y+2, r25	; 0x02
    4308:	89 83       	std	Y+1, r24	; 0x01
        if(isdigit(*ptr) == 0)
    430a:	f8 01       	movw	r30, r16
    430c:	24 85       	ldd	r18, Z+12	; 0x0c
    430e:	02 2e       	mov	r0, r18
    4310:	00 0c       	add	r0, r0
    4312:	33 0b       	sbc	r19, r19
    4314:	20 53       	subi	r18, 0x30	; 48
    4316:	31 09       	sbc	r19, r1
    4318:	2a 30       	cpi	r18, 0x0A	; 10
    431a:	31 05       	cpc	r19, r1
    431c:	b8 f4       	brcc	.+46     	; 0x434c <process_sms_body+0x1e6>
        interval = strtoul(ptr, &ptr, 10);
    431e:	4a e0       	ldi	r20, 0x0A	; 10
    4320:	50 e0       	ldi	r21, 0x00	; 0
    4322:	be 01       	movw	r22, r28
    4324:	6f 5f       	subi	r22, 0xFF	; 255
    4326:	7f 4f       	sbci	r23, 0xFF	; 255
    4328:	0e 94 4a 2c 	call	0x5894	; 0x5894 <strtoul>
    432c:	38 2f       	mov	r19, r24
    432e:	29 2f       	mov	r18, r25
    4330:	86 2f       	mov	r24, r22
    4332:	97 2f       	mov	r25, r23
    4334:	a3 2f       	mov	r26, r19
    4336:	b2 2f       	mov	r27, r18
        if( interval>250 )
    4338:	8b 3f       	cpi	r24, 0xFB	; 251
    433a:	91 05       	cpc	r25, r1
    433c:	a1 05       	cpc	r26, r1
    433e:	b1 05       	cpc	r27, r1
    4340:	28 f4       	brcc	.+10     	; 0x434c <process_sms_body+0x1e6>
        if(*ptr != ';')
    4342:	e9 81       	ldd	r30, Y+1	; 0x01
    4344:	fa 81       	ldd	r31, Y+2	; 0x02
    4346:	20 81       	ld	r18, Z
    4348:	2b 33       	cpi	r18, 0x3B	; 59
    434a:	19 f2       	breq	.-122    	; 0x42d2 <process_sms_body+0x16c>
            eeprom_read_config(0); // возвращаем всё в зад
    434c:	80 e0       	ldi	r24, 0x00	; 0
    434e:	0e 94 90 10 	call	0x2120	; 0x2120 <eeprom_read_config>
            send_sms_p(PSTR("error"), get_phone_number());
    4352:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <get_phone_number>
    4356:	68 2f       	mov	r22, r24
    4358:	79 2f       	mov	r23, r25
    435a:	86 e5       	ldi	r24, 0x56	; 86
    435c:	98 e0       	ldi	r25, 0x08	; 8
    435e:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <send_sms_p>
}
    4362:	ce 55       	subi	r28, 0x5E	; 94
    4364:	df 4f       	sbci	r29, 0xFF	; 255
    4366:	0f b6       	in	r0, 0x3f	; 63
    4368:	f8 94       	cli
    436a:	de bf       	out	0x3e, r29	; 62
    436c:	0f be       	out	0x3f, r0	; 63
    436e:	cd bf       	out	0x3d, r28	; 61
    4370:	df 91       	pop	r29
    4372:	cf 91       	pop	r28
    4374:	1f 91       	pop	r17
    4376:	0f 91       	pop	r16
    4378:	ff 90       	pop	r15
    437a:	ef 90       	pop	r14
    437c:	df 90       	pop	r13
    437e:	cf 90       	pop	r12
    4380:	bf 90       	pop	r11
    4382:	af 90       	pop	r10
    4384:	9f 90       	pop	r9
    4386:	8f 90       	pop	r8
    4388:	7f 90       	pop	r7
    438a:	6f 90       	pop	r6
    438c:	5f 90       	pop	r5
    438e:	4f 90       	pop	r4
    4390:	3f 90       	pop	r3
    4392:	2f 90       	pop	r2
    4394:	08 95       	ret
    if(memcmp_P(ptr, PSTR("interval="), 9) == 0)
    4396:	49 e0       	ldi	r20, 0x09	; 9
    4398:	50 e0       	ldi	r21, 0x00	; 0
    439a:	65 e0       	ldi	r22, 0x05	; 5
    439c:	77 e0       	ldi	r23, 0x07	; 7
    439e:	c8 01       	movw	r24, r16
    43a0:	0e 94 b9 2d 	call	0x5b72	; 0x5b72 <memcmp_P>
    43a4:	89 2b       	or	r24, r25
    43a6:	71 f5       	brne	.+92     	; 0x4404 <process_sms_body+0x29e>
        ptr+=9;
    43a8:	c8 01       	movw	r24, r16
    43aa:	09 96       	adiw	r24, 0x09	; 9
    43ac:	9a 83       	std	Y+2, r25	; 0x02
    43ae:	89 83       	std	Y+1, r24	; 0x01
        if(isdigit(*ptr) == 0)
    43b0:	f8 01       	movw	r30, r16
    43b2:	21 85       	ldd	r18, Z+9	; 0x09
    43b4:	02 2e       	mov	r0, r18
    43b6:	00 0c       	add	r0, r0
    43b8:	33 0b       	sbc	r19, r19
    43ba:	20 53       	subi	r18, 0x30	; 48
    43bc:	31 09       	sbc	r19, r1
    43be:	2a 30       	cpi	r18, 0x0A	; 10
    43c0:	31 05       	cpc	r19, r1
    43c2:	20 f6       	brcc	.-120    	; 0x434c <process_sms_body+0x1e6>
        interval = strtoul(ptr, &ptr, 10);
    43c4:	4a e0       	ldi	r20, 0x0A	; 10
    43c6:	50 e0       	ldi	r21, 0x00	; 0
    43c8:	be 01       	movw	r22, r28
    43ca:	6f 5f       	subi	r22, 0xFF	; 255
    43cc:	7f 4f       	sbci	r23, 0xFF	; 255
    43ce:	0e 94 4a 2c 	call	0x5894	; 0x5894 <strtoul>
    43d2:	38 2f       	mov	r19, r24
    43d4:	29 2f       	mov	r18, r25
    43d6:	86 2f       	mov	r24, r22
    43d8:	97 2f       	mov	r25, r23
    43da:	a3 2f       	mov	r26, r19
    43dc:	b2 2f       	mov	r27, r18
        if( interval>250 )
    43de:	8b 3f       	cpi	r24, 0xFB	; 251
    43e0:	91 05       	cpc	r25, r1
    43e2:	a1 05       	cpc	r26, r1
    43e4:	b1 05       	cpc	r27, r1
    43e6:	08 f0       	brcs	.+2      	; 0x43ea <process_sms_body+0x284>
    43e8:	b1 cf       	rjmp	.-158    	; 0x434c <process_sms_body+0x1e6>
        if(*ptr != ';')
    43ea:	e9 81       	ldd	r30, Y+1	; 0x01
    43ec:	fa 81       	ldd	r31, Y+2	; 0x02
    43ee:	20 81       	ld	r18, Z
    43f0:	2b 33       	cpi	r18, 0x3B	; 59
    43f2:	09 f0       	breq	.+2      	; 0x43f6 <process_sms_body+0x290>
    43f4:	ab cf       	rjmp	.-170    	; 0x434c <process_sms_body+0x1e6>
        set_interval_after_button_m(interval);
    43f6:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <set_interval_after_button_m>
        ptr++;
    43fa:	09 81       	ldd	r16, Y+1	; 0x01
    43fc:	1a 81       	ldd	r17, Y+2	; 0x02
    43fe:	0f 5f       	subi	r16, 0xFF	; 255
    4400:	1f 4f       	sbci	r17, 0xFF	; 255
        return ptr;
    4402:	6d cf       	rjmp	.-294    	; 0x42de <process_sms_body+0x178>
    if(memcmp_P(ptr, PSTR("guard="), 6) == 0)
    4404:	46 e0       	ldi	r20, 0x06	; 6
    4406:	50 e0       	ldi	r21, 0x00	; 0
    4408:	6e ef       	ldi	r22, 0xFE	; 254
    440a:	76 e0       	ldi	r23, 0x06	; 6
    440c:	c8 01       	movw	r24, r16
    440e:	0e 94 b9 2d 	call	0x5b72	; 0x5b72 <memcmp_P>
    4412:	89 2b       	or	r24, r25
    4414:	d9 f4       	brne	.+54     	; 0x444c <process_sms_body+0x2e6>
        if(*ptr == '0')
    4416:	f8 01       	movw	r30, r16
    4418:	86 81       	ldd	r24, Z+6	; 0x06
    441a:	80 33       	cpi	r24, 0x30	; 48
    441c:	a9 f0       	breq	.+42     	; 0x4448 <process_sms_body+0x2e2>
        else if(*ptr == '1')
    441e:	81 33       	cpi	r24, 0x31	; 49
    4420:	09 f0       	breq	.+2      	; 0x4424 <process_sms_body+0x2be>
    4422:	94 cf       	rjmp	.-216    	; 0x434c <process_sms_body+0x1e6>
            temp = 1;
    4424:	8e 2d       	mov	r24, r14
        if(*++ptr != ';')
    4426:	98 01       	movw	r18, r16
    4428:	29 5f       	subi	r18, 0xF9	; 249
    442a:	3f 4f       	sbci	r19, 0xFF	; 255
    442c:	3a 83       	std	Y+2, r19	; 0x02
    442e:	29 83       	std	Y+1, r18	; 0x01
    4430:	f8 01       	movw	r30, r16
    4432:	97 81       	ldd	r25, Z+7	; 0x07
    4434:	9b 33       	cpi	r25, 0x3B	; 59
    4436:	09 f0       	breq	.+2      	; 0x443a <process_sms_body+0x2d4>
    4438:	89 cf       	rjmp	.-238    	; 0x434c <process_sms_body+0x1e6>
        set_guard(temp);
    443a:	0e 94 e6 10 	call	0x21cc	; 0x21cc <set_guard>
        ptr++;
    443e:	09 81       	ldd	r16, Y+1	; 0x01
    4440:	1a 81       	ldd	r17, Y+2	; 0x02
    4442:	0f 5f       	subi	r16, 0xFF	; 255
    4444:	1f 4f       	sbci	r17, 0xFF	; 255
        return ptr;
    4446:	4b cf       	rjmp	.-362    	; 0x42de <process_sms_body+0x178>
            temp = 0;
    4448:	8d 2d       	mov	r24, r13
    444a:	ed cf       	rjmp	.-38     	; 0x4426 <process_sms_body+0x2c0>
    if(memcmp_P(ptr, PSTR("firstm="), 7) == 0)
    444c:	47 e0       	ldi	r20, 0x07	; 7
    444e:	50 e0       	ldi	r21, 0x00	; 0
    4450:	66 ef       	ldi	r22, 0xF6	; 246
    4452:	76 e0       	ldi	r23, 0x06	; 6
    4454:	c8 01       	movw	r24, r16
    4456:	0e 94 b9 2d 	call	0x5b72	; 0x5b72 <memcmp_P>
    445a:	89 2b       	or	r24, r25
    445c:	d9 f4       	brne	.+54     	; 0x4494 <process_sms_body+0x32e>
        if(*ptr == '0')
    445e:	f8 01       	movw	r30, r16
    4460:	87 81       	ldd	r24, Z+7	; 0x07
    4462:	80 33       	cpi	r24, 0x30	; 48
    4464:	a9 f0       	breq	.+42     	; 0x4490 <process_sms_body+0x32a>
        else if(*ptr == '1')
    4466:	81 33       	cpi	r24, 0x31	; 49
    4468:	09 f0       	breq	.+2      	; 0x446c <process_sms_body+0x306>
    446a:	70 cf       	rjmp	.-288    	; 0x434c <process_sms_body+0x1e6>
            temp = 1;
    446c:	8e 2d       	mov	r24, r14
        if(*++ptr != ';')
    446e:	98 01       	movw	r18, r16
    4470:	28 5f       	subi	r18, 0xF8	; 248
    4472:	3f 4f       	sbci	r19, 0xFF	; 255
    4474:	3a 83       	std	Y+2, r19	; 0x02
    4476:	29 83       	std	Y+1, r18	; 0x01
    4478:	f8 01       	movw	r30, r16
    447a:	90 85       	ldd	r25, Z+8	; 0x08
    447c:	9b 33       	cpi	r25, 0x3B	; 59
    447e:	09 f0       	breq	.+2      	; 0x4482 <process_sms_body+0x31c>
    4480:	65 cf       	rjmp	.-310    	; 0x434c <process_sms_body+0x1e6>
        set_first_m(temp);
    4482:	0e 94 ef 10 	call	0x21de	; 0x21de <set_first_m>
        ptr++;
    4486:	09 81       	ldd	r16, Y+1	; 0x01
    4488:	1a 81       	ldd	r17, Y+2	; 0x02
    448a:	0f 5f       	subi	r16, 0xFF	; 255
    448c:	1f 4f       	sbci	r17, 0xFF	; 255
        return ptr;
    448e:	27 cf       	rjmp	.-434    	; 0x42de <process_sms_body+0x178>
            temp = 0;
    4490:	8d 2d       	mov	r24, r13
    4492:	ed cf       	rjmp	.-38     	; 0x446e <process_sms_body+0x308>
    if(memcmp_P(ptr, PSTR("autoguard="), 10) == 0)
    4494:	4a e0       	ldi	r20, 0x0A	; 10
    4496:	50 e0       	ldi	r21, 0x00	; 0
    4498:	6b ee       	ldi	r22, 0xEB	; 235
    449a:	76 e0       	ldi	r23, 0x06	; 6
    449c:	c8 01       	movw	r24, r16
    449e:	0e 94 b9 2d 	call	0x5b72	; 0x5b72 <memcmp_P>
    44a2:	89 2b       	or	r24, r25
    44a4:	d9 f4       	brne	.+54     	; 0x44dc <process_sms_body+0x376>
        if(*ptr == '0')
    44a6:	f8 01       	movw	r30, r16
    44a8:	82 85       	ldd	r24, Z+10	; 0x0a
    44aa:	80 33       	cpi	r24, 0x30	; 48
    44ac:	a9 f0       	breq	.+42     	; 0x44d8 <process_sms_body+0x372>
        else if(*ptr == '1')
    44ae:	81 33       	cpi	r24, 0x31	; 49
    44b0:	09 f0       	breq	.+2      	; 0x44b4 <process_sms_body+0x34e>
    44b2:	4c cf       	rjmp	.-360    	; 0x434c <process_sms_body+0x1e6>
            temp = 1;
    44b4:	8e 2d       	mov	r24, r14
        if(*++ptr != ';')
    44b6:	98 01       	movw	r18, r16
    44b8:	25 5f       	subi	r18, 0xF5	; 245
    44ba:	3f 4f       	sbci	r19, 0xFF	; 255
    44bc:	3a 83       	std	Y+2, r19	; 0x02
    44be:	29 83       	std	Y+1, r18	; 0x01
    44c0:	f8 01       	movw	r30, r16
    44c2:	93 85       	ldd	r25, Z+11	; 0x0b
    44c4:	9b 33       	cpi	r25, 0x3B	; 59
    44c6:	09 f0       	breq	.+2      	; 0x44ca <process_sms_body+0x364>
    44c8:	41 cf       	rjmp	.-382    	; 0x434c <process_sms_body+0x1e6>
        set_autoguard(temp);
    44ca:	0e 94 f5 10 	call	0x21ea	; 0x21ea <set_autoguard>
        ptr++;
    44ce:	09 81       	ldd	r16, Y+1	; 0x01
    44d0:	1a 81       	ldd	r17, Y+2	; 0x02
    44d2:	0f 5f       	subi	r16, 0xFF	; 255
    44d4:	1f 4f       	sbci	r17, 0xFF	; 255
        return ptr;
    44d6:	03 cf       	rjmp	.-506    	; 0x42de <process_sms_body+0x178>
            temp = 0;
    44d8:	8d 2d       	mov	r24, r13
    44da:	ed cf       	rjmp	.-38     	; 0x44b6 <process_sms_body+0x350>
    if(memcmp_P(ptr, PSTR("calls="), 6) == 0)
    44dc:	46 e0       	ldi	r20, 0x06	; 6
    44de:	50 e0       	ldi	r21, 0x00	; 0
    44e0:	64 ee       	ldi	r22, 0xE4	; 228
    44e2:	76 e0       	ldi	r23, 0x06	; 6
    44e4:	c8 01       	movw	r24, r16
    44e6:	0e 94 b9 2d 	call	0x5b72	; 0x5b72 <memcmp_P>
    44ea:	89 2b       	or	r24, r25
    44ec:	d9 f4       	brne	.+54     	; 0x4524 <process_sms_body+0x3be>
        if(*ptr == '0')
    44ee:	f8 01       	movw	r30, r16
    44f0:	86 81       	ldd	r24, Z+6	; 0x06
    44f2:	80 33       	cpi	r24, 0x30	; 48
    44f4:	a9 f0       	breq	.+42     	; 0x4520 <process_sms_body+0x3ba>
        else if(*ptr == '1')
    44f6:	81 33       	cpi	r24, 0x31	; 49
    44f8:	09 f0       	breq	.+2      	; 0x44fc <process_sms_body+0x396>
    44fa:	28 cf       	rjmp	.-432    	; 0x434c <process_sms_body+0x1e6>
            temp = 1;
    44fc:	8e 2d       	mov	r24, r14
        if(*++ptr != ';')
    44fe:	98 01       	movw	r18, r16
    4500:	29 5f       	subi	r18, 0xF9	; 249
    4502:	3f 4f       	sbci	r19, 0xFF	; 255
    4504:	3a 83       	std	Y+2, r19	; 0x02
    4506:	29 83       	std	Y+1, r18	; 0x01
    4508:	f8 01       	movw	r30, r16
    450a:	97 81       	ldd	r25, Z+7	; 0x07
    450c:	9b 33       	cpi	r25, 0x3B	; 59
    450e:	09 f0       	breq	.+2      	; 0x4512 <process_sms_body+0x3ac>
    4510:	1d cf       	rjmp	.-454    	; 0x434c <process_sms_body+0x1e6>
        set_accept_calls(temp);
    4512:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <set_accept_calls>
        ptr++;
    4516:	09 81       	ldd	r16, Y+1	; 0x01
    4518:	1a 81       	ldd	r17, Y+2	; 0x02
    451a:	0f 5f       	subi	r16, 0xFF	; 255
    451c:	1f 4f       	sbci	r17, 0xFF	; 255
        return ptr;
    451e:	df ce       	rjmp	.-578    	; 0x42de <process_sms_body+0x178>
            temp = 0;
    4520:	8d 2d       	mov	r24, r13
    4522:	ed cf       	rjmp	.-38     	; 0x44fe <process_sms_body+0x398>
    if(memcmp_P(ptr, PSTR("sms="), 4) == 0)
    4524:	44 e0       	ldi	r20, 0x04	; 4
    4526:	50 e0       	ldi	r21, 0x00	; 0
    4528:	6f ed       	ldi	r22, 0xDF	; 223
    452a:	76 e0       	ldi	r23, 0x06	; 6
    452c:	c8 01       	movw	r24, r16
    452e:	0e 94 b9 2d 	call	0x5b72	; 0x5b72 <memcmp_P>
    4532:	89 2b       	or	r24, r25
    4534:	d9 f4       	brne	.+54     	; 0x456c <process_sms_body+0x406>
        if(*ptr == '0')
    4536:	f8 01       	movw	r30, r16
    4538:	84 81       	ldd	r24, Z+4	; 0x04
    453a:	80 33       	cpi	r24, 0x30	; 48
    453c:	a9 f0       	breq	.+42     	; 0x4568 <process_sms_body+0x402>
        else if(*ptr == '1')
    453e:	81 33       	cpi	r24, 0x31	; 49
    4540:	09 f0       	breq	.+2      	; 0x4544 <process_sms_body+0x3de>
    4542:	04 cf       	rjmp	.-504    	; 0x434c <process_sms_body+0x1e6>
            temp = 1;
    4544:	8e 2d       	mov	r24, r14
        if(*++ptr != ';')
    4546:	98 01       	movw	r18, r16
    4548:	2b 5f       	subi	r18, 0xFB	; 251
    454a:	3f 4f       	sbci	r19, 0xFF	; 255
    454c:	3a 83       	std	Y+2, r19	; 0x02
    454e:	29 83       	std	Y+1, r18	; 0x01
    4550:	f8 01       	movw	r30, r16
    4552:	95 81       	ldd	r25, Z+5	; 0x05
    4554:	9b 33       	cpi	r25, 0x3B	; 59
    4556:	09 f0       	breq	.+2      	; 0x455a <process_sms_body+0x3f4>
    4558:	f9 ce       	rjmp	.-526    	; 0x434c <process_sms_body+0x1e6>
        set_accept_sms(temp);
    455a:	0e 94 d7 10 	call	0x21ae	; 0x21ae <set_accept_sms>
        ptr++;
    455e:	09 81       	ldd	r16, Y+1	; 0x01
    4560:	1a 81       	ldd	r17, Y+2	; 0x02
    4562:	0f 5f       	subi	r16, 0xFF	; 255
    4564:	1f 4f       	sbci	r17, 0xFF	; 255
        return ptr;
    4566:	bb ce       	rjmp	.-650    	; 0x42de <process_sms_body+0x178>
            temp = 0;
    4568:	8d 2d       	mov	r24, r13
    456a:	ed cf       	rjmp	.-38     	; 0x4546 <process_sms_body+0x3e0>
    if(memcmp_P(ptr, PSTR("power_report="), 13) == 0)
    456c:	4d e0       	ldi	r20, 0x0D	; 13
    456e:	50 e0       	ldi	r21, 0x00	; 0
    4570:	61 ed       	ldi	r22, 0xD1	; 209
    4572:	76 e0       	ldi	r23, 0x06	; 6
    4574:	c8 01       	movw	r24, r16
    4576:	0e 94 b9 2d 	call	0x5b72	; 0x5b72 <memcmp_P>
    457a:	89 2b       	or	r24, r25
    457c:	d9 f4       	brne	.+54     	; 0x45b4 <process_sms_body+0x44e>
        if(*ptr == '0')
    457e:	f8 01       	movw	r30, r16
    4580:	85 85       	ldd	r24, Z+13	; 0x0d
    4582:	80 33       	cpi	r24, 0x30	; 48
    4584:	a9 f0       	breq	.+42     	; 0x45b0 <process_sms_body+0x44a>
        else if(*ptr == '1')
    4586:	81 33       	cpi	r24, 0x31	; 49
    4588:	09 f0       	breq	.+2      	; 0x458c <process_sms_body+0x426>
    458a:	e0 ce       	rjmp	.-576    	; 0x434c <process_sms_body+0x1e6>
            temp = 1;
    458c:	8e 2d       	mov	r24, r14
        if(*++ptr != ';')
    458e:	98 01       	movw	r18, r16
    4590:	22 5f       	subi	r18, 0xF2	; 242
    4592:	3f 4f       	sbci	r19, 0xFF	; 255
    4594:	3a 83       	std	Y+2, r19	; 0x02
    4596:	29 83       	std	Y+1, r18	; 0x01
    4598:	f8 01       	movw	r30, r16
    459a:	96 85       	ldd	r25, Z+14	; 0x0e
    459c:	9b 33       	cpi	r25, 0x3B	; 59
    459e:	09 f0       	breq	.+2      	; 0x45a2 <process_sms_body+0x43c>
    45a0:	d5 ce       	rjmp	.-598    	; 0x434c <process_sms_body+0x1e6>
        set_power_report(temp);
    45a2:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <set_power_report>
        ptr++;
    45a6:	09 81       	ldd	r16, Y+1	; 0x01
    45a8:	1a 81       	ldd	r17, Y+2	; 0x02
    45aa:	0f 5f       	subi	r16, 0xFF	; 255
    45ac:	1f 4f       	sbci	r17, 0xFF	; 255
        return ptr;
    45ae:	97 ce       	rjmp	.-722    	; 0x42de <process_sms_body+0x178>
            temp = 0;
    45b0:	8d 2d       	mov	r24, r13
    45b2:	ed cf       	rjmp	.-38     	; 0x458e <process_sms_body+0x428>
    if(memcmp_P(ptr, PSTR("guard_report="), 13) == 0)
    45b4:	4d e0       	ldi	r20, 0x0D	; 13
    45b6:	50 e0       	ldi	r21, 0x00	; 0
    45b8:	63 ec       	ldi	r22, 0xC3	; 195
    45ba:	76 e0       	ldi	r23, 0x06	; 6
    45bc:	c8 01       	movw	r24, r16
    45be:	0e 94 b9 2d 	call	0x5b72	; 0x5b72 <memcmp_P>
    45c2:	89 2b       	or	r24, r25
    45c4:	d9 f4       	brne	.+54     	; 0x45fc <process_sms_body+0x496>
        if(*ptr == '0')
    45c6:	f8 01       	movw	r30, r16
    45c8:	85 85       	ldd	r24, Z+13	; 0x0d
    45ca:	80 33       	cpi	r24, 0x30	; 48
    45cc:	a9 f0       	breq	.+42     	; 0x45f8 <process_sms_body+0x492>
        else if(*ptr == '1')
    45ce:	81 33       	cpi	r24, 0x31	; 49
    45d0:	09 f0       	breq	.+2      	; 0x45d4 <process_sms_body+0x46e>
    45d2:	bc ce       	rjmp	.-648    	; 0x434c <process_sms_body+0x1e6>
            temp = 1;
    45d4:	8e 2d       	mov	r24, r14
        if(*++ptr != ';')
    45d6:	98 01       	movw	r18, r16
    45d8:	22 5f       	subi	r18, 0xF2	; 242
    45da:	3f 4f       	sbci	r19, 0xFF	; 255
    45dc:	3a 83       	std	Y+2, r19	; 0x02
    45de:	29 83       	std	Y+1, r18	; 0x01
    45e0:	f8 01       	movw	r30, r16
    45e2:	96 85       	ldd	r25, Z+14	; 0x0e
    45e4:	9b 33       	cpi	r25, 0x3B	; 59
    45e6:	09 f0       	breq	.+2      	; 0x45ea <process_sms_body+0x484>
    45e8:	b1 ce       	rjmp	.-670    	; 0x434c <process_sms_body+0x1e6>
        set_report_on_guard(temp);
    45ea:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <set_report_on_guard>
        ptr++;
    45ee:	09 81       	ldd	r16, Y+1	; 0x01
    45f0:	1a 81       	ldd	r17, Y+2	; 0x02
    45f2:	0f 5f       	subi	r16, 0xFF	; 255
    45f4:	1f 4f       	sbci	r17, 0xFF	; 255
        return ptr;
    45f6:	73 ce       	rjmp	.-794    	; 0x42de <process_sms_body+0x178>
            temp = 0;
    45f8:	8d 2d       	mov	r24, r13
    45fa:	ed cf       	rjmp	.-38     	; 0x45d6 <process_sms_body+0x470>
    if(memcmp_P(ptr, PSTR("ext_temp="), 9) == 0)
    45fc:	49 e0       	ldi	r20, 0x09	; 9
    45fe:	50 e0       	ldi	r21, 0x00	; 0
    4600:	69 eb       	ldi	r22, 0xB9	; 185
    4602:	76 e0       	ldi	r23, 0x06	; 6
    4604:	c8 01       	movw	r24, r16
    4606:	0e 94 b9 2d 	call	0x5b72	; 0x5b72 <memcmp_P>
    460a:	89 2b       	or	r24, r25
    460c:	d9 f4       	brne	.+54     	; 0x4644 <process_sms_body+0x4de>
        if(*ptr == '0')
    460e:	f8 01       	movw	r30, r16
    4610:	81 85       	ldd	r24, Z+9	; 0x09
    4612:	80 33       	cpi	r24, 0x30	; 48
    4614:	a9 f0       	breq	.+42     	; 0x4640 <process_sms_body+0x4da>
        else if(*ptr == '1')
    4616:	81 33       	cpi	r24, 0x31	; 49
    4618:	09 f0       	breq	.+2      	; 0x461c <process_sms_body+0x4b6>
    461a:	98 ce       	rjmp	.-720    	; 0x434c <process_sms_body+0x1e6>
            temp = 1;
    461c:	8e 2d       	mov	r24, r14
        if(*++ptr != ';')
    461e:	98 01       	movw	r18, r16
    4620:	26 5f       	subi	r18, 0xF6	; 246
    4622:	3f 4f       	sbci	r19, 0xFF	; 255
    4624:	3a 83       	std	Y+2, r19	; 0x02
    4626:	29 83       	std	Y+1, r18	; 0x01
    4628:	f8 01       	movw	r30, r16
    462a:	92 85       	ldd	r25, Z+10	; 0x0a
    462c:	9b 33       	cpi	r25, 0x3B	; 59
    462e:	09 f0       	breq	.+2      	; 0x4632 <process_sms_body+0x4cc>
    4630:	8d ce       	rjmp	.-742    	; 0x434c <process_sms_body+0x1e6>
        set_ext_temp(temp);
    4632:	0e 94 28 11 	call	0x2250	; 0x2250 <set_ext_temp>
        ptr++;
    4636:	09 81       	ldd	r16, Y+1	; 0x01
    4638:	1a 81       	ldd	r17, Y+2	; 0x02
    463a:	0f 5f       	subi	r16, 0xFF	; 255
    463c:	1f 4f       	sbci	r17, 0xFF	; 255
        return ptr;
    463e:	4f ce       	rjmp	.-866    	; 0x42de <process_sms_body+0x178>
            temp = 0;
    4640:	8d 2d       	mov	r24, r13
    4642:	ed cf       	rjmp	.-38     	; 0x461e <process_sms_body+0x4b8>
    if(memcmp_P(ptr, PSTR("buzzer="), 7) == 0)
    4644:	47 e0       	ldi	r20, 0x07	; 7
    4646:	50 e0       	ldi	r21, 0x00	; 0
    4648:	61 eb       	ldi	r22, 0xB1	; 177
    464a:	76 e0       	ldi	r23, 0x06	; 6
    464c:	c8 01       	movw	r24, r16
    464e:	0e 94 b9 2d 	call	0x5b72	; 0x5b72 <memcmp_P>
    4652:	89 2b       	or	r24, r25
    4654:	09 f0       	breq	.+2      	; 0x4658 <process_sms_body+0x4f2>
    4656:	7a ce       	rjmp	.-780    	; 0x434c <process_sms_body+0x1e6>
        if(*ptr == '0')
    4658:	f8 01       	movw	r30, r16
    465a:	87 81       	ldd	r24, Z+7	; 0x07
    465c:	80 33       	cpi	r24, 0x30	; 48
    465e:	09 f4       	brne	.+2      	; 0x4662 <process_sms_body+0x4fc>
    4660:	2b c2       	rjmp	.+1110   	; 0x4ab8 <process_sms_body+0x952>
        else if(*ptr == '1')
    4662:	81 33       	cpi	r24, 0x31	; 49
    4664:	09 f0       	breq	.+2      	; 0x4668 <process_sms_body+0x502>
    4666:	72 ce       	rjmp	.-796    	; 0x434c <process_sms_body+0x1e6>
        if(*++ptr != ';')
    4668:	c8 01       	movw	r24, r16
    466a:	08 96       	adiw	r24, 0x08	; 8
    466c:	9a 83       	std	Y+2, r25	; 0x02
    466e:	89 83       	std	Y+1, r24	; 0x01
    4670:	80 85       	ldd	r24, Z+8	; 0x08
    4672:	8b 33       	cpi	r24, 0x3B	; 59
    4674:	09 f0       	breq	.+2      	; 0x4678 <process_sms_body+0x512>
    4676:	6a ce       	rjmp	.-812    	; 0x434c <process_sms_body+0x1e6>
            buzzer_non_block(60000);
    4678:	80 e6       	ldi	r24, 0x60	; 96
    467a:	9a ee       	ldi	r25, 0xEA	; 234
    467c:	0e 94 3a 26 	call	0x4c74	; 0x4c74 <buzzer_non_block>
    4680:	25 c2       	rjmp	.+1098   	; 0x4acc <process_sms_body+0x966>
        if((find_phone_in_phone_list(get_phone_number(), ADMIN_LIST) == 0))
    4682:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <get_phone_number>
    4686:	61 e0       	ldi	r22, 0x01	; 1
    4688:	0e 94 81 20 	call	0x4102	; 0x4102 <find_phone_in_phone_list>
    468c:	88 23       	and	r24, r24
    468e:	01 f1       	breq	.+64     	; 0x46d0 <process_sms_body+0x56a>
        ptr += 4;
    4690:	0c 5f       	subi	r16, 0xFC	; 252
    4692:	1f 4f       	sbci	r17, 0xFF	; 255
        sms_text[0] = 0; // терминируем строку
    4694:	19 82       	std	Y+1, r1	; 0x01
        i=0;
    4696:	31 2c       	mov	r3, r1
            ptr = get_param(ptr, &sms_text[strlen(sms_text)]);
    4698:	ce 01       	movw	r24, r28
    469a:	01 96       	adiw	r24, 0x01	; 1
    469c:	5c 01       	movw	r10, r24
        sprintf_P(sms_text, PSTR("interval_after_button_m=%um;"), get_interval_after_button_m());
    469e:	0f 2e       	mov	r0, r31
    46a0:	f4 e7       	ldi	r31, 0x74	; 116
    46a2:	4f 2e       	mov	r4, r31
    46a4:	f6 e0       	ldi	r31, 0x06	; 6
    46a6:	5f 2e       	mov	r5, r31
    46a8:	f0 2d       	mov	r31, r0
        sms_text += sprintf_P(sms_text, PSTR("phones="));
    46aa:	0f 2e       	mov	r0, r31
    46ac:	f1 ea       	ldi	r31, 0xA1	; 161
    46ae:	8f 2e       	mov	r8, r31
    46b0:	f6 e0       	ldi	r31, 0x06	; 6
    46b2:	9f 2e       	mov	r9, r31
    46b4:	f0 2d       	mov	r31, r0
            sms_text += sprintf_P(sms_text, PSTR("%s,"), &get_phones(i)[0]);
    46b6:	0f 2e       	mov	r0, r31
    46b8:	fd e9       	ldi	r31, 0x9D	; 157
    46ba:	cf 2e       	mov	r12, r31
    46bc:	f6 e0       	ldi	r31, 0x06	; 6
    46be:	df 2e       	mov	r13, r31
    46c0:	f0 2d       	mov	r31, r0
        sprintf_P(sms_text, PSTR(";"));
    46c2:	0f 2e       	mov	r0, r31
    46c4:	fb e9       	ldi	r31, 0x9B	; 155
    46c6:	6f 2e       	mov	r6, r31
    46c8:	f6 e0       	ldi	r31, 0x06	; 6
    46ca:	7f 2e       	mov	r7, r31
    46cc:	f0 2d       	mov	r31, r0
    46ce:	5a c0       	rjmp	.+180    	; 0x4784 <process_sms_body+0x61e>
            send_sms_p(PSTR("Access denied"), get_phone_number());
    46d0:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <get_phone_number>
    46d4:	68 2f       	mov	r22, r24
    46d6:	79 2f       	mov	r23, r25
    46d8:	83 e4       	ldi	r24, 0x43	; 67
    46da:	98 e0       	ldi	r25, 0x08	; 8
    46dc:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <send_sms_p>
            return;
    46e0:	40 ce       	rjmp	.-896    	; 0x4362 <process_sms_body+0x1fc>
        str += 12;
    46e2:	04 5f       	subi	r16, 0xF4	; 244
    46e4:	1f 4f       	sbci	r17, 0xFF	; 255
        sms_text += sprintf_P(sms_text, PSTR("phones="));
    46e6:	9f 92       	push	r9
    46e8:	8f 92       	push	r8
    46ea:	ff 92       	push	r15
    46ec:	ef 92       	push	r14
    46ee:	0e 94 a7 2e 	call	0x5d4e	; 0x5d4e <sprintf_P>
    46f2:	e8 0e       	add	r14, r24
    46f4:	f9 1e       	adc	r15, r25
    46f6:	0f 90       	pop	r0
    46f8:	0f 90       	pop	r0
    46fa:	0f 90       	pop	r0
    46fc:	0f 90       	pop	r0
        n=0;
    46fe:	21 2c       	mov	r2, r1
    4700:	cf 55       	subi	r28, 0x5F	; 95
    4702:	df 4f       	sbci	r29, 0xFF	; 255
    4704:	19 83       	std	Y+1, r17	; 0x01
    4706:	08 83       	st	Y, r16
    4708:	c1 5a       	subi	r28, 0xA1	; 161
    470a:	d0 40       	sbci	r29, 0x00	; 0
    470c:	12 2d       	mov	r17, r2
            if(get_phones(i)[0] != '+')
    470e:	81 2f       	mov	r24, r17
    4710:	0e 94 0d 11 	call	0x221a	; 0x221a <get_phones>
    4714:	fc 01       	movw	r30, r24
    4716:	80 81       	ld	r24, Z
    4718:	8b 32       	cpi	r24, 0x2B	; 43
    471a:	01 f5       	brne	.+64     	; 0x475c <process_sms_body+0x5f6>
            sms_text += sprintf_P(sms_text, PSTR("%s,"), &get_phones(i)[0]);
    471c:	81 2f       	mov	r24, r17
    471e:	0e 94 0d 11 	call	0x221a	; 0x221a <get_phones>
    4722:	9f 93       	push	r25
    4724:	8f 93       	push	r24
    4726:	df 92       	push	r13
    4728:	cf 92       	push	r12
    472a:	ff 92       	push	r15
    472c:	ef 92       	push	r14
    472e:	0e 94 a7 2e 	call	0x5d4e	; 0x5d4e <sprintf_P>
    4732:	e8 0e       	add	r14, r24
    4734:	f9 1e       	adc	r15, r25
            n++; // количество напечатанных телефонов
    4736:	1f 5f       	subi	r17, 0xFF	; 255
        for(i=0; i<TOTAL_ADMIN_NUMBER; i++)
    4738:	0f 90       	pop	r0
    473a:	0f 90       	pop	r0
    473c:	0f 90       	pop	r0
    473e:	0f 90       	pop	r0
    4740:	0f 90       	pop	r0
    4742:	0f 90       	pop	r0
    4744:	15 30       	cpi	r17, 0x05	; 5
    4746:	19 f7       	brne	.-58     	; 0x470e <process_sms_body+0x5a8>
    4748:	cf 55       	subi	r28, 0x5F	; 95
    474a:	df 4f       	sbci	r29, 0xFF	; 255
    474c:	08 81       	ld	r16, Y
    474e:	19 81       	ldd	r17, Y+1	; 0x01
    4750:	c1 5a       	subi	r28, 0xA1	; 161
    4752:	d0 40       	sbci	r29, 0x00	; 0
            sms_text--;
    4754:	f1 e0       	ldi	r31, 0x01	; 1
    4756:	ef 1a       	sub	r14, r31
    4758:	f1 08       	sbc	r15, r1
    475a:	09 c0       	rjmp	.+18     	; 0x476e <process_sms_body+0x608>
        if(n)
    475c:	21 2e       	mov	r2, r17
    475e:	cf 55       	subi	r28, 0x5F	; 95
    4760:	df 4f       	sbci	r29, 0xFF	; 255
    4762:	08 81       	ld	r16, Y
    4764:	19 81       	ldd	r17, Y+1	; 0x01
    4766:	c1 5a       	subi	r28, 0xA1	; 161
    4768:	d0 40       	sbci	r29, 0x00	; 0
    476a:	21 10       	cpse	r2, r1
    476c:	f3 cf       	rjmp	.-26     	; 0x4754 <process_sms_body+0x5ee>
        sprintf_P(sms_text, PSTR(";"));
    476e:	7f 92       	push	r7
    4770:	6f 92       	push	r6
    4772:	ff 92       	push	r15
    4774:	ef 92       	push	r14
    4776:	0e 94 a7 2e 	call	0x5d4e	; 0x5d4e <sprintf_P>
        return str;
    477a:	0f 90       	pop	r0
    477c:	0f 90       	pop	r0
    477e:	0f 90       	pop	r0
    4780:	0f 90       	pop	r0
                i++;
    4782:	33 94       	inc	r3
        while(ptr && *ptr)
    4784:	f8 01       	movw	r30, r16
    4786:	80 81       	ld	r24, Z
    4788:	88 23       	and	r24, r24
    478a:	09 f4       	brne	.+2      	; 0x478e <process_sms_body+0x628>
    478c:	77 c1       	rjmp	.+750    	; 0x4a7c <process_sms_body+0x916>
            ptr = get_param(ptr, &sms_text[strlen(sms_text)]);
    478e:	f5 01       	movw	r30, r10
    4790:	01 90       	ld	r0, Z+
    4792:	00 20       	and	r0, r0
    4794:	e9 f7       	brne	.-6      	; 0x4790 <process_sms_body+0x62a>
    4796:	cf 01       	movw	r24, r30
    4798:	01 97       	sbiw	r24, 0x01	; 1
    479a:	7c 01       	movw	r14, r24
    if(memcmp_P(str, PSTR("phones;"), 12) == 0)
    479c:	4c e0       	ldi	r20, 0x0C	; 12
    479e:	50 e0       	ldi	r21, 0x00	; 0
    47a0:	69 ea       	ldi	r22, 0xA9	; 169
    47a2:	76 e0       	ldi	r23, 0x06	; 6
    47a4:	c8 01       	movw	r24, r16
    47a6:	0e 94 b9 2d 	call	0x5b72	; 0x5b72 <memcmp_P>
    47aa:	89 2b       	or	r24, r25
    47ac:	09 f4       	brne	.+2      	; 0x47b0 <process_sms_body+0x64a>
    47ae:	99 cf       	rjmp	.-206    	; 0x46e2 <process_sms_body+0x57c>
    else if(memcmp_P(str, PSTR("interval;"), 9) == 0)
    47b0:	49 e0       	ldi	r20, 0x09	; 9
    47b2:	50 e0       	ldi	r21, 0x00	; 0
    47b4:	61 e9       	ldi	r22, 0x91	; 145
    47b6:	76 e0       	ldi	r23, 0x06	; 6
    47b8:	c8 01       	movw	r24, r16
    47ba:	0e 94 b9 2d 	call	0x5b72	; 0x5b72 <memcmp_P>
    47be:	89 2b       	or	r24, r25
    47c0:	d9 f1       	breq	.+118    	; 0x4838 <process_sms_body+0x6d2>
    else if(memcmp_P(str, PSTR("pause_alarm;"), 12) == 0)
    47c2:	4c e0       	ldi	r20, 0x0C	; 12
    47c4:	50 e0       	ldi	r21, 0x00	; 0
    47c6:	67 e6       	ldi	r22, 0x67	; 103
    47c8:	76 e0       	ldi	r23, 0x06	; 6
    47ca:	c8 01       	movw	r24, r16
    47cc:	0e 94 b9 2d 	call	0x5b72	; 0x5b72 <memcmp_P>
    47d0:	89 2b       	or	r24, r25
    47d2:	09 f4       	brne	.+2      	; 0x47d6 <process_sms_body+0x670>
    47d4:	44 c0       	rjmp	.+136    	; 0x485e <process_sms_body+0x6f8>
    else if(memcmp_P(str, PSTR("autoguard;"), 10) == 0)
    47d6:	4a e0       	ldi	r20, 0x0A	; 10
    47d8:	50 e0       	ldi	r21, 0x00	; 0
    47da:	6b e4       	ldi	r22, 0x4B	; 75
    47dc:	76 e0       	ldi	r23, 0x06	; 6
    47de:	c8 01       	movw	r24, r16
    47e0:	0e 94 b9 2d 	call	0x5b72	; 0x5b72 <memcmp_P>
    47e4:	89 2b       	or	r24, r25
    47e6:	09 f4       	brne	.+2      	; 0x47ea <process_sms_body+0x684>
    47e8:	4f c0       	rjmp	.+158    	; 0x4888 <process_sms_body+0x722>
    else if(memcmp_P(str, PSTR("accept_calls;"), 13) == 0)
    47ea:	4d e0       	ldi	r20, 0x0D	; 13
    47ec:	50 e0       	ldi	r21, 0x00	; 0
    47ee:	6f e2       	ldi	r22, 0x2F	; 47
    47f0:	76 e0       	ldi	r23, 0x06	; 6
    47f2:	c8 01       	movw	r24, r16
    47f4:	0e 94 b9 2d 	call	0x5b72	; 0x5b72 <memcmp_P>
    47f8:	89 2b       	or	r24, r25
    47fa:	09 f4       	brne	.+2      	; 0x47fe <process_sms_body+0x698>
    47fc:	5a c0       	rjmp	.+180    	; 0x48b2 <process_sms_body+0x74c>
    else if(memcmp_P(str, PSTR("accept_sms;"), 11) == 0)
    47fe:	4b e0       	ldi	r20, 0x0B	; 11
    4800:	50 e0       	ldi	r21, 0x00	; 0
    4802:	62 e1       	ldi	r22, 0x12	; 18
    4804:	76 e0       	ldi	r23, 0x06	; 6
    4806:	c8 01       	movw	r24, r16
    4808:	0e 94 b9 2d 	call	0x5b72	; 0x5b72 <memcmp_P>
    480c:	89 2b       	or	r24, r25
    480e:	09 f4       	brne	.+2      	; 0x4812 <process_sms_body+0x6ac>
    4810:	65 c0       	rjmp	.+202    	; 0x48dc <process_sms_body+0x776>
    else if(memcmp_P(str, PSTR("ext_temp;"), 9) == 0)
    4812:	49 e0       	ldi	r20, 0x09	; 9
    4814:	50 e0       	ldi	r21, 0x00	; 0
    4816:	69 ef       	ldi	r22, 0xF9	; 249
    4818:	75 e0       	ldi	r23, 0x05	; 5
    481a:	c8 01       	movw	r24, r16
    481c:	0e 94 b9 2d 	call	0x5b72	; 0x5b72 <memcmp_P>
    4820:	89 2b       	or	r24, r25
    4822:	09 f4       	brne	.+2      	; 0x4826 <process_sms_body+0x6c0>
    4824:	70 c0       	rjmp	.+224    	; 0x4906 <process_sms_body+0x7a0>
            send_sms_p(PSTR("error"), get_phone_number());
    4826:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <get_phone_number>
    482a:	68 2f       	mov	r22, r24
    482c:	79 2f       	mov	r23, r25
    482e:	82 e3       	ldi	r24, 0x32	; 50
    4830:	98 e0       	ldi	r25, 0x08	; 8
    4832:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <send_sms_p>
    4836:	95 cd       	rjmp	.-1238   	; 0x4362 <process_sms_body+0x1fc>
        str += 9;
    4838:	07 5f       	subi	r16, 0xF7	; 247
    483a:	1f 4f       	sbci	r17, 0xFF	; 255
        sprintf_P(sms_text, PSTR("interval_after_button_m=%um;"), get_interval_after_button_m());
    483c:	0e 94 fe 10 	call	0x21fc	; 0x21fc <get_interval_after_button_m>
    4840:	1f 92       	push	r1
    4842:	8f 93       	push	r24
    4844:	5f 92       	push	r5
    4846:	4f 92       	push	r4
    4848:	ff 92       	push	r15
    484a:	ef 92       	push	r14
    484c:	0e 94 a7 2e 	call	0x5d4e	; 0x5d4e <sprintf_P>
        return str;
    4850:	0f 90       	pop	r0
    4852:	0f 90       	pop	r0
    4854:	0f 90       	pop	r0
    4856:	0f 90       	pop	r0
    4858:	0f 90       	pop	r0
    485a:	0f 90       	pop	r0
    485c:	92 cf       	rjmp	.-220    	; 0x4782 <process_sms_body+0x61c>
        str += 12;
    485e:	04 5f       	subi	r16, 0xF4	; 244
    4860:	1f 4f       	sbci	r17, 0xFF	; 255
        sprintf_P(sms_text, PSTR("pause_alarm=%us;"), get_pause_alarm_report_s());
    4862:	0e 94 22 11 	call	0x2244	; 0x2244 <get_pause_alarm_report_s>
    4866:	1f 92       	push	r1
    4868:	8f 93       	push	r24
    486a:	86 e5       	ldi	r24, 0x56	; 86
    486c:	96 e0       	ldi	r25, 0x06	; 6
    486e:	9f 93       	push	r25
    4870:	8f 93       	push	r24
    4872:	ff 92       	push	r15
    4874:	ef 92       	push	r14
    4876:	0e 94 a7 2e 	call	0x5d4e	; 0x5d4e <sprintf_P>
        return str;
    487a:	0f 90       	pop	r0
    487c:	0f 90       	pop	r0
    487e:	0f 90       	pop	r0
    4880:	0f 90       	pop	r0
    4882:	0f 90       	pop	r0
    4884:	0f 90       	pop	r0
    4886:	7d cf       	rjmp	.-262    	; 0x4782 <process_sms_body+0x61c>
        str += 10;
    4888:	06 5f       	subi	r16, 0xF6	; 246
    488a:	1f 4f       	sbci	r17, 0xFF	; 255
        sprintf_P(sms_text, PSTR("autoguard=%d;"), get_autoguard());
    488c:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <get_autoguard>
    4890:	1f 92       	push	r1
    4892:	8f 93       	push	r24
    4894:	8d e3       	ldi	r24, 0x3D	; 61
    4896:	96 e0       	ldi	r25, 0x06	; 6
    4898:	9f 93       	push	r25
    489a:	8f 93       	push	r24
    489c:	ff 92       	push	r15
    489e:	ef 92       	push	r14
    48a0:	0e 94 a7 2e 	call	0x5d4e	; 0x5d4e <sprintf_P>
        return str;
    48a4:	0f 90       	pop	r0
    48a6:	0f 90       	pop	r0
    48a8:	0f 90       	pop	r0
    48aa:	0f 90       	pop	r0
    48ac:	0f 90       	pop	r0
    48ae:	0f 90       	pop	r0
    48b0:	68 cf       	rjmp	.-304    	; 0x4782 <process_sms_body+0x61c>
        str += 13;
    48b2:	03 5f       	subi	r16, 0xF3	; 243
    48b4:	1f 4f       	sbci	r17, 0xFF	; 255
        sprintf_P(sms_text, PSTR("accept_calls=%d;"), get_accept_calls());
    48b6:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <get_accept_calls>
    48ba:	1f 92       	push	r1
    48bc:	8f 93       	push	r24
    48be:	8e e1       	ldi	r24, 0x1E	; 30
    48c0:	96 e0       	ldi	r25, 0x06	; 6
    48c2:	9f 93       	push	r25
    48c4:	8f 93       	push	r24
    48c6:	ff 92       	push	r15
    48c8:	ef 92       	push	r14
    48ca:	0e 94 a7 2e 	call	0x5d4e	; 0x5d4e <sprintf_P>
        return str;
    48ce:	0f 90       	pop	r0
    48d0:	0f 90       	pop	r0
    48d2:	0f 90       	pop	r0
    48d4:	0f 90       	pop	r0
    48d6:	0f 90       	pop	r0
    48d8:	0f 90       	pop	r0
    48da:	53 cf       	rjmp	.-346    	; 0x4782 <process_sms_body+0x61c>
        str += 11;
    48dc:	05 5f       	subi	r16, 0xF5	; 245
    48de:	1f 4f       	sbci	r17, 0xFF	; 255
        sprintf_P(sms_text, PSTR("accept_sms=%d;"), get_accept_sms());
    48e0:	0e 94 da 10 	call	0x21b4	; 0x21b4 <get_accept_sms>
    48e4:	1f 92       	push	r1
    48e6:	8f 93       	push	r24
    48e8:	83 e0       	ldi	r24, 0x03	; 3
    48ea:	96 e0       	ldi	r25, 0x06	; 6
    48ec:	9f 93       	push	r25
    48ee:	8f 93       	push	r24
    48f0:	ff 92       	push	r15
    48f2:	ef 92       	push	r14
    48f4:	0e 94 a7 2e 	call	0x5d4e	; 0x5d4e <sprintf_P>
        return str;
    48f8:	0f 90       	pop	r0
    48fa:	0f 90       	pop	r0
    48fc:	0f 90       	pop	r0
    48fe:	0f 90       	pop	r0
    4900:	0f 90       	pop	r0
    4902:	0f 90       	pop	r0
    4904:	3e cf       	rjmp	.-388    	; 0x4782 <process_sms_body+0x61c>
        str += 9;
    4906:	07 5f       	subi	r16, 0xF7	; 247
    4908:	1f 4f       	sbci	r17, 0xFF	; 255
        sprintf_P(sms_text, PSTR("ext_temp=%d;"), get_ext_temp());
    490a:	0e 94 2b 11 	call	0x2256	; 0x2256 <get_ext_temp>
    490e:	1f 92       	push	r1
    4910:	8f 93       	push	r24
    4912:	8c ee       	ldi	r24, 0xEC	; 236
    4914:	95 e0       	ldi	r25, 0x05	; 5
    4916:	9f 93       	push	r25
    4918:	8f 93       	push	r24
    491a:	ff 92       	push	r15
    491c:	ef 92       	push	r14
    491e:	0e 94 a7 2e 	call	0x5d4e	; 0x5d4e <sprintf_P>
        return str;
    4922:	0f 90       	pop	r0
    4924:	0f 90       	pop	r0
    4926:	0f 90       	pop	r0
    4928:	0f 90       	pop	r0
    492a:	0f 90       	pop	r0
    492c:	0f 90       	pop	r0
    492e:	29 cf       	rjmp	.-430    	; 0x4782 <process_sms_body+0x61c>
        if((find_phone_in_phone_list(get_phone_number(), ADMIN_LIST) == 0))
    4930:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <get_phone_number>
    4934:	61 e0       	ldi	r22, 0x01	; 1
    4936:	0e 94 81 20 	call	0x4102	; 0x4102 <find_phone_in_phone_list>
    493a:	88 23       	and	r24, r24
    493c:	89 f0       	breq	.+34     	; 0x4960 <process_sms_body+0x7fa>
        set_first_usage(0);
    493e:	80 e0       	ldi	r24, 0x00	; 0
    4940:	0e 94 16 11 	call	0x222c	; 0x222c <set_first_usage>
        EEPROM_update();
    4944:	0e 94 c8 10 	call	0x2190	; 0x2190 <EEPROM_update>
        send_sms_p(PSTR("Device reset default, send: phones=NUMBER_PHONES1,NUMBER_PHONES2;"), get_phone_number());
    4948:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <get_phone_number>
    494c:	68 2f       	mov	r22, r24
    494e:	79 2f       	mov	r23, r25
    4950:	84 ed       	ldi	r24, 0xD4	; 212
    4952:	97 e0       	ldi	r25, 0x07	; 7
    4954:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <send_sms_p>
        reset_mcu(1);
    4958:	81 e0       	ldi	r24, 0x01	; 1
    495a:	0e 94 45 1b 	call	0x368a	; 0x368a <reset_mcu>
    495e:	01 cd       	rjmp	.-1534   	; 0x4362 <process_sms_body+0x1fc>
            send_sms_p(PSTR("Access denied"), get_phone_number());
    4960:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <get_phone_number>
    4964:	68 2f       	mov	r22, r24
    4966:	79 2f       	mov	r23, r25
    4968:	86 e1       	ldi	r24, 0x16	; 22
    496a:	98 e0       	ldi	r25, 0x08	; 8
    496c:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <send_sms_p>
            return;
    4970:	f8 cc       	rjmp	.-1552   	; 0x4362 <process_sms_body+0x1fc>
        if((find_phone_in_phone_list(get_phone_number(), ADMIN_LIST) == 0))
    4972:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <get_phone_number>
    4976:	61 e0       	ldi	r22, 0x01	; 1
    4978:	0e 94 81 20 	call	0x4102	; 0x4102 <find_phone_in_phone_list>
    497c:	88 23       	and	r24, r24
    497e:	61 f0       	breq	.+24     	; 0x4998 <process_sms_body+0x832>
        send_sms_p(PSTR("Reset command accepted."), get_phone_number());
    4980:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <get_phone_number>
    4984:	68 2f       	mov	r22, r24
    4986:	79 2f       	mov	r23, r25
    4988:	86 ea       	ldi	r24, 0xA6	; 166
    498a:	97 e0       	ldi	r25, 0x07	; 7
    498c:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <send_sms_p>
        reset_mcu(1);
    4990:	81 e0       	ldi	r24, 0x01	; 1
    4992:	0e 94 45 1b 	call	0x368a	; 0x368a <reset_mcu>
    4996:	e5 cc       	rjmp	.-1590   	; 0x4362 <process_sms_body+0x1fc>
            send_sms_p(PSTR("Access denied"), get_phone_number());
    4998:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <get_phone_number>
    499c:	68 2f       	mov	r22, r24
    499e:	79 2f       	mov	r23, r25
    49a0:	8e eb       	ldi	r24, 0xBE	; 190
    49a2:	97 e0       	ldi	r25, 0x07	; 7
    49a4:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <send_sms_p>
            return;
    49a8:	dc cc       	rjmp	.-1608   	; 0x4362 <process_sms_body+0x1fc>
        if((find_phone_in_phone_list(get_phone_number(), ADMIN_LIST) == 0))
    49aa:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <get_phone_number>
    49ae:	61 e0       	ldi	r22, 0x01	; 1
    49b0:	0e 94 81 20 	call	0x4102	; 0x4102 <find_phone_in_phone_list>
    49b4:	88 23       	and	r24, r24
    49b6:	49 f0       	breq	.+18     	; 0x49ca <process_sms_body+0x864>
        send_sms_p(help_text, get_phone_number());
    49b8:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <get_phone_number>
    49bc:	68 2f       	mov	r22, r24
    49be:	79 2f       	mov	r23, r25
    49c0:	87 ec       	ldi	r24, 0xC7	; 199
    49c2:	99 e0       	ldi	r25, 0x09	; 9
    49c4:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <send_sms_p>
    49c8:	cc cc       	rjmp	.-1640   	; 0x4362 <process_sms_body+0x1fc>
            send_sms_p(PSTR("Access denied"), get_phone_number());
    49ca:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <get_phone_number>
    49ce:	68 2f       	mov	r22, r24
    49d0:	79 2f       	mov	r23, r25
    49d2:	82 e9       	ldi	r24, 0x92	; 146
    49d4:	97 e0       	ldi	r25, 0x07	; 7
    49d6:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <send_sms_p>
            return;
    49da:	c3 cc       	rjmp	.-1658   	; 0x4362 <process_sms_body+0x1fc>
        if((find_phone_in_phone_list(get_phone_number(), ADMIN_LIST) == 0))
    49dc:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <get_phone_number>
    49e0:	61 e0       	ldi	r22, 0x01	; 1
    49e2:	0e 94 81 20 	call	0x4102	; 0x4102 <find_phone_in_phone_list>
    49e6:	88 23       	and	r24, r24
    49e8:	49 f0       	breq	.+18     	; 0x49fc <process_sms_body+0x896>
        send_sms_p(help_get, get_phone_number());
    49ea:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <get_phone_number>
    49ee:	68 2f       	mov	r22, r24
    49f0:	79 2f       	mov	r23, r25
    49f2:	86 e2       	ldi	r24, 0x26	; 38
    49f4:	99 e0       	ldi	r25, 0x09	; 9
    49f6:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <send_sms_p>
    49fa:	b3 cc       	rjmp	.-1690   	; 0x4362 <process_sms_body+0x1fc>
            send_sms_p(PSTR("Access denied"), get_phone_number());
    49fc:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <get_phone_number>
    4a00:	68 2f       	mov	r22, r24
    4a02:	79 2f       	mov	r23, r25
    4a04:	8b e7       	ldi	r24, 0x7B	; 123
    4a06:	97 e0       	ldi	r25, 0x07	; 7
    4a08:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <send_sms_p>
            return;
    4a0c:	aa cc       	rjmp	.-1708   	; 0x4362 <process_sms_body+0x1fc>
        if((find_phone_in_phone_list(get_phone_number(), ADMIN_LIST) == 0))
    4a0e:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <get_phone_number>
    4a12:	61 e0       	ldi	r22, 0x01	; 1
    4a14:	0e 94 81 20 	call	0x4102	; 0x4102 <find_phone_in_phone_list>
    4a18:	88 23       	and	r24, r24
    4a1a:	49 f0       	breq	.+18     	; 0x4a2e <process_sms_body+0x8c8>
        send_sms_p(help_set, get_phone_number());
    4a1c:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <get_phone_number>
    4a20:	68 2f       	mov	r22, r24
    4a22:	79 2f       	mov	r23, r25
    4a24:	85 e8       	ldi	r24, 0x85	; 133
    4a26:	98 e0       	ldi	r25, 0x08	; 8
    4a28:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <send_sms_p>
    4a2c:	9a cc       	rjmp	.-1740   	; 0x4362 <process_sms_body+0x1fc>
            send_sms_p(PSTR("Access denied"), get_phone_number());
    4a2e:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <get_phone_number>
    4a32:	68 2f       	mov	r22, r24
    4a34:	79 2f       	mov	r23, r25
    4a36:	84 e6       	ldi	r24, 0x64	; 100
    4a38:	97 e0       	ldi	r25, 0x07	; 7
    4a3a:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <send_sms_p>
            return;
    4a3e:	91 cc       	rjmp	.-1758   	; 0x4362 <process_sms_body+0x1fc>
        if((find_phone_in_phone_list(get_phone_number(), ADMIN_LIST) == 0))
    4a40:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <get_phone_number>
    4a44:	61 e0       	ldi	r22, 0x01	; 1
    4a46:	0e 94 81 20 	call	0x4102	; 0x4102 <find_phone_in_phone_list>
    4a4a:	88 23       	and	r24, r24
    4a4c:	29 f0       	breq	.+10     	; 0x4a58 <process_sms_body+0x8f2>
        send_sms_report(get_phone_number());
    4a4e:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <get_phone_number>
    4a52:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <send_sms_report>
    4a56:	85 cc       	rjmp	.-1782   	; 0x4362 <process_sms_body+0x1fc>
            send_sms_p(PSTR("Access denied"), get_phone_number());
    4a58:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <get_phone_number>
    4a5c:	68 2f       	mov	r22, r24
    4a5e:	79 2f       	mov	r23, r25
    4a60:	8e e4       	ldi	r24, 0x4E	; 78
    4a62:	97 e0       	ldi	r25, 0x07	; 7
    4a64:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <send_sms_p>
            return;
    4a68:	7c cc       	rjmp	.-1800   	; 0x4362 <process_sms_body+0x1fc>
            send_sms_p(PSTR("Access denied"), get_phone_number());
    4a6a:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <get_phone_number>
    4a6e:	68 2f       	mov	r22, r24
    4a70:	79 2f       	mov	r23, r25
    4a72:	8c e1       	ldi	r24, 0x1C	; 28
    4a74:	97 e0       	ldi	r25, 0x07	; 7
    4a76:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <send_sms_p>
            return;
    4a7a:	73 cc       	rjmp	.-1818   	; 0x4362 <process_sms_body+0x1fc>
        if(i && !err)
    4a7c:	33 20       	and	r3, r3
    4a7e:	09 f4       	brne	.+2      	; 0x4a82 <process_sms_body+0x91c>
    4a80:	70 cc       	rjmp	.-1824   	; 0x4362 <process_sms_body+0x1fc>
            send_sms(sms_text, get_phone_number());
    4a82:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <get_phone_number>
    4a86:	68 2f       	mov	r22, r24
    4a88:	79 2f       	mov	r23, r25
    4a8a:	ce 01       	movw	r24, r28
    4a8c:	01 96       	adiw	r24, 0x01	; 1
    4a8e:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <send_sms>
            softuart_puts_p(PSTR("send_sms\r\n"));
    4a92:	88 e3       	ldi	r24, 0x38	; 56
    4a94:	98 e0       	ldi	r25, 0x08	; 8
    4a96:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <softuart_puts_p>
    4a9a:	63 cc       	rjmp	.-1850   	; 0x4362 <process_sms_body+0x1fc>
        if(i && !err)
    4a9c:	ff 20       	and	r15, r15
    4a9e:	09 f4       	brne	.+2      	; 0x4aa2 <process_sms_body+0x93c>
    4aa0:	55 cc       	rjmp	.-1878   	; 0x434c <process_sms_body+0x1e6>
            EEPROM_update();
    4aa2:	0e 94 c8 10 	call	0x2190	; 0x2190 <EEPROM_update>
            send_sms_p(PSTR("ok"), get_phone_number());
    4aa6:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <get_phone_number>
    4aaa:	68 2f       	mov	r22, r24
    4aac:	79 2f       	mov	r23, r25
    4aae:	8c e5       	ldi	r24, 0x5C	; 92
    4ab0:	98 e0       	ldi	r25, 0x08	; 8
    4ab2:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <send_sms_p>
    4ab6:	55 cc       	rjmp	.-1878   	; 0x4362 <process_sms_body+0x1fc>
        if(*++ptr != ';')
    4ab8:	c8 01       	movw	r24, r16
    4aba:	08 96       	adiw	r24, 0x08	; 8
    4abc:	9a 83       	std	Y+2, r25	; 0x02
    4abe:	89 83       	std	Y+1, r24	; 0x01
    4ac0:	80 85       	ldd	r24, Z+8	; 0x08
    4ac2:	8b 33       	cpi	r24, 0x3B	; 59
    4ac4:	09 f0       	breq	.+2      	; 0x4ac8 <process_sms_body+0x962>
    4ac6:	42 cc       	rjmp	.-1916   	; 0x434c <process_sms_body+0x1e6>
            buzzer_stop();
    4ac8:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <buzzer_stop>
        ptr++;
    4acc:	09 81       	ldd	r16, Y+1	; 0x01
    4ace:	1a 81       	ldd	r17, Y+2	; 0x02
    4ad0:	0f 5f       	subi	r16, 0xFF	; 255
    4ad2:	1f 4f       	sbci	r17, 0xFF	; 255
        return ptr;
    4ad4:	04 cc       	rjmp	.-2040   	; 0x42de <process_sms_body+0x178>

00004ad6 <set_my_phone>:
//*******************************************************************************************************************

void set_my_phone(void)
{
    set_phones("+380713318090;", &get_phones(0)[0], 1);
    4ad6:	80 e0       	ldi	r24, 0x00	; 0
    4ad8:	0e 94 0d 11 	call	0x221a	; 0x221a <get_phones>
    4adc:	68 2f       	mov	r22, r24
    4ade:	79 2f       	mov	r23, r25
    4ae0:	41 e0       	ldi	r20, 0x01	; 1
    4ae2:	89 ec       	ldi	r24, 0xC9	; 201
    4ae4:	91 e0       	ldi	r25, 0x01	; 1
    4ae6:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <set_phones>
    set_admin_mode(1);
    4aea:	81 e0       	ldi	r24, 0x01	; 1
    4aec:	0e 94 1c 11 	call	0x2238	; 0x2238 <set_admin_mode>
}
    4af0:	08 95       	ret

00004af2 <__vector_7>:

#define set_tx_pin_high()      ( SOFTUART_TXPORT |=  ( 1 << SOFTUART_TXBIT ) )
#define set_tx_pin_low()       ( SOFTUART_TXPORT &= ~( 1 << SOFTUART_TXBIT ) )

ISR(SOFTUART_T_COMP_LABEL)
{
    4af2:	1f 92       	push	r1
    4af4:	1f b6       	in	r1, 0x3f	; 63
    4af6:	1f 92       	push	r1
    4af8:	11 24       	eor	r1, r1
    4afa:	8f 93       	push	r24
    4afc:	9f 93       	push	r25
	unsigned char tmp;
	if ( flag_tx_busy == SU_TRUE ) {
    4afe:	80 91 f4 03 	lds	r24, 0x03F4	; 0x8003f4 <flag_tx_busy>
    4b02:	81 30       	cpi	r24, 0x01	; 1
    4b04:	31 f0       	breq	.+12     	; 0x4b12 <__vector_7+0x20>
		}
		timer_tx_ctr = tmp;
	}


}
    4b06:	9f 91       	pop	r25
    4b08:	8f 91       	pop	r24
    4b0a:	1f 90       	pop	r1
    4b0c:	1f be       	out	0x3f, r1	; 63
    4b0e:	1f 90       	pop	r1
    4b10:	18 95       	reti
		tmp = timer_tx_ctr;
    4b12:	80 91 f3 03 	lds	r24, 0x03F3	; 0x8003f3 <timer_tx_ctr>
		if ( --tmp == 0 ) { // if ( --timer_tx_ctr <= 0 )
    4b16:	9f ef       	ldi	r25, 0xFF	; 255
    4b18:	98 0f       	add	r25, r24
    4b1a:	81 30       	cpi	r24, 0x01	; 1
    4b1c:	e1 f4       	brne	.+56     	; 0x4b56 <__vector_7+0x64>
			if ( internal_tx_buffer & 0x01 ) {
    4b1e:	80 91 f0 03 	lds	r24, 0x03F0	; 0x8003f0 <internal_tx_buffer>
    4b22:	90 91 f1 03 	lds	r25, 0x03F1	; 0x8003f1 <internal_tx_buffer+0x1>
    4b26:	80 ff       	sbrs	r24, 0
    4b28:	19 c0       	rjmp	.+50     	; 0x4b5c <__vector_7+0x6a>
				set_tx_pin_high();
    4b2a:	5b 9a       	sbi	0x0b, 3	; 11
			internal_tx_buffer >>= 1;
    4b2c:	80 91 f0 03 	lds	r24, 0x03F0	; 0x8003f0 <internal_tx_buffer>
    4b30:	90 91 f1 03 	lds	r25, 0x03F1	; 0x8003f1 <internal_tx_buffer+0x1>
    4b34:	96 95       	lsr	r25
    4b36:	87 95       	ror	r24
    4b38:	90 93 f1 03 	sts	0x03F1, r25	; 0x8003f1 <internal_tx_buffer+0x1>
    4b3c:	80 93 f0 03 	sts	0x03F0, r24	; 0x8003f0 <internal_tx_buffer>
			if ( --bits_left_in_tx == 0 ) {
    4b40:	80 91 f2 03 	lds	r24, 0x03F2	; 0x8003f2 <bits_left_in_tx>
    4b44:	81 50       	subi	r24, 0x01	; 1
    4b46:	80 93 f2 03 	sts	0x03F2, r24	; 0x8003f2 <bits_left_in_tx>
			tmp = 3; // timer_tx_ctr = 3;
    4b4a:	93 e0       	ldi	r25, 0x03	; 3
			if ( --bits_left_in_tx == 0 ) {
    4b4c:	81 11       	cpse	r24, r1
    4b4e:	03 c0       	rjmp	.+6      	; 0x4b56 <__vector_7+0x64>
				flag_tx_busy = SU_FALSE;
    4b50:	10 92 f4 03 	sts	0x03F4, r1	; 0x8003f4 <flag_tx_busy>
			tmp = 3; // timer_tx_ctr = 3;
    4b54:	93 e0       	ldi	r25, 0x03	; 3
		timer_tx_ctr = tmp;
    4b56:	90 93 f3 03 	sts	0x03F3, r25	; 0x8003f3 <timer_tx_ctr>
}
    4b5a:	d5 cf       	rjmp	.-86     	; 0x4b06 <__vector_7+0x14>
				set_tx_pin_low();
    4b5c:	5b 98       	cbi	0x0b, 3	; 11
    4b5e:	e6 cf       	rjmp	.-52     	; 0x4b2c <__vector_7+0x3a>

00004b60 <softuart_init>:
}
#endif
void softuart_init( void )
{
#if(DEBUG==1)
	flag_tx_busy  = SU_FALSE;
    4b60:	10 92 f4 03 	sts	0x03F4, r1	; 0x8003f4 <flag_tx_busy>
	set_tx_pin_high(); /* mt: set to high to avoid garbage on init */
    4b64:	5b 9a       	sbi	0x0b, 3	; 11
	SOFTUART_TXDDR |=  ( 1 << SOFTUART_TXBIT );
    4b66:	53 9a       	sbi	0x0a, 3	; 10
	sreg_tmp = SREG;
    4b68:	9f b7       	in	r25, 0x3f	; 63
	cli();
    4b6a:	f8 94       	cli
	SOFTUART_T_COMP_REG = SOFTUART_TIMERTOP;     /* set top */
    4b6c:	8f e1       	ldi	r24, 0x1F	; 31
    4b6e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	SOFTUART_T_CONTR_REGA = SOFTUART_CTC_MASKA | SOFTUART_PRESC_MASKA;
    4b72:	82 e0       	ldi	r24, 0x02	; 2
    4b74:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	SOFTUART_T_CONTR_REGB = SOFTUART_CTC_MASKB | SOFTUART_PRESC_MASKB;
    4b78:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	SOFTUART_T_INTCTL_REG |= SOFTUART_CMPINT_EN_MASK;
    4b7c:	e0 e7       	ldi	r30, 0x70	; 112
    4b7e:	f0 e0       	ldi	r31, 0x00	; 0
    4b80:	80 81       	ld	r24, Z
    4b82:	82 60       	ori	r24, 0x02	; 2
    4b84:	80 83       	st	Z, r24
	SOFTUART_T_CNT_REG = 0; /* reset counter */
    4b86:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	SREG = sreg_tmp;
    4b8a:	9f bf       	out	0x3f, r25	; 63
	io_init();
	timer_init();
#endif
}
    4b8c:	08 95       	ret

00004b8e <softuart_transmit_busy>:

unsigned char softuart_transmit_busy( void )
{
	return ( flag_tx_busy == SU_TRUE ) ? 1 : 0;
    4b8e:	90 91 f4 03 	lds	r25, 0x03F4	; 0x8003f4 <flag_tx_busy>
    4b92:	81 e0       	ldi	r24, 0x01	; 1
    4b94:	91 30       	cpi	r25, 0x01	; 1
    4b96:	09 f0       	breq	.+2      	; 0x4b9a <softuart_transmit_busy+0xc>
    4b98:	80 e0       	ldi	r24, 0x00	; 0
}
    4b9a:	08 95       	ret

00004b9c <softuart_putchar>:

void softuart_putchar(  char ch )
{
#if(DEBUG==1)
	while ( flag_tx_busy == SU_TRUE ) {
    4b9c:	90 91 f4 03 	lds	r25, 0x03F4	; 0x8003f4 <flag_tx_busy>
    4ba0:	91 30       	cpi	r25, 0x01	; 1
    4ba2:	e1 f3       	breq	.-8      	; 0x4b9c <softuart_putchar>
		; // wait for transmitter ready
		  // add watchdog-reset here if needed;
	}

	// invoke_UART_transmit
	timer_tx_ctr       = 3;
    4ba4:	93 e0       	ldi	r25, 0x03	; 3
    4ba6:	90 93 f3 03 	sts	0x03F3, r25	; 0x8003f3 <timer_tx_ctr>
	bits_left_in_tx    = TX_NUM_OF_BITS;
    4baa:	9a e0       	ldi	r25, 0x0A	; 10
    4bac:	90 93 f2 03 	sts	0x03F2, r25	; 0x8003f2 <bits_left_in_tx>
	internal_tx_buffer = ( ch << 1 ) | 0x200;
    4bb0:	88 0f       	add	r24, r24
    4bb2:	99 0b       	sbc	r25, r25
    4bb4:	92 60       	ori	r25, 0x02	; 2
    4bb6:	90 93 f1 03 	sts	0x03F1, r25	; 0x8003f1 <internal_tx_buffer+0x1>
    4bba:	80 93 f0 03 	sts	0x03F0, r24	; 0x8003f0 <internal_tx_buffer>
	flag_tx_busy       = SU_TRUE;
    4bbe:	81 e0       	ldi	r24, 0x01	; 1
    4bc0:	80 93 f4 03 	sts	0x03F4, r24	; 0x8003f4 <flag_tx_busy>
#endif
}
    4bc4:	08 95       	ret

00004bc6 <softuart_puts>:

void softuart_puts( char *s )
{
    4bc6:	cf 93       	push	r28
    4bc8:	df 93       	push	r29
    4bca:	c8 2f       	mov	r28, r24
    4bcc:	d9 2f       	mov	r29, r25
#if(DEBUG==1)
	while ( *s ) {
    4bce:	88 81       	ld	r24, Y
    4bd0:	88 23       	and	r24, r24
    4bd2:	31 f0       	breq	.+12     	; 0x4be0 <softuart_puts+0x1a>
    4bd4:	21 96       	adiw	r28, 0x01	; 1
		softuart_putchar( *s++ );
    4bd6:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <softuart_putchar>
	while ( *s ) {
    4bda:	89 91       	ld	r24, Y+
    4bdc:	81 11       	cpse	r24, r1
    4bde:	fb cf       	rjmp	.-10     	; 0x4bd6 <softuart_puts+0x10>
	}
#endif
}
    4be0:	df 91       	pop	r29
    4be2:	cf 91       	pop	r28
    4be4:	08 95       	ret

00004be6 <softuart_puts_ln>:
void softuart_puts_ln(  char *s )
{
    4be6:	cf 93       	push	r28
    4be8:	df 93       	push	r29
    4bea:	c8 2f       	mov	r28, r24
    4bec:	d9 2f       	mov	r29, r25
#if(DEBUG==1)
	while ( *s ) {
    4bee:	88 81       	ld	r24, Y
    4bf0:	88 23       	and	r24, r24
    4bf2:	31 f0       	breq	.+12     	; 0x4c00 <softuart_puts_ln+0x1a>
    4bf4:	21 96       	adiw	r28, 0x01	; 1
		softuart_putchar( *s++ );
    4bf6:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <softuart_putchar>
	while ( *s ) {
    4bfa:	89 91       	ld	r24, Y+
    4bfc:	81 11       	cpse	r24, r1
    4bfe:	fb cf       	rjmp	.-10     	; 0x4bf6 <softuart_puts_ln+0x10>
	}
	softuart_puts("\r\n" );
    4c00:	88 ed       	ldi	r24, 0xD8	; 216
    4c02:	91 e0       	ldi	r25, 0x01	; 1
    4c04:	0e 94 e3 25 	call	0x4bc6	; 0x4bc6 <softuart_puts>
#endif
}
    4c08:	df 91       	pop	r29
    4c0a:	cf 91       	pop	r28
    4c0c:	08 95       	ret

00004c0e <softuart_puts_p>:
void softuart_puts_p( const char *prg_s )
{
    4c0e:	cf 93       	push	r28
    4c10:	df 93       	push	r29
    4c12:	e8 2f       	mov	r30, r24
    4c14:	f9 2f       	mov	r31, r25
#if(DEBUG==1)
	char c;

	while ( ( c = pgm_read_byte( prg_s++ ) ) ) {
    4c16:	ef 01       	movw	r28, r30
    4c18:	21 96       	adiw	r28, 0x01	; 1
    4c1a:	84 91       	lpm	r24, Z
    4c1c:	88 23       	and	r24, r24
    4c1e:	39 f0       	breq	.+14     	; 0x4c2e <softuart_puts_p+0x20>
		softuart_putchar(c);
    4c20:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <softuart_putchar>
	while ( ( c = pgm_read_byte( prg_s++ ) ) ) {
    4c24:	fe 01       	movw	r30, r28
    4c26:	84 91       	lpm	r24, Z
    4c28:	21 96       	adiw	r28, 0x01	; 1
    4c2a:	81 11       	cpse	r24, r1
    4c2c:	f9 cf       	rjmp	.-14     	; 0x4c20 <softuart_puts_p+0x12>
	}
	softuart_puts( "\r\n" );
    4c2e:	88 ed       	ldi	r24, 0xD8	; 216
    4c30:	91 e0       	ldi	r25, 0x01	; 1
    4c32:	0e 94 e3 25 	call	0x4bc6	; 0x4bc6 <softuart_puts>
#endif
}
    4c36:	df 91       	pop	r29
    4c38:	cf 91       	pop	r28
    4c3a:	08 95       	ret

00004c3c <timer1_init>:
//*******************************************************************************************************************

// период переполнения 10 мс
void timer1_init(void)
{
    cli(); // stop interrupts
    4c3c:	f8 94       	cli
    TCCR1A = 0;
    4c3e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    TCCR1B = 0;
    4c42:	e1 e8       	ldi	r30, 0x81	; 129
    4c44:	f0 e0       	ldi	r31, 0x00	; 0
    4c46:	10 82       	st	Z, r1
    TCNT1 = 0;
    4c48:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    4c4c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>

    // 100 Hz (7372800/((71+1)*1024))
    OCR1A = 71;
    4c50:	87 e4       	ldi	r24, 0x47	; 71
    4c52:	90 e0       	ldi	r25, 0x00	; 0
    4c54:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    4c58:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    // CTC
    TCCR1B |= (1 << WGM12);
    4c5c:	80 81       	ld	r24, Z
    4c5e:	88 60       	ori	r24, 0x08	; 8
    4c60:	80 83       	st	Z, r24
    // Prescaler 1024
    TCCR1B |= (1 << CS12) | (1 << CS10);
    4c62:	80 81       	ld	r24, Z
    4c64:	85 60       	ori	r24, 0x05	; 5
    4c66:	80 83       	st	Z, r24
    // Output Compare Match A Interrupt Enable
    TIMSK1 |= (1 << OCIE1A);
    4c68:	ef e6       	ldi	r30, 0x6F	; 111
    4c6a:	f0 e0       	ldi	r31, 0x00	; 0
    4c6c:	80 81       	ld	r24, Z
    4c6e:	82 60       	ori	r24, 0x02	; 2
    4c70:	80 83       	st	Z, r24

}
    4c72:	08 95       	ret

00004c74 <buzzer_non_block>:

//*******************************************************************************************************************

void buzzer_non_block(uint16_t time_to_buz)
{
    cli();
    4c74:	f8 94       	cli
    buz_on = 1;
    4c76:	21 e0       	ldi	r18, 0x01	; 1
    4c78:	20 93 09 04 	sts	0x0409, r18	; 0x800409 <buz_on>
    buz_counter = time_to_buz;
    4c7c:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <buz_counter>
    4c80:	90 93 08 04 	sts	0x0408, r25	; 0x800408 <buz_counter+0x1>
    DigitalWrite(PIN_BUZZER, HIGH);
    4c84:	29 9a       	sbi	0x05, 1	; 5
    sei();
    4c86:	78 94       	sei
}
    4c88:	08 95       	ret

00004c8a <buzzer_stop>:

//*******************************************************************************************************************

void buzzer_stop(void)
{
    buz_on = 0;
    4c8a:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <buz_on>
    buz_counter = 0;
    4c8e:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <buz_counter+0x1>
    4c92:	10 92 07 04 	sts	0x0407, r1	; 0x800407 <buz_counter>
    DigitalWrite(PIN_BUZZER, LOW);
    4c96:	29 98       	cbi	0x05, 1	; 5
}
    4c98:	08 95       	ret

00004c9a <beep_non_block>:
//**********************************************************
void beep_non_block(uint16_t time_beep)
{
    cli();
    4c9a:	f8 94       	cli
    beep_on = 1;
    4c9c:	21 e0       	ldi	r18, 0x01	; 1
    4c9e:	20 93 06 04 	sts	0x0406, r18	; 0x800406 <beep_on>
    beep_counter = time_beep;
    4ca2:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <beep_counter>
    4ca6:	90 93 05 04 	sts	0x0405, r25	; 0x800405 <beep_counter+0x1>
    DigitalWrite(PIN_BEEP, HIGH);
    4caa:	2a 9a       	sbi	0x05, 2	; 5
    sei();
    4cac:	78 94       	sei
}
    4cae:	08 95       	ret

00004cb0 <__vector_11>:
}
//*******************************************************************************************************************

// прерывание вызывается с периодом 10 мс
ISR(TIMER1_COMPA_vect)
{
    4cb0:	1f 92       	push	r1
    4cb2:	0f 92       	push	r0
    4cb4:	0f b6       	in	r0, 0x3f	; 63
    4cb6:	0f 92       	push	r0
    4cb8:	11 24       	eor	r1, r1
    4cba:	2f 93       	push	r18
    4cbc:	3f 93       	push	r19
    4cbe:	4f 93       	push	r20
    4cc0:	5f 93       	push	r21
    4cc2:	6f 93       	push	r22
    4cc4:	7f 93       	push	r23
    4cc6:	8f 93       	push	r24
    4cc8:	9f 93       	push	r25
    4cca:	af 93       	push	r26
    4ccc:	bf 93       	push	r27
    4cce:	ef 93       	push	r30
    4cd0:	ff 93       	push	r31
    static uint8_t i=0;
    static uint8_t j=0;
    led_management();
    4cd2:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <led_management>
    check_button();
    4cd6:	0e 94 08 1f 	call	0x3e10	; 0x3e10 <check_button>
    check_single_sensor();
    4cda:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <check_single_sensor>
    check_door_sensor();
    4cde:	0e 94 75 1f 	call	0x3eea	; 0x3eea <check_door_sensor>
    check_ext_mot_sensor();
    4ce2:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <check_ext_mot_sensor>
    check_smoke_sensor();
    4ce6:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <check_smoke_sensor>
    if(beep_on)
    4cea:	80 91 06 04 	lds	r24, 0x0406	; 0x800406 <beep_on>
    4cee:	88 23       	and	r24, r24
    4cf0:	69 f0       	breq	.+26     	; 0x4d0c <__vector_11+0x5c>
        if(beep_counter >= 10)
    4cf2:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <beep_counter>
    4cf6:	90 91 05 04 	lds	r25, 0x0405	; 0x800405 <beep_counter+0x1>
    4cfa:	8a 30       	cpi	r24, 0x0A	; 10
    4cfc:	91 05       	cpc	r25, r1
    4cfe:	08 f4       	brcc	.+2      	; 0x4d02 <__vector_11+0x52>
    4d00:	4f c0       	rjmp	.+158    	; 0x4da0 <__vector_11+0xf0>
            beep_counter -= 10;
    4d02:	0a 97       	sbiw	r24, 0x0a	; 10
    4d04:	90 93 05 04 	sts	0x0405, r25	; 0x800405 <beep_counter+0x1>
    4d08:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <beep_counter>
    if(buz_on)
    4d0c:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <buz_on>
    4d10:	88 23       	and	r24, r24
    4d12:	d1 f0       	breq	.+52     	; 0x4d48 <__vector_11+0x98>
        if(buz_counter >= 10)
    4d14:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <buz_counter>
    4d18:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <buz_counter+0x1>
    4d1c:	8a 30       	cpi	r24, 0x0A	; 10
    4d1e:	91 05       	cpc	r25, r1
    4d20:	08 f4       	brcc	.+2      	; 0x4d24 <__vector_11+0x74>
    4d22:	46 c0       	rjmp	.+140    	; 0x4db0 <__vector_11+0x100>
            buz_counter -= 10;
    4d24:	0a 97       	sbiw	r24, 0x0a	; 10
    4d26:	90 93 08 04 	sts	0x0408, r25	; 0x800408 <buz_counter+0x1>
    4d2a:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <buz_counter>
            cnt++;
    4d2e:	80 91 f5 03 	lds	r24, 0x03F5	; 0x8003f5 <cnt.0>
    4d32:	8f 5f       	subi	r24, 0xFF	; 255
    4d34:	80 93 f5 03 	sts	0x03F5, r24	; 0x8003f5 <cnt.0>
            if(cnt >= 40) // 400ms
    4d38:	88 32       	cpi	r24, 0x28	; 40
    4d3a:	30 f0       	brcs	.+12     	; 0x4d48 <__vector_11+0x98>
                DigitalLevelToggle(PIN_BUZZER);
    4d3c:	85 b1       	in	r24, 0x05	; 5
    4d3e:	92 e0       	ldi	r25, 0x02	; 2
    4d40:	89 27       	eor	r24, r25
    4d42:	85 b9       	out	0x05, r24	; 5
                cnt = 0;
    4d44:	10 92 f5 03 	sts	0x03F5, r1	; 0x8003f5 <cnt.0>
    beep_control();
    buzzer_control();
    time_ms+=10;
    4d48:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <time_ms>
    4d4c:	90 91 13 04 	lds	r25, 0x0413	; 0x800413 <time_ms+0x1>
    4d50:	a0 91 14 04 	lds	r26, 0x0414	; 0x800414 <time_ms+0x2>
    4d54:	b0 91 15 04 	lds	r27, 0x0415	; 0x800415 <time_ms+0x3>
    4d58:	0a 96       	adiw	r24, 0x0a	; 10
    4d5a:	a1 1d       	adc	r26, r1
    4d5c:	b1 1d       	adc	r27, r1
    4d5e:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <time_ms>
    4d62:	90 93 13 04 	sts	0x0413, r25	; 0x800413 <time_ms+0x1>
    4d66:	a0 93 14 04 	sts	0x0414, r26	; 0x800414 <time_ms+0x2>
    4d6a:	b0 93 15 04 	sts	0x0415, r27	; 0x800415 <time_ms+0x3>
    i++;
    4d6e:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <i.2>
    4d72:	8f 5f       	subi	r24, 0xFF	; 255
    if(i>=100) // 1 секунда
    4d74:	84 36       	cpi	r24, 0x64	; 100
    4d76:	08 f5       	brcc	.+66     	; 0x4dba <__vector_11+0x10a>
    i++;
    4d78:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <i.2>
            if(reset_s_wdt < 0xFFFF)
                reset_s_wdt++;
            reset_mcu(1);
        }
    }
    _WDT_RESET(); // сброс сторожевого таймера
    4d7c:	a8 95       	wdr
}
    4d7e:	ff 91       	pop	r31
    4d80:	ef 91       	pop	r30
    4d82:	bf 91       	pop	r27
    4d84:	af 91       	pop	r26
    4d86:	9f 91       	pop	r25
    4d88:	8f 91       	pop	r24
    4d8a:	7f 91       	pop	r23
    4d8c:	6f 91       	pop	r22
    4d8e:	5f 91       	pop	r21
    4d90:	4f 91       	pop	r20
    4d92:	3f 91       	pop	r19
    4d94:	2f 91       	pop	r18
    4d96:	0f 90       	pop	r0
    4d98:	0f be       	out	0x3f, r0	; 63
    4d9a:	0f 90       	pop	r0
    4d9c:	1f 90       	pop	r1
    4d9e:	18 95       	reti
            beep_counter = 0;
    4da0:	10 92 05 04 	sts	0x0405, r1	; 0x800405 <beep_counter+0x1>
    4da4:	10 92 04 04 	sts	0x0404, r1	; 0x800404 <beep_counter>
            beep_on = 0;
    4da8:	10 92 06 04 	sts	0x0406, r1	; 0x800406 <beep_on>
            DigitalWrite(PIN_BEEP, LOW);
    4dac:	2a 98       	cbi	0x05, 2	; 5
    4dae:	ae cf       	rjmp	.-164    	; 0x4d0c <__vector_11+0x5c>
            buzzer_stop();
    4db0:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <buzzer_stop>
            cnt = 0;
    4db4:	10 92 f5 03 	sts	0x03F5, r1	; 0x8003f5 <cnt.0>
    4db8:	c7 cf       	rjmp	.-114    	; 0x4d48 <__vector_11+0x98>
        i=0;
    4dba:	10 92 f7 03 	sts	0x03F7, r1	; 0x8003f7 <i.2>
        time_s++;
    4dbe:	80 91 0e 04 	lds	r24, 0x040E	; 0x80040e <time_s>
    4dc2:	90 91 0f 04 	lds	r25, 0x040F	; 0x80040f <time_s+0x1>
    4dc6:	a0 91 10 04 	lds	r26, 0x0410	; 0x800410 <time_s+0x2>
    4dca:	b0 91 11 04 	lds	r27, 0x0411	; 0x800411 <time_s+0x3>
    4dce:	01 96       	adiw	r24, 0x01	; 1
    4dd0:	a1 1d       	adc	r26, r1
    4dd2:	b1 1d       	adc	r27, r1
    4dd4:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <time_s>
    4dd8:	90 93 0f 04 	sts	0x040F, r25	; 0x80040f <time_s+0x1>
    4ddc:	a0 93 10 04 	sts	0x0410, r26	; 0x800410 <time_s+0x2>
    4de0:	b0 93 11 04 	sts	0x0411, r27	; 0x800411 <time_s+0x3>
        time_from_start_s++;
    4de4:	80 91 fc 03 	lds	r24, 0x03FC	; 0x8003fc <time_from_start_s>
    4de8:	90 91 fd 03 	lds	r25, 0x03FD	; 0x8003fd <time_from_start_s+0x1>
    4dec:	a0 91 fe 03 	lds	r26, 0x03FE	; 0x8003fe <time_from_start_s+0x2>
    4df0:	b0 91 ff 03 	lds	r27, 0x03FF	; 0x8003ff <time_from_start_s+0x3>
    4df4:	01 96       	adiw	r24, 0x01	; 1
    4df6:	a1 1d       	adc	r26, r1
    4df8:	b1 1d       	adc	r27, r1
    4dfa:	80 93 fc 03 	sts	0x03FC, r24	; 0x8003fc <time_from_start_s>
    4dfe:	90 93 fd 03 	sts	0x03FD, r25	; 0x8003fd <time_from_start_s+0x1>
    4e02:	a0 93 fe 03 	sts	0x03FE, r26	; 0x8003fe <time_from_start_s+0x2>
    4e06:	b0 93 ff 03 	sts	0x03FF, r27	; 0x8003ff <time_from_start_s+0x3>
        if(time_from_button_s < 0xFFFF)
    4e0a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <time_from_button_s>
    4e0e:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <time_from_button_s+0x1>
    4e12:	8f 3f       	cpi	r24, 0xFF	; 255
    4e14:	98 07       	cpc	r25, r24
    4e16:	29 f0       	breq	.+10     	; 0x4e22 <__vector_11+0x172>
            time_from_button_s++;
    4e18:	01 96       	adiw	r24, 0x01	; 1
    4e1a:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <time_from_button_s+0x1>
    4e1e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <time_from_button_s>
        soft_wdt++;
    4e22:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <soft_wdt>
    4e26:	90 91 03 04 	lds	r25, 0x0403	; 0x800403 <soft_wdt+0x1>
    4e2a:	01 96       	adiw	r24, 0x01	; 1
    4e2c:	90 93 03 04 	sts	0x0403, r25	; 0x800403 <soft_wdt+0x1>
    4e30:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <soft_wdt>
        j++;
    4e34:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <j.1>
    4e38:	8f 5f       	subi	r24, 0xFF	; 255
    4e3a:	80 93 f6 03 	sts	0x03F6, r24	; 0x8003f6 <j.1>
        check_power();
    4e3e:	0e 94 2c 0c 	call	0x1858	; 0x1858 <check_power>
}

//*******************************************************************************************************************
static void inc_time_from_motion(void)
{
    time_from_motion_s++; // счетчик переполнится через 136 лет
    4e42:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <time_from_motion_s>
    4e46:	90 91 f9 03 	lds	r25, 0x03F9	; 0x8003f9 <time_from_motion_s+0x1>
    4e4a:	a0 91 fa 03 	lds	r26, 0x03FA	; 0x8003fa <time_from_motion_s+0x2>
    4e4e:	b0 91 fb 03 	lds	r27, 0x03FB	; 0x8003fb <time_from_motion_s+0x3>
    4e52:	01 96       	adiw	r24, 0x01	; 1
    4e54:	a1 1d       	adc	r26, r1
    4e56:	b1 1d       	adc	r27, r1
    4e58:	80 93 f8 03 	sts	0x03F8, r24	; 0x8003f8 <time_from_motion_s>
    4e5c:	90 93 f9 03 	sts	0x03F9, r25	; 0x8003f9 <time_from_motion_s+0x1>
    4e60:	a0 93 fa 03 	sts	0x03FA, r26	; 0x8003fa <time_from_motion_s+0x2>
    4e64:	b0 93 fb 03 	sts	0x03FB, r27	; 0x8003fb <time_from_motion_s+0x3>
        if(j>=60)
    4e68:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <j.1>
    4e6c:	8c 33       	cpi	r24, 0x3C	; 60
    4e6e:	a8 f0       	brcs	.+42     	; 0x4e9a <__vector_11+0x1ea>
            j=0;
    4e70:	10 92 f6 03 	sts	0x03F6, r1	; 0x8003f6 <j.1>
            time_m++;
    4e74:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <time_m>
    4e78:	90 91 0b 04 	lds	r25, 0x040B	; 0x80040b <time_m+0x1>
    4e7c:	a0 91 0c 04 	lds	r26, 0x040C	; 0x80040c <time_m+0x2>
    4e80:	b0 91 0d 04 	lds	r27, 0x040D	; 0x80040d <time_m+0x3>
    4e84:	01 96       	adiw	r24, 0x01	; 1
    4e86:	a1 1d       	adc	r26, r1
    4e88:	b1 1d       	adc	r27, r1
    4e8a:	80 93 0a 04 	sts	0x040A, r24	; 0x80040a <time_m>
    4e8e:	90 93 0b 04 	sts	0x040B, r25	; 0x80040b <time_m+0x1>
    4e92:	a0 93 0c 04 	sts	0x040C, r26	; 0x80040c <time_m+0x2>
    4e96:	b0 93 0d 04 	sts	0x040D, r27	; 0x80040d <time_m+0x3>
        if(soft_wdt > 600) // 1200 секунд 20 минут
    4e9a:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <soft_wdt>
    4e9e:	90 91 03 04 	lds	r25, 0x0403	; 0x800403 <soft_wdt+0x1>
    4ea2:	89 35       	cpi	r24, 0x59	; 89
    4ea4:	92 40       	sbci	r25, 0x02	; 2
    4ea6:	08 f4       	brcc	.+2      	; 0x4eaa <__vector_11+0x1fa>
    4ea8:	69 cf       	rjmp	.-302    	; 0x4d7c <__vector_11+0xcc>
            if(reset_s_wdt < 0xFFFF)
    4eaa:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <reset_s_wdt>
    4eae:	90 91 01 04 	lds	r25, 0x0401	; 0x800401 <reset_s_wdt+0x1>
    4eb2:	8f 3f       	cpi	r24, 0xFF	; 255
    4eb4:	98 07       	cpc	r25, r24
    4eb6:	29 f0       	breq	.+10     	; 0x4ec2 <__vector_11+0x212>
                reset_s_wdt++;
    4eb8:	01 96       	adiw	r24, 0x01	; 1
    4eba:	90 93 01 04 	sts	0x0401, r25	; 0x800401 <reset_s_wdt+0x1>
    4ebe:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <reset_s_wdt>
            reset_mcu(1);
    4ec2:	81 e0       	ldi	r24, 0x01	; 1
    4ec4:	0e 94 45 1b 	call	0x368a	; 0x368a <reset_mcu>
    4ec8:	59 cf       	rjmp	.-334    	; 0x4d7c <__vector_11+0xcc>

00004eca <get_time_ms>:
{
    4eca:	cf 93       	push	r28
    4ecc:	df 93       	push	r29
    4ece:	00 d0       	rcall	.+0      	; 0x4ed0 <get_time_ms+0x6>
    4ed0:	00 d0       	rcall	.+0      	; 0x4ed2 <get_time_ms+0x8>
    4ed2:	cd b7       	in	r28, 0x3d	; 61
    4ed4:	de b7       	in	r29, 0x3e	; 62
    return get_val(time_ms);
    4ed6:	8f b7       	in	r24, 0x3f	; 63
    4ed8:	f8 94       	cli
    4eda:	20 91 12 04 	lds	r18, 0x0412	; 0x800412 <time_ms>
    4ede:	30 91 13 04 	lds	r19, 0x0413	; 0x800413 <time_ms+0x1>
    4ee2:	40 91 14 04 	lds	r20, 0x0414	; 0x800414 <time_ms+0x2>
    4ee6:	50 91 15 04 	lds	r21, 0x0415	; 0x800415 <time_ms+0x3>
    4eea:	29 83       	std	Y+1, r18	; 0x01
    4eec:	3a 83       	std	Y+2, r19	; 0x02
    4eee:	4b 83       	std	Y+3, r20	; 0x03
    4ef0:	5c 83       	std	Y+4, r21	; 0x04
    4ef2:	8f bf       	out	0x3f, r24	; 63
}
    4ef4:	69 81       	ldd	r22, Y+1	; 0x01
    4ef6:	7a 81       	ldd	r23, Y+2	; 0x02
    4ef8:	8b 81       	ldd	r24, Y+3	; 0x03
    4efa:	9c 81       	ldd	r25, Y+4	; 0x04
    4efc:	0f 90       	pop	r0
    4efe:	0f 90       	pop	r0
    4f00:	0f 90       	pop	r0
    4f02:	0f 90       	pop	r0
    4f04:	df 91       	pop	r29
    4f06:	cf 91       	pop	r28
    4f08:	08 95       	ret

00004f0a <get_time_s>:
{
    4f0a:	cf 93       	push	r28
    4f0c:	df 93       	push	r29
    4f0e:	00 d0       	rcall	.+0      	; 0x4f10 <get_time_s+0x6>
    4f10:	00 d0       	rcall	.+0      	; 0x4f12 <get_time_s+0x8>
    4f12:	cd b7       	in	r28, 0x3d	; 61
    4f14:	de b7       	in	r29, 0x3e	; 62
    return get_val(time_s);
    4f16:	8f b7       	in	r24, 0x3f	; 63
    4f18:	f8 94       	cli
    4f1a:	20 91 0e 04 	lds	r18, 0x040E	; 0x80040e <time_s>
    4f1e:	30 91 0f 04 	lds	r19, 0x040F	; 0x80040f <time_s+0x1>
    4f22:	40 91 10 04 	lds	r20, 0x0410	; 0x800410 <time_s+0x2>
    4f26:	50 91 11 04 	lds	r21, 0x0411	; 0x800411 <time_s+0x3>
    4f2a:	29 83       	std	Y+1, r18	; 0x01
    4f2c:	3a 83       	std	Y+2, r19	; 0x02
    4f2e:	4b 83       	std	Y+3, r20	; 0x03
    4f30:	5c 83       	std	Y+4, r21	; 0x04
    4f32:	8f bf       	out	0x3f, r24	; 63
}
    4f34:	69 81       	ldd	r22, Y+1	; 0x01
    4f36:	7a 81       	ldd	r23, Y+2	; 0x02
    4f38:	8b 81       	ldd	r24, Y+3	; 0x03
    4f3a:	9c 81       	ldd	r25, Y+4	; 0x04
    4f3c:	0f 90       	pop	r0
    4f3e:	0f 90       	pop	r0
    4f40:	0f 90       	pop	r0
    4f42:	0f 90       	pop	r0
    4f44:	df 91       	pop	r29
    4f46:	cf 91       	pop	r28
    4f48:	08 95       	ret

00004f4a <get_time_m>:
{
    4f4a:	cf 93       	push	r28
    4f4c:	df 93       	push	r29
    4f4e:	00 d0       	rcall	.+0      	; 0x4f50 <get_time_m+0x6>
    4f50:	00 d0       	rcall	.+0      	; 0x4f52 <get_time_m+0x8>
    4f52:	cd b7       	in	r28, 0x3d	; 61
    4f54:	de b7       	in	r29, 0x3e	; 62
    return get_val(time_m);
    4f56:	8f b7       	in	r24, 0x3f	; 63
    4f58:	f8 94       	cli
    4f5a:	20 91 0a 04 	lds	r18, 0x040A	; 0x80040a <time_m>
    4f5e:	30 91 0b 04 	lds	r19, 0x040B	; 0x80040b <time_m+0x1>
    4f62:	40 91 0c 04 	lds	r20, 0x040C	; 0x80040c <time_m+0x2>
    4f66:	50 91 0d 04 	lds	r21, 0x040D	; 0x80040d <time_m+0x3>
    4f6a:	29 83       	std	Y+1, r18	; 0x01
    4f6c:	3a 83       	std	Y+2, r19	; 0x02
    4f6e:	4b 83       	std	Y+3, r20	; 0x03
    4f70:	5c 83       	std	Y+4, r21	; 0x04
    4f72:	8f bf       	out	0x3f, r24	; 63
}
    4f74:	69 81       	ldd	r22, Y+1	; 0x01
    4f76:	7a 81       	ldd	r23, Y+2	; 0x02
    4f78:	8b 81       	ldd	r24, Y+3	; 0x03
    4f7a:	9c 81       	ldd	r25, Y+4	; 0x04
    4f7c:	0f 90       	pop	r0
    4f7e:	0f 90       	pop	r0
    4f80:	0f 90       	pop	r0
    4f82:	0f 90       	pop	r0
    4f84:	df 91       	pop	r29
    4f86:	cf 91       	pop	r28
    4f88:	08 95       	ret

00004f8a <reset_soft_wdt>:
    set_val(soft_wdt, 0);
    4f8a:	8f b7       	in	r24, 0x3f	; 63
    4f8c:	f8 94       	cli
    4f8e:	10 92 03 04 	sts	0x0403, r1	; 0x800403 <soft_wdt+0x1>
    4f92:	10 92 02 04 	sts	0x0402, r1	; 0x800402 <soft_wdt>
    4f96:	8f bf       	out	0x3f, r24	; 63
}
    4f98:	08 95       	ret

00004f9a <delay_ms>:


//*******************************************************************************************************************
// задержка на х милисекунд
void delay_ms(uint16_t delay)
{
    4f9a:	cf 92       	push	r12
    4f9c:	df 92       	push	r13
    4f9e:	ef 92       	push	r14
    4fa0:	ff 92       	push	r15
    4fa2:	cf 93       	push	r28
    4fa4:	df 93       	push	r29
    4fa6:	00 d0       	rcall	.+0      	; 0x4fa8 <delay_ms+0xe>
    4fa8:	00 d0       	rcall	.+0      	; 0x4faa <delay_ms+0x10>
    4faa:	cd b7       	in	r28, 0x3d	; 61
    4fac:	de b7       	in	r29, 0x3e	; 62
    4fae:	e8 2e       	mov	r14, r24
    4fb0:	f9 2e       	mov	r15, r25
    uint32_t time_stamp = get_time_ms() + delay;
    4fb2:	0e 94 65 27 	call	0x4eca	; 0x4eca <get_time_ms>
    4fb6:	dc 01       	movw	r26, r24
    4fb8:	cb 01       	movw	r24, r22
    4fba:	8e 0d       	add	r24, r14
    4fbc:	9f 1d       	adc	r25, r15
    4fbe:	a1 1d       	adc	r26, r1
    4fc0:	b1 1d       	adc	r27, r1
    4fc2:	6c 01       	movw	r12, r24
    4fc4:	7d 01       	movw	r14, r26
    while((get_time_ms() < time_stamp))
    4fc6:	06 c0       	rjmp	.+12     	; 0x4fd4 <delay_ms+0x3a>
    {
        #if(DEBUG==0)
        _SLEEP();
        #endif
        while(is_queue_not_empty()) // тем временем, проверяем входной буфер
            get_message_from_mdm();
    4fc8:	0e 94 0d 12 	call	0x241a	; 0x241a <get_message_from_mdm>
        while(is_queue_not_empty()) // тем временем, проверяем входной буфер
    4fcc:	0e 94 da 28 	call	0x51b4	; 0x51b4 <is_queue_not_empty>
    4fd0:	81 11       	cpse	r24, r1
    4fd2:	fa cf       	rjmp	.-12     	; 0x4fc8 <delay_ms+0x2e>
    while((get_time_ms() < time_stamp))
    4fd4:	0e 94 65 27 	call	0x4eca	; 0x4eca <get_time_ms>
    4fd8:	6c 15       	cp	r22, r12
    4fda:	7d 05       	cpc	r23, r13
    4fdc:	8e 05       	cpc	r24, r14
    4fde:	9f 05       	cpc	r25, r15
    4fe0:	a8 f3       	brcs	.-22     	; 0x4fcc <delay_ms+0x32>
    }
}
    4fe2:	0f 90       	pop	r0
    4fe4:	0f 90       	pop	r0
    4fe6:	0f 90       	pop	r0
    4fe8:	0f 90       	pop	r0
    4fea:	df 91       	pop	r29
    4fec:	cf 91       	pop	r28
    4fee:	ff 90       	pop	r15
    4ff0:	ef 90       	pop	r14
    4ff2:	df 90       	pop	r13
    4ff4:	cf 90       	pop	r12
    4ff6:	08 95       	ret

00004ff8 <delay_s>:

//*******************************************************************************************************************
// задержка на х секунд
void delay_s(uint8_t delay)
{
    4ff8:	cf 92       	push	r12
    4ffa:	df 92       	push	r13
    4ffc:	ef 92       	push	r14
    4ffe:	ff 92       	push	r15
    5000:	cf 93       	push	r28
    5002:	df 93       	push	r29
    5004:	00 d0       	rcall	.+0      	; 0x5006 <delay_s+0xe>
    5006:	00 d0       	rcall	.+0      	; 0x5008 <delay_s+0x10>
    5008:	cd b7       	in	r28, 0x3d	; 61
    500a:	de b7       	in	r29, 0x3e	; 62
    500c:	f8 2e       	mov	r15, r24
    uint32_t time_stamp = get_time_s() + delay;
    500e:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <get_time_s>
    5012:	dc 01       	movw	r26, r24
    5014:	cb 01       	movw	r24, r22
    5016:	8f 0d       	add	r24, r15
    5018:	91 1d       	adc	r25, r1
    501a:	a1 1d       	adc	r26, r1
    501c:	b1 1d       	adc	r27, r1
    501e:	6c 01       	movw	r12, r24
    5020:	7d 01       	movw	r14, r26
    while((get_time_s() < time_stamp))
    5022:	06 c0       	rjmp	.+12     	; 0x5030 <delay_s+0x38>
    {
        #if(DEBUG==0)
        _SLEEP();
        #endif
        while(is_queue_not_empty()) // тем временем, проверяем входной буфер
            get_message_from_mdm();
    5024:	0e 94 0d 12 	call	0x241a	; 0x241a <get_message_from_mdm>
        while(is_queue_not_empty()) // тем временем, проверяем входной буфер
    5028:	0e 94 da 28 	call	0x51b4	; 0x51b4 <is_queue_not_empty>
    502c:	81 11       	cpse	r24, r1
    502e:	fa cf       	rjmp	.-12     	; 0x5024 <delay_s+0x2c>
    while((get_time_s() < time_stamp))
    5030:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <get_time_s>
    5034:	6c 15       	cp	r22, r12
    5036:	7d 05       	cpc	r23, r13
    5038:	8e 05       	cpc	r24, r14
    503a:	9f 05       	cpc	r25, r15
    503c:	a8 f3       	brcs	.-22     	; 0x5028 <delay_s+0x30>
    }
}
    503e:	0f 90       	pop	r0
    5040:	0f 90       	pop	r0
    5042:	0f 90       	pop	r0
    5044:	0f 90       	pop	r0
    5046:	df 91       	pop	r29
    5048:	cf 91       	pop	r28
    504a:	ff 90       	pop	r15
    504c:	ef 90       	pop	r14
    504e:	df 90       	pop	r13
    5050:	cf 90       	pop	r12
    5052:	08 95       	ret

00005054 <delay_us>:
void delay_us(uint32_t _us)
{
    5054:	46 2f       	mov	r20, r22
    5056:	57 2f       	mov	r21, r23
    5058:	68 2f       	mov	r22, r24
    505a:	79 2f       	mov	r23, r25
    while (0 < _us)
    505c:	41 15       	cp	r20, r1
    505e:	51 05       	cpc	r21, r1
    5060:	61 05       	cpc	r22, r1
    5062:	71 05       	cpc	r23, r1
    5064:	49 f0       	breq	.+18     	; 0x5078 <delay_us+0x24>
	__builtin_avr_delay_cycles(__ticks_dc);
    5066:	82 e0       	ldi	r24, 0x02	; 2
    5068:	8a 95       	dec	r24
    506a:	f1 f7       	brne	.-4      	; 0x5068 <delay_us+0x14>
    506c:	00 c0       	rjmp	.+0      	; 0x506e <delay_us+0x1a>
    {
        _delay_us(1);
        --_us;
    506e:	41 50       	subi	r20, 0x01	; 1
    5070:	51 09       	sbc	r21, r1
    5072:	61 09       	sbc	r22, r1
    5074:	71 09       	sbc	r23, r1
    while (0 < _us)
    5076:	b9 f7       	brne	.-18     	; 0x5066 <delay_us+0x12>
    }
}
    5078:	08 95       	ret

0000507a <set_time_from_motion_s>:
//    }
//}
//////////////////////////////////////////////////
void set_time_from_motion_s(uint8_t time)
{
    set_val(time_from_motion_s, time);
    507a:	2f b7       	in	r18, 0x3f	; 63
    507c:	f8 94       	cli
    507e:	90 e0       	ldi	r25, 0x00	; 0
    5080:	b0 e0       	ldi	r27, 0x00	; 0
    5082:	a0 e0       	ldi	r26, 0x00	; 0
    5084:	80 93 f8 03 	sts	0x03F8, r24	; 0x8003f8 <time_from_motion_s>
    5088:	90 93 f9 03 	sts	0x03F9, r25	; 0x8003f9 <time_from_motion_s+0x1>
    508c:	a0 93 fa 03 	sts	0x03FA, r26	; 0x8003fa <time_from_motion_s+0x2>
    5090:	b0 93 fb 03 	sts	0x03FB, r27	; 0x8003fb <time_from_motion_s+0x3>
    5094:	2f bf       	out	0x3f, r18	; 63
}
    5096:	08 95       	ret

00005098 <get_time_from_motion_s>:

uint32_t get_time_from_motion_s()
{
    5098:	cf 93       	push	r28
    509a:	df 93       	push	r29
    509c:	00 d0       	rcall	.+0      	; 0x509e <get_time_from_motion_s+0x6>
    509e:	00 d0       	rcall	.+0      	; 0x50a0 <get_time_from_motion_s+0x8>
    50a0:	cd b7       	in	r28, 0x3d	; 61
    50a2:	de b7       	in	r29, 0x3e	; 62
    return get_val(time_from_motion_s);
    50a4:	8f b7       	in	r24, 0x3f	; 63
    50a6:	f8 94       	cli
    50a8:	20 91 f8 03 	lds	r18, 0x03F8	; 0x8003f8 <time_from_motion_s>
    50ac:	30 91 f9 03 	lds	r19, 0x03F9	; 0x8003f9 <time_from_motion_s+0x1>
    50b0:	40 91 fa 03 	lds	r20, 0x03FA	; 0x8003fa <time_from_motion_s+0x2>
    50b4:	50 91 fb 03 	lds	r21, 0x03FB	; 0x8003fb <time_from_motion_s+0x3>
    50b8:	29 83       	std	Y+1, r18	; 0x01
    50ba:	3a 83       	std	Y+2, r19	; 0x02
    50bc:	4b 83       	std	Y+3, r20	; 0x03
    50be:	5c 83       	std	Y+4, r21	; 0x04
    50c0:	8f bf       	out	0x3f, r24	; 63
}
    50c2:	69 81       	ldd	r22, Y+1	; 0x01
    50c4:	7a 81       	ldd	r23, Y+2	; 0x02
    50c6:	8b 81       	ldd	r24, Y+3	; 0x03
    50c8:	9c 81       	ldd	r25, Y+4	; 0x04
    50ca:	0f 90       	pop	r0
    50cc:	0f 90       	pop	r0
    50ce:	0f 90       	pop	r0
    50d0:	0f 90       	pop	r0
    50d2:	df 91       	pop	r29
    50d4:	cf 91       	pop	r28
    50d6:	08 95       	ret

000050d8 <get_time_from_start_s>:
/////////////////////// time_from_start_s //////////////////////////
uint32_t get_time_from_start_s()
{
    50d8:	cf 93       	push	r28
    50da:	df 93       	push	r29
    50dc:	00 d0       	rcall	.+0      	; 0x50de <get_time_from_start_s+0x6>
    50de:	00 d0       	rcall	.+0      	; 0x50e0 <get_time_from_start_s+0x8>
    50e0:	cd b7       	in	r28, 0x3d	; 61
    50e2:	de b7       	in	r29, 0x3e	; 62
    return get_val(time_from_start_s);
    50e4:	8f b7       	in	r24, 0x3f	; 63
    50e6:	f8 94       	cli
    50e8:	20 91 fc 03 	lds	r18, 0x03FC	; 0x8003fc <time_from_start_s>
    50ec:	30 91 fd 03 	lds	r19, 0x03FD	; 0x8003fd <time_from_start_s+0x1>
    50f0:	40 91 fe 03 	lds	r20, 0x03FE	; 0x8003fe <time_from_start_s+0x2>
    50f4:	50 91 ff 03 	lds	r21, 0x03FF	; 0x8003ff <time_from_start_s+0x3>
    50f8:	29 83       	std	Y+1, r18	; 0x01
    50fa:	3a 83       	std	Y+2, r19	; 0x02
    50fc:	4b 83       	std	Y+3, r20	; 0x03
    50fe:	5c 83       	std	Y+4, r21	; 0x04
    5100:	8f bf       	out	0x3f, r24	; 63
}
    5102:	69 81       	ldd	r22, Y+1	; 0x01
    5104:	7a 81       	ldd	r23, Y+2	; 0x02
    5106:	8b 81       	ldd	r24, Y+3	; 0x03
    5108:	9c 81       	ldd	r25, Y+4	; 0x04
    510a:	0f 90       	pop	r0
    510c:	0f 90       	pop	r0
    510e:	0f 90       	pop	r0
    5110:	0f 90       	pop	r0
    5112:	df 91       	pop	r29
    5114:	cf 91       	pop	r28
    5116:	08 95       	ret

00005118 <set_time_from_button_s>:

//////////////////// time_from_button_s //////////////////////////
void set_time_from_button_s(uint16_t time)
{
    set_val(time_from_button_s, time);
    5118:	2f b7       	in	r18, 0x3f	; 63
    511a:	f8 94       	cli
    511c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <time_from_button_s>
    5120:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <time_from_button_s+0x1>
    5124:	2f bf       	out	0x3f, r18	; 63
}
    5126:	08 95       	ret

00005128 <get_time_from_button_s>:

uint16_t get_time_from_button_s()
{
    return get_val(time_from_button_s);
    5128:	2f b7       	in	r18, 0x3f	; 63
    512a:	f8 94       	cli
    512c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <time_from_button_s>
    5130:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <time_from_button_s+0x1>
    5134:	2f bf       	out	0x3f, r18	; 63
}
    5136:	08 95       	ret

00005138 <init_uart>:
volatile unsigned char head;
volatile unsigned char tail;

void init_uart()
{
	UBRR0H = BAUD_PRESCALER >> 8;
    5138:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = BAUD_PRESCALER;
    513c:	8f e2       	ldi	r24, 0x2F	; 47
    513e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	// Set Frame Format
	UCSR0C = ASYNCHRONOUS | PARITY_MODE | STOP_BIT | DATA_BIT;
    5142:	86 e0       	ldi	r24, 0x06	; 6
    5144:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UCSR0B = _BV(RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
    5148:	88 e9       	ldi	r24, 0x98	; 152
    514a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

	head = tail = 0;
    514e:	10 92 16 04 	sts	0x0416, r1	; 0x800416 <tail>
    5152:	10 92 17 04 	sts	0x0417, r1	; 0x800417 <head>
}
    5156:	08 95       	ret

00005158 <__vector_18>:

//*******************************************************************************************************************

// USART Receiver interrupt service routine
ISR(USART_RX_vect)
{
    5158:	8f 93       	push	r24
    515a:	8f b7       	in	r24, 0x3f	; 63
    515c:	8f 93       	push	r24
    515e:	9f 93       	push	r25
    5160:	ef 93       	push	r30
    5162:	ff 93       	push	r31
	char data;
    cli();
    5164:	f8 94       	cli
	data=UDR0;
    5166:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	if((UCSR0A & ((1 << FE0) | (1 << DOR0))) == 0)
    516a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    516e:	88 71       	andi	r24, 0x18	; 24
    5170:	61 f4       	brne	.+24     	; 0x518a <__vector_18+0x32>
	//if ((UCSR0A & ((1<<FE0) | (1<<DOR0)))==0)
	{
		uart_in_buf[head] = data;
    5172:	e0 91 17 04 	lds	r30, 0x0417	; 0x800417 <head>
    5176:	f0 e0       	ldi	r31, 0x00	; 0
    5178:	e8 5e       	subi	r30, 0xE8	; 232
    517a:	fb 4f       	sbci	r31, 0xFB	; 251
    517c:	90 83       	st	Z, r25
		head = (head+1)&(UART_BUF_SIZE-1);
    517e:	80 91 17 04 	lds	r24, 0x0417	; 0x800417 <head>
    5182:	8f 5f       	subi	r24, 0xFF	; 255
    5184:	8f 77       	andi	r24, 0x7F	; 127
    5186:	80 93 17 04 	sts	0x0417, r24	; 0x800417 <head>
	}
	sei();
    518a:	78 94       	sei
}
    518c:	ff 91       	pop	r31
    518e:	ef 91       	pop	r30
    5190:	9f 91       	pop	r25
    5192:	8f 91       	pop	r24
    5194:	8f bf       	out	0x3f, r24	; 63
    5196:	8f 91       	pop	r24
    5198:	18 95       	reti

0000519a <get_byte_from_queue>:
//*******************************************************************************************************************

char get_byte_from_queue(void)
{
	char data;
	data = uart_in_buf[tail];
    519a:	e0 91 16 04 	lds	r30, 0x0416	; 0x800416 <tail>
    519e:	f0 e0       	ldi	r31, 0x00	; 0
    51a0:	e8 5e       	subi	r30, 0xE8	; 232
    51a2:	fb 4f       	sbci	r31, 0xFB	; 251
	tail = (tail+1)&(UART_BUF_SIZE-1);
    51a4:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <tail>
    51a8:	8f 5f       	subi	r24, 0xFF	; 255
    51aa:	8f 77       	andi	r24, 0x7F	; 127
    51ac:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <tail>
	return data;
}
    51b0:	80 81       	ld	r24, Z
    51b2:	08 95       	ret

000051b4 <is_queue_not_empty>:

//*******************************************************************************************************************
uint8_t is_queue_not_empty(void)
 {
	if(head!=tail)
    51b4:	20 91 17 04 	lds	r18, 0x0417	; 0x800417 <head>
    51b8:	90 91 16 04 	lds	r25, 0x0416	; 0x800416 <tail>
    51bc:	81 e0       	ldi	r24, 0x01	; 1
    51be:	29 13       	cpse	r18, r25
		return TRUE;
	else
		return FALSE;
}
    51c0:	08 95       	ret
	if(head!=tail)
    51c2:	80 e0       	ldi	r24, 0x00	; 0
    51c4:	fd cf       	rjmp	.-6      	; 0x51c0 <is_queue_not_empty+0xc>

000051c6 <uart_send_buf>:

//*******************************************************************************************************************

void uart_send_buf(char* buf, char len)
{
    51c6:	cf 93       	push	r28
    51c8:	df 93       	push	r29
    51ca:	a8 2f       	mov	r26, r24
    51cc:	b9 2f       	mov	r27, r25
	while(len--)
    51ce:	2f ef       	ldi	r18, 0xFF	; 255
    51d0:	26 0f       	add	r18, r22
    51d2:	66 23       	and	r22, r22
    51d4:	89 f0       	breq	.+34     	; 0x51f8 <uart_send_buf+0x32>
    51d6:	30 e0       	ldi	r19, 0x00	; 0
    51d8:	2f 5f       	subi	r18, 0xFF	; 255
    51da:	3f 4f       	sbci	r19, 0xFF	; 255
    51dc:	2a 0f       	add	r18, r26
    51de:	3b 1f       	adc	r19, r27
	{
		while( (UCSR0A & (1<<UDRE0)) == 0 ); // ждем готовности буферного регистра
    51e0:	e0 ec       	ldi	r30, 0xC0	; 192
    51e2:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = *(buf++);
    51e4:	c6 ec       	ldi	r28, 0xC6	; 198
    51e6:	d0 e0       	ldi	r29, 0x00	; 0
		while( (UCSR0A & (1<<UDRE0)) == 0 ); // ждем готовности буферного регистра
    51e8:	80 81       	ld	r24, Z
    51ea:	85 ff       	sbrs	r24, 5
    51ec:	fd cf       	rjmp	.-6      	; 0x51e8 <uart_send_buf+0x22>
		UDR0 = *(buf++);
    51ee:	8d 91       	ld	r24, X+
    51f0:	88 83       	st	Y, r24
	while(len--)
    51f2:	a2 17       	cp	r26, r18
    51f4:	b3 07       	cpc	r27, r19
    51f6:	c1 f7       	brne	.-16     	; 0x51e8 <uart_send_buf+0x22>
	}
}
    51f8:	df 91       	pop	r29
    51fa:	cf 91       	pop	r28
    51fc:	08 95       	ret

000051fe <uart_send_str>:

//*******************************************************************************************************************

void uart_send_str(char *str)
{
    51fe:	cf 93       	push	r28
    5200:	df 93       	push	r29
    5202:	a8 2f       	mov	r26, r24
    5204:	b9 2f       	mov	r27, r25
	while(*str)
    5206:	9c 91       	ld	r25, X
    5208:	99 23       	and	r25, r25
    520a:	61 f0       	breq	.+24     	; 0x5224 <uart_send_str+0x26>
    520c:	11 96       	adiw	r26, 0x01	; 1
	{
		while( (UCSR0A & (1<<UDRE0)) == 0 ); // ждем готовности буферного регистра
    520e:	e0 ec       	ldi	r30, 0xC0	; 192
    5210:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = *str++;
    5212:	c6 ec       	ldi	r28, 0xC6	; 198
    5214:	d0 e0       	ldi	r29, 0x00	; 0
		while( (UCSR0A & (1<<UDRE0)) == 0 ); // ждем готовности буферного регистра
    5216:	80 81       	ld	r24, Z
    5218:	85 ff       	sbrs	r24, 5
    521a:	fd cf       	rjmp	.-6      	; 0x5216 <uart_send_str+0x18>
		UDR0 = *str++;
    521c:	98 83       	st	Y, r25
	while(*str)
    521e:	9d 91       	ld	r25, X+
    5220:	91 11       	cpse	r25, r1
    5222:	f9 cf       	rjmp	.-14     	; 0x5216 <uart_send_str+0x18>
	}
}
    5224:	df 91       	pop	r29
    5226:	cf 91       	pop	r28
    5228:	08 95       	ret

0000522a <uart_send_byte>:
}
//*******************************************************************************************************************

void uart_send_byte(char data)
{
	while( (UCSR0A & (1<<UDRE0)) == 0 ){}; // ждем готовности буферного регистра
    522a:	e0 ec       	ldi	r30, 0xC0	; 192
    522c:	f0 e0       	ldi	r31, 0x00	; 0
    522e:	90 81       	ld	r25, Z
    5230:	95 ff       	sbrs	r25, 5
    5232:	fd cf       	rjmp	.-6      	; 0x522e <uart_send_byte+0x4>
	UDR0 = data;
    5234:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
    5238:	08 95       	ret

0000523a <uart_send_str_p>:
{
    523a:	cf 93       	push	r28
    523c:	df 93       	push	r29
    523e:	e8 2f       	mov	r30, r24
    5240:	f9 2f       	mov	r31, r25
	while ((c = pgm_read_byte(progmem_s++))) {
    5242:	ef 01       	movw	r28, r30
    5244:	21 96       	adiw	r28, 0x01	; 1
    5246:	84 91       	lpm	r24, Z
    5248:	88 23       	and	r24, r24
    524a:	39 f0       	breq	.+14     	; 0x525a <uart_send_str_p+0x20>
		uart_send_byte(c);
    524c:	0e 94 15 29 	call	0x522a	; 0x522a <uart_send_byte>
	while ((c = pgm_read_byte(progmem_s++))) {
    5250:	fe 01       	movw	r30, r28
    5252:	84 91       	lpm	r24, Z
    5254:	21 96       	adiw	r28, 0x01	; 1
    5256:	81 11       	cpse	r24, r1
    5258:	f9 cf       	rjmp	.-14     	; 0x524c <uart_send_str_p+0x12>
}
    525a:	df 91       	pop	r29
    525c:	cf 91       	pop	r28
    525e:	08 95       	ret

00005260 <reset_uart_queue>:

//*******************************************************************************************************************

void reset_uart_queue(void)
{
	tail = head = 0;
    5260:	10 92 17 04 	sts	0x0417, r1	; 0x800417 <head>
    5264:	10 92 16 04 	sts	0x0416, r1	; 0x800416 <tail>
}
    5268:	08 95       	ret

0000526a <uart_flush>:

void uart_flush(void)
{
    526a:	cf 92       	push	r12
    526c:	df 92       	push	r13
    526e:	ef 92       	push	r14
    5270:	ff 92       	push	r15
    5272:	0f 93       	push	r16
    5274:	1f 93       	push	r17
    5276:	cf 93       	push	r28
    5278:	df 93       	push	r29
    527a:	00 d0       	rcall	.+0      	; 0x527c <uart_flush+0x12>
    527c:	00 d0       	rcall	.+0      	; 0x527e <uart_flush+0x14>
    527e:	cd b7       	in	r28, 0x3d	; 61
    5280:	de b7       	in	r29, 0x3e	; 62
	unsigned char dummy;
	uint32_t time_stamp = get_time_s() + 3;
    5282:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <get_time_s>
    5286:	69 83       	std	Y+1, r22	; 0x01
    5288:	7a 83       	std	Y+2, r23	; 0x02
    528a:	8b 83       	std	Y+3, r24	; 0x03
    528c:	9c 83       	std	Y+4, r25	; 0x04
    528e:	6b 01       	movw	r12, r22
    5290:	7c 01       	movw	r14, r24
    5292:	83 e0       	ldi	r24, 0x03	; 3
    5294:	c8 0e       	add	r12, r24
    5296:	d1 1c       	adc	r13, r1
    5298:	e1 1c       	adc	r14, r1
    529a:	f1 1c       	adc	r15, r1
	while ( UCSR0A & (1<<RXC0) )
    529c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    52a0:	88 23       	and	r24, r24
    52a2:	a4 f4       	brge	.+40     	; 0x52cc <uart_flush+0x62>
	{
        if(get_time_s() > time_stamp)
            return;
		dummy = UDR0;
    52a4:	06 ec       	ldi	r16, 0xC6	; 198
    52a6:	10 e0       	ldi	r17, 0x00	; 0
        if(get_time_s() > time_stamp)
    52a8:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <get_time_s>
    52ac:	69 83       	std	Y+1, r22	; 0x01
    52ae:	7a 83       	std	Y+2, r23	; 0x02
    52b0:	8b 83       	std	Y+3, r24	; 0x03
    52b2:	9c 83       	std	Y+4, r25	; 0x04
    52b4:	c6 16       	cp	r12, r22
    52b6:	d7 06       	cpc	r13, r23
    52b8:	e8 06       	cpc	r14, r24
    52ba:	f9 06       	cpc	r15, r25
    52bc:	38 f0       	brcs	.+14     	; 0x52cc <uart_flush+0x62>
		dummy = UDR0;
    52be:	d8 01       	movw	r26, r16
    52c0:	8c 91       	ld	r24, X
	while ( UCSR0A & (1<<RXC0) )
    52c2:	e0 ec       	ldi	r30, 0xC0	; 192
    52c4:	f0 e0       	ldi	r31, 0x00	; 0
    52c6:	80 81       	ld	r24, Z
    52c8:	88 23       	and	r24, r24
    52ca:	74 f3       	brlt	.-36     	; 0x52a8 <uart_flush+0x3e>
		dummy = dummy;
	}
}
    52cc:	0f 90       	pop	r0
    52ce:	0f 90       	pop	r0
    52d0:	0f 90       	pop	r0
    52d2:	0f 90       	pop	r0
    52d4:	df 91       	pop	r29
    52d6:	cf 91       	pop	r28
    52d8:	1f 91       	pop	r17
    52da:	0f 91       	pop	r16
    52dc:	ff 90       	pop	r15
    52de:	ef 90       	pop	r14
    52e0:	df 90       	pop	r13
    52e2:	cf 90       	pop	r12
    52e4:	08 95       	ret

000052e6 <__udivmodhi4>:
    52e6:	aa 1b       	sub	r26, r26
    52e8:	bb 1b       	sub	r27, r27
    52ea:	51 e1       	ldi	r21, 0x11	; 17
    52ec:	07 c0       	rjmp	.+14     	; 0x52fc <__udivmodhi4_ep>

000052ee <__udivmodhi4_loop>:
    52ee:	aa 1f       	adc	r26, r26
    52f0:	bb 1f       	adc	r27, r27
    52f2:	a6 17       	cp	r26, r22
    52f4:	b7 07       	cpc	r27, r23
    52f6:	10 f0       	brcs	.+4      	; 0x52fc <__udivmodhi4_ep>
    52f8:	a6 1b       	sub	r26, r22
    52fa:	b7 0b       	sbc	r27, r23

000052fc <__udivmodhi4_ep>:
    52fc:	88 1f       	adc	r24, r24
    52fe:	99 1f       	adc	r25, r25
    5300:	5a 95       	dec	r21
    5302:	a9 f7       	brne	.-22     	; 0x52ee <__udivmodhi4_loop>
    5304:	80 95       	com	r24
    5306:	90 95       	com	r25
    5308:	bc 01       	movw	r22, r24
    530a:	cd 01       	movw	r24, r26
    530c:	08 95       	ret

0000530e <__divmodhi4>:
    530e:	97 fb       	bst	r25, 7
    5310:	07 2e       	mov	r0, r23
    5312:	16 f4       	brtc	.+4      	; 0x5318 <__divmodhi4+0xa>
    5314:	00 94       	com	r0
    5316:	07 d0       	rcall	.+14     	; 0x5326 <__divmodhi4_neg1>
    5318:	77 fd       	sbrc	r23, 7
    531a:	09 d0       	rcall	.+18     	; 0x532e <__divmodhi4_neg2>
    531c:	0e 94 73 29 	call	0x52e6	; 0x52e6 <__udivmodhi4>
    5320:	07 fc       	sbrc	r0, 7
    5322:	05 d0       	rcall	.+10     	; 0x532e <__divmodhi4_neg2>
    5324:	3e f4       	brtc	.+14     	; 0x5334 <__divmodhi4_exit>

00005326 <__divmodhi4_neg1>:
    5326:	90 95       	com	r25
    5328:	81 95       	neg	r24
    532a:	9f 4f       	sbci	r25, 0xFF	; 255
    532c:	08 95       	ret

0000532e <__divmodhi4_neg2>:
    532e:	70 95       	com	r23
    5330:	61 95       	neg	r22
    5332:	7f 4f       	sbci	r23, 0xFF	; 255

00005334 <__divmodhi4_exit>:
    5334:	08 95       	ret

00005336 <__udivmodsi4>:
    5336:	a1 e2       	ldi	r26, 0x21	; 33
    5338:	1a 2e       	mov	r1, r26
    533a:	aa 1b       	sub	r26, r26
    533c:	bb 1b       	sub	r27, r27
    533e:	fd 01       	movw	r30, r26
    5340:	0d c0       	rjmp	.+26     	; 0x535c <__udivmodsi4_ep>

00005342 <__udivmodsi4_loop>:
    5342:	aa 1f       	adc	r26, r26
    5344:	bb 1f       	adc	r27, r27
    5346:	ee 1f       	adc	r30, r30
    5348:	ff 1f       	adc	r31, r31
    534a:	a2 17       	cp	r26, r18
    534c:	b3 07       	cpc	r27, r19
    534e:	e4 07       	cpc	r30, r20
    5350:	f5 07       	cpc	r31, r21
    5352:	20 f0       	brcs	.+8      	; 0x535c <__udivmodsi4_ep>
    5354:	a2 1b       	sub	r26, r18
    5356:	b3 0b       	sbc	r27, r19
    5358:	e4 0b       	sbc	r30, r20
    535a:	f5 0b       	sbc	r31, r21

0000535c <__udivmodsi4_ep>:
    535c:	66 1f       	adc	r22, r22
    535e:	77 1f       	adc	r23, r23
    5360:	88 1f       	adc	r24, r24
    5362:	99 1f       	adc	r25, r25
    5364:	1a 94       	dec	r1
    5366:	69 f7       	brne	.-38     	; 0x5342 <__udivmodsi4_loop>
    5368:	60 95       	com	r22
    536a:	70 95       	com	r23
    536c:	80 95       	com	r24
    536e:	90 95       	com	r25
    5370:	9b 01       	movw	r18, r22
    5372:	ac 01       	movw	r20, r24
    5374:	bd 01       	movw	r22, r26
    5376:	cf 01       	movw	r24, r30
    5378:	08 95       	ret

0000537a <__divmodsi4>:
    537a:	05 2e       	mov	r0, r21
    537c:	97 fb       	bst	r25, 7
    537e:	1e f4       	brtc	.+6      	; 0x5386 <__divmodsi4+0xc>
    5380:	00 94       	com	r0
    5382:	0e 94 d4 29 	call	0x53a8	; 0x53a8 <__negsi2>
    5386:	57 fd       	sbrc	r21, 7
    5388:	07 d0       	rcall	.+14     	; 0x5398 <__divmodsi4_neg2>
    538a:	0e 94 9b 29 	call	0x5336	; 0x5336 <__udivmodsi4>
    538e:	07 fc       	sbrc	r0, 7
    5390:	03 d0       	rcall	.+6      	; 0x5398 <__divmodsi4_neg2>
    5392:	4e f4       	brtc	.+18     	; 0x53a6 <__divmodsi4_exit>
    5394:	0c 94 d4 29 	jmp	0x53a8	; 0x53a8 <__negsi2>

00005398 <__divmodsi4_neg2>:
    5398:	50 95       	com	r21
    539a:	40 95       	com	r20
    539c:	30 95       	com	r19
    539e:	21 95       	neg	r18
    53a0:	3f 4f       	sbci	r19, 0xFF	; 255
    53a2:	4f 4f       	sbci	r20, 0xFF	; 255
    53a4:	5f 4f       	sbci	r21, 0xFF	; 255

000053a6 <__divmodsi4_exit>:
    53a6:	08 95       	ret

000053a8 <__negsi2>:
    53a8:	90 95       	com	r25
    53aa:	80 95       	com	r24
    53ac:	70 95       	com	r23
    53ae:	61 95       	neg	r22
    53b0:	7f 4f       	sbci	r23, 0xFF	; 255
    53b2:	8f 4f       	sbci	r24, 0xFF	; 255
    53b4:	9f 4f       	sbci	r25, 0xFF	; 255
    53b6:	08 95       	ret

000053b8 <__tablejump2__>:
    53b8:	ee 0f       	add	r30, r30
    53ba:	ff 1f       	adc	r31, r31
    53bc:	05 90       	lpm	r0, Z+
    53be:	f4 91       	lpm	r31, Z
    53c0:	e0 2d       	mov	r30, r0
    53c2:	09 94       	ijmp

000053c4 <__umulhisi3>:
    53c4:	a2 9f       	mul	r26, r18
    53c6:	b0 01       	movw	r22, r0
    53c8:	b3 9f       	mul	r27, r19
    53ca:	c0 01       	movw	r24, r0
    53cc:	a3 9f       	mul	r26, r19
    53ce:	70 0d       	add	r23, r0
    53d0:	81 1d       	adc	r24, r1
    53d2:	11 24       	eor	r1, r1
    53d4:	91 1d       	adc	r25, r1
    53d6:	b2 9f       	mul	r27, r18
    53d8:	70 0d       	add	r23, r0
    53da:	81 1d       	adc	r24, r1
    53dc:	11 24       	eor	r1, r1
    53de:	91 1d       	adc	r25, r1
    53e0:	08 95       	ret

000053e2 <__fixsfsi>:
    53e2:	0e 94 f8 29 	call	0x53f0	; 0x53f0 <__fixunssfsi>
    53e6:	68 94       	set
    53e8:	b1 11       	cpse	r27, r1
    53ea:	0c 94 87 2a 	jmp	0x550e	; 0x550e <__fp_szero>
    53ee:	08 95       	ret

000053f0 <__fixunssfsi>:
    53f0:	0e 94 6c 2a 	call	0x54d8	; 0x54d8 <__fp_splitA>
    53f4:	88 f0       	brcs	.+34     	; 0x5418 <__fixunssfsi+0x28>
    53f6:	9f 57       	subi	r25, 0x7F	; 127
    53f8:	98 f0       	brcs	.+38     	; 0x5420 <__fixunssfsi+0x30>
    53fa:	b9 2f       	mov	r27, r25
    53fc:	99 27       	eor	r25, r25
    53fe:	b7 51       	subi	r27, 0x17	; 23
    5400:	b0 f0       	brcs	.+44     	; 0x542e <__fixunssfsi+0x3e>
    5402:	e1 f0       	breq	.+56     	; 0x543c <__fixunssfsi+0x4c>
    5404:	66 0f       	add	r22, r22
    5406:	77 1f       	adc	r23, r23
    5408:	88 1f       	adc	r24, r24
    540a:	99 1f       	adc	r25, r25
    540c:	1a f0       	brmi	.+6      	; 0x5414 <__fixunssfsi+0x24>
    540e:	ba 95       	dec	r27
    5410:	c9 f7       	brne	.-14     	; 0x5404 <__fixunssfsi+0x14>
    5412:	14 c0       	rjmp	.+40     	; 0x543c <__fixunssfsi+0x4c>
    5414:	b1 30       	cpi	r27, 0x01	; 1
    5416:	91 f0       	breq	.+36     	; 0x543c <__fixunssfsi+0x4c>
    5418:	0e 94 86 2a 	call	0x550c	; 0x550c <__fp_zero>
    541c:	b1 e0       	ldi	r27, 0x01	; 1
    541e:	08 95       	ret
    5420:	0c 94 86 2a 	jmp	0x550c	; 0x550c <__fp_zero>
    5424:	67 2f       	mov	r22, r23
    5426:	78 2f       	mov	r23, r24
    5428:	88 27       	eor	r24, r24
    542a:	b8 5f       	subi	r27, 0xF8	; 248
    542c:	39 f0       	breq	.+14     	; 0x543c <__fixunssfsi+0x4c>
    542e:	b9 3f       	cpi	r27, 0xF9	; 249
    5430:	cc f3       	brlt	.-14     	; 0x5424 <__fixunssfsi+0x34>
    5432:	86 95       	lsr	r24
    5434:	77 95       	ror	r23
    5436:	67 95       	ror	r22
    5438:	b3 95       	inc	r27
    543a:	d9 f7       	brne	.-10     	; 0x5432 <__fixunssfsi+0x42>
    543c:	3e f4       	brtc	.+14     	; 0x544c <__fixunssfsi+0x5c>
    543e:	90 95       	com	r25
    5440:	80 95       	com	r24
    5442:	70 95       	com	r23
    5444:	61 95       	neg	r22
    5446:	7f 4f       	sbci	r23, 0xFF	; 255
    5448:	8f 4f       	sbci	r24, 0xFF	; 255
    544a:	9f 4f       	sbci	r25, 0xFF	; 255
    544c:	08 95       	ret

0000544e <__floatunsisf>:
    544e:	e8 94       	clt
    5450:	09 c0       	rjmp	.+18     	; 0x5464 <__floatsisf+0x12>

00005452 <__floatsisf>:
    5452:	97 fb       	bst	r25, 7
    5454:	3e f4       	brtc	.+14     	; 0x5464 <__floatsisf+0x12>
    5456:	90 95       	com	r25
    5458:	80 95       	com	r24
    545a:	70 95       	com	r23
    545c:	61 95       	neg	r22
    545e:	7f 4f       	sbci	r23, 0xFF	; 255
    5460:	8f 4f       	sbci	r24, 0xFF	; 255
    5462:	9f 4f       	sbci	r25, 0xFF	; 255
    5464:	99 23       	and	r25, r25
    5466:	a9 f0       	breq	.+42     	; 0x5492 <__floatsisf+0x40>
    5468:	f9 2f       	mov	r31, r25
    546a:	96 e9       	ldi	r25, 0x96	; 150
    546c:	bb 27       	eor	r27, r27
    546e:	93 95       	inc	r25
    5470:	f6 95       	lsr	r31
    5472:	87 95       	ror	r24
    5474:	77 95       	ror	r23
    5476:	67 95       	ror	r22
    5478:	b7 95       	ror	r27
    547a:	f1 11       	cpse	r31, r1
    547c:	f8 cf       	rjmp	.-16     	; 0x546e <__floatsisf+0x1c>
    547e:	fa f4       	brpl	.+62     	; 0x54be <__floatsisf+0x6c>
    5480:	bb 0f       	add	r27, r27
    5482:	11 f4       	brne	.+4      	; 0x5488 <__floatsisf+0x36>
    5484:	60 ff       	sbrs	r22, 0
    5486:	1b c0       	rjmp	.+54     	; 0x54be <__floatsisf+0x6c>
    5488:	6f 5f       	subi	r22, 0xFF	; 255
    548a:	7f 4f       	sbci	r23, 0xFF	; 255
    548c:	8f 4f       	sbci	r24, 0xFF	; 255
    548e:	9f 4f       	sbci	r25, 0xFF	; 255
    5490:	16 c0       	rjmp	.+44     	; 0x54be <__floatsisf+0x6c>
    5492:	88 23       	and	r24, r24
    5494:	11 f0       	breq	.+4      	; 0x549a <__floatsisf+0x48>
    5496:	96 e9       	ldi	r25, 0x96	; 150
    5498:	11 c0       	rjmp	.+34     	; 0x54bc <__floatsisf+0x6a>
    549a:	77 23       	and	r23, r23
    549c:	21 f0       	breq	.+8      	; 0x54a6 <__floatsisf+0x54>
    549e:	9e e8       	ldi	r25, 0x8E	; 142
    54a0:	87 2f       	mov	r24, r23
    54a2:	76 2f       	mov	r23, r22
    54a4:	05 c0       	rjmp	.+10     	; 0x54b0 <__floatsisf+0x5e>
    54a6:	66 23       	and	r22, r22
    54a8:	71 f0       	breq	.+28     	; 0x54c6 <__floatsisf+0x74>
    54aa:	96 e8       	ldi	r25, 0x86	; 134
    54ac:	86 2f       	mov	r24, r22
    54ae:	70 e0       	ldi	r23, 0x00	; 0
    54b0:	60 e0       	ldi	r22, 0x00	; 0
    54b2:	2a f0       	brmi	.+10     	; 0x54be <__floatsisf+0x6c>
    54b4:	9a 95       	dec	r25
    54b6:	66 0f       	add	r22, r22
    54b8:	77 1f       	adc	r23, r23
    54ba:	88 1f       	adc	r24, r24
    54bc:	da f7       	brpl	.-10     	; 0x54b4 <__floatsisf+0x62>
    54be:	88 0f       	add	r24, r24
    54c0:	96 95       	lsr	r25
    54c2:	87 95       	ror	r24
    54c4:	97 f9       	bld	r25, 7
    54c6:	08 95       	ret

000054c8 <__fp_split3>:
    54c8:	57 fd       	sbrc	r21, 7
    54ca:	90 58       	subi	r25, 0x80	; 128
    54cc:	44 0f       	add	r20, r20
    54ce:	55 1f       	adc	r21, r21
    54d0:	59 f0       	breq	.+22     	; 0x54e8 <__fp_splitA+0x10>
    54d2:	5f 3f       	cpi	r21, 0xFF	; 255
    54d4:	71 f0       	breq	.+28     	; 0x54f2 <__fp_splitA+0x1a>
    54d6:	47 95       	ror	r20

000054d8 <__fp_splitA>:
    54d8:	88 0f       	add	r24, r24
    54da:	97 fb       	bst	r25, 7
    54dc:	99 1f       	adc	r25, r25
    54de:	61 f0       	breq	.+24     	; 0x54f8 <__fp_splitA+0x20>
    54e0:	9f 3f       	cpi	r25, 0xFF	; 255
    54e2:	79 f0       	breq	.+30     	; 0x5502 <__fp_splitA+0x2a>
    54e4:	87 95       	ror	r24
    54e6:	08 95       	ret
    54e8:	12 16       	cp	r1, r18
    54ea:	13 06       	cpc	r1, r19
    54ec:	14 06       	cpc	r1, r20
    54ee:	55 1f       	adc	r21, r21
    54f0:	f2 cf       	rjmp	.-28     	; 0x54d6 <__fp_split3+0xe>
    54f2:	46 95       	lsr	r20
    54f4:	f1 df       	rcall	.-30     	; 0x54d8 <__fp_splitA>
    54f6:	08 c0       	rjmp	.+16     	; 0x5508 <__fp_splitA+0x30>
    54f8:	16 16       	cp	r1, r22
    54fa:	17 06       	cpc	r1, r23
    54fc:	18 06       	cpc	r1, r24
    54fe:	99 1f       	adc	r25, r25
    5500:	f1 cf       	rjmp	.-30     	; 0x54e4 <__fp_splitA+0xc>
    5502:	86 95       	lsr	r24
    5504:	71 05       	cpc	r23, r1
    5506:	61 05       	cpc	r22, r1
    5508:	08 94       	sec
    550a:	08 95       	ret

0000550c <__fp_zero>:
    550c:	e8 94       	clt

0000550e <__fp_szero>:
    550e:	bb 27       	eor	r27, r27
    5510:	66 27       	eor	r22, r22
    5512:	77 27       	eor	r23, r23
    5514:	cb 01       	movw	r24, r22
    5516:	97 f9       	bld	r25, 7
    5518:	08 95       	ret

0000551a <__mulsf3>:
    551a:	0e 94 a0 2a 	call	0x5540	; 0x5540 <__mulsf3x>
    551e:	0c 94 11 2b 	jmp	0x5622	; 0x5622 <__fp_round>
    5522:	0e 94 03 2b 	call	0x5606	; 0x5606 <__fp_pscA>
    5526:	38 f0       	brcs	.+14     	; 0x5536 <__mulsf3+0x1c>
    5528:	0e 94 0a 2b 	call	0x5614	; 0x5614 <__fp_pscB>
    552c:	20 f0       	brcs	.+8      	; 0x5536 <__mulsf3+0x1c>
    552e:	95 23       	and	r25, r21
    5530:	11 f0       	breq	.+4      	; 0x5536 <__mulsf3+0x1c>
    5532:	0c 94 fa 2a 	jmp	0x55f4	; 0x55f4 <__fp_inf>
    5536:	0c 94 00 2b 	jmp	0x5600	; 0x5600 <__fp_nan>
    553a:	11 24       	eor	r1, r1
    553c:	0c 94 87 2a 	jmp	0x550e	; 0x550e <__fp_szero>

00005540 <__mulsf3x>:
    5540:	0e 94 64 2a 	call	0x54c8	; 0x54c8 <__fp_split3>
    5544:	70 f3       	brcs	.-36     	; 0x5522 <__mulsf3+0x8>

00005546 <__mulsf3_pse>:
    5546:	95 9f       	mul	r25, r21
    5548:	c1 f3       	breq	.-16     	; 0x553a <__mulsf3+0x20>
    554a:	95 0f       	add	r25, r21
    554c:	50 e0       	ldi	r21, 0x00	; 0
    554e:	55 1f       	adc	r21, r21
    5550:	62 9f       	mul	r22, r18
    5552:	f0 01       	movw	r30, r0
    5554:	72 9f       	mul	r23, r18
    5556:	bb 27       	eor	r27, r27
    5558:	f0 0d       	add	r31, r0
    555a:	b1 1d       	adc	r27, r1
    555c:	63 9f       	mul	r22, r19
    555e:	aa 27       	eor	r26, r26
    5560:	f0 0d       	add	r31, r0
    5562:	b1 1d       	adc	r27, r1
    5564:	aa 1f       	adc	r26, r26
    5566:	64 9f       	mul	r22, r20
    5568:	66 27       	eor	r22, r22
    556a:	b0 0d       	add	r27, r0
    556c:	a1 1d       	adc	r26, r1
    556e:	66 1f       	adc	r22, r22
    5570:	82 9f       	mul	r24, r18
    5572:	22 27       	eor	r18, r18
    5574:	b0 0d       	add	r27, r0
    5576:	a1 1d       	adc	r26, r1
    5578:	62 1f       	adc	r22, r18
    557a:	73 9f       	mul	r23, r19
    557c:	b0 0d       	add	r27, r0
    557e:	a1 1d       	adc	r26, r1
    5580:	62 1f       	adc	r22, r18
    5582:	83 9f       	mul	r24, r19
    5584:	a0 0d       	add	r26, r0
    5586:	61 1d       	adc	r22, r1
    5588:	22 1f       	adc	r18, r18
    558a:	74 9f       	mul	r23, r20
    558c:	33 27       	eor	r19, r19
    558e:	a0 0d       	add	r26, r0
    5590:	61 1d       	adc	r22, r1
    5592:	23 1f       	adc	r18, r19
    5594:	84 9f       	mul	r24, r20
    5596:	60 0d       	add	r22, r0
    5598:	21 1d       	adc	r18, r1
    559a:	82 2f       	mov	r24, r18
    559c:	76 2f       	mov	r23, r22
    559e:	6a 2f       	mov	r22, r26
    55a0:	11 24       	eor	r1, r1
    55a2:	9f 57       	subi	r25, 0x7F	; 127
    55a4:	50 40       	sbci	r21, 0x00	; 0
    55a6:	9a f0       	brmi	.+38     	; 0x55ce <__mulsf3_pse+0x88>
    55a8:	f1 f0       	breq	.+60     	; 0x55e6 <__mulsf3_pse+0xa0>
    55aa:	88 23       	and	r24, r24
    55ac:	4a f0       	brmi	.+18     	; 0x55c0 <__mulsf3_pse+0x7a>
    55ae:	ee 0f       	add	r30, r30
    55b0:	ff 1f       	adc	r31, r31
    55b2:	bb 1f       	adc	r27, r27
    55b4:	66 1f       	adc	r22, r22
    55b6:	77 1f       	adc	r23, r23
    55b8:	88 1f       	adc	r24, r24
    55ba:	91 50       	subi	r25, 0x01	; 1
    55bc:	50 40       	sbci	r21, 0x00	; 0
    55be:	a9 f7       	brne	.-22     	; 0x55aa <__mulsf3_pse+0x64>
    55c0:	9e 3f       	cpi	r25, 0xFE	; 254
    55c2:	51 05       	cpc	r21, r1
    55c4:	80 f0       	brcs	.+32     	; 0x55e6 <__mulsf3_pse+0xa0>
    55c6:	0c 94 fa 2a 	jmp	0x55f4	; 0x55f4 <__fp_inf>
    55ca:	0c 94 87 2a 	jmp	0x550e	; 0x550e <__fp_szero>
    55ce:	5f 3f       	cpi	r21, 0xFF	; 255
    55d0:	e4 f3       	brlt	.-8      	; 0x55ca <__mulsf3_pse+0x84>
    55d2:	98 3e       	cpi	r25, 0xE8	; 232
    55d4:	d4 f3       	brlt	.-12     	; 0x55ca <__mulsf3_pse+0x84>
    55d6:	86 95       	lsr	r24
    55d8:	77 95       	ror	r23
    55da:	67 95       	ror	r22
    55dc:	b7 95       	ror	r27
    55de:	f7 95       	ror	r31
    55e0:	e7 95       	ror	r30
    55e2:	9f 5f       	subi	r25, 0xFF	; 255
    55e4:	c1 f7       	brne	.-16     	; 0x55d6 <__mulsf3_pse+0x90>
    55e6:	fe 2b       	or	r31, r30
    55e8:	88 0f       	add	r24, r24
    55ea:	91 1d       	adc	r25, r1
    55ec:	96 95       	lsr	r25
    55ee:	87 95       	ror	r24
    55f0:	97 f9       	bld	r25, 7
    55f2:	08 95       	ret

000055f4 <__fp_inf>:
    55f4:	97 f9       	bld	r25, 7
    55f6:	9f 67       	ori	r25, 0x7F	; 127
    55f8:	80 e8       	ldi	r24, 0x80	; 128
    55fa:	70 e0       	ldi	r23, 0x00	; 0
    55fc:	60 e0       	ldi	r22, 0x00	; 0
    55fe:	08 95       	ret

00005600 <__fp_nan>:
    5600:	9f ef       	ldi	r25, 0xFF	; 255
    5602:	80 ec       	ldi	r24, 0xC0	; 192
    5604:	08 95       	ret

00005606 <__fp_pscA>:
    5606:	00 24       	eor	r0, r0
    5608:	0a 94       	dec	r0
    560a:	16 16       	cp	r1, r22
    560c:	17 06       	cpc	r1, r23
    560e:	18 06       	cpc	r1, r24
    5610:	09 06       	cpc	r0, r25
    5612:	08 95       	ret

00005614 <__fp_pscB>:
    5614:	00 24       	eor	r0, r0
    5616:	0a 94       	dec	r0
    5618:	12 16       	cp	r1, r18
    561a:	13 06       	cpc	r1, r19
    561c:	14 06       	cpc	r1, r20
    561e:	05 06       	cpc	r0, r21
    5620:	08 95       	ret

00005622 <__fp_round>:
    5622:	09 2e       	mov	r0, r25
    5624:	03 94       	inc	r0
    5626:	00 0c       	add	r0, r0
    5628:	11 f4       	brne	.+4      	; 0x562e <__fp_round+0xc>
    562a:	88 23       	and	r24, r24
    562c:	52 f0       	brmi	.+20     	; 0x5642 <__fp_round+0x20>
    562e:	bb 0f       	add	r27, r27
    5630:	40 f4       	brcc	.+16     	; 0x5642 <__fp_round+0x20>
    5632:	bf 2b       	or	r27, r31
    5634:	11 f4       	brne	.+4      	; 0x563a <__fp_round+0x18>
    5636:	60 ff       	sbrs	r22, 0
    5638:	04 c0       	rjmp	.+8      	; 0x5642 <__fp_round+0x20>
    563a:	6f 5f       	subi	r22, 0xFF	; 255
    563c:	7f 4f       	sbci	r23, 0xFF	; 255
    563e:	8f 4f       	sbci	r24, 0xFF	; 255
    5640:	9f 4f       	sbci	r25, 0xFF	; 255
    5642:	08 95       	ret

00005644 <malloc>:
    5644:	0f 93       	push	r16
    5646:	1f 93       	push	r17
    5648:	cf 93       	push	r28
    564a:	df 93       	push	r29
    564c:	9c 01       	movw	r18, r24
    564e:	02 97       	sbiw	r24, 0x02	; 2
    5650:	10 f4       	brcc	.+4      	; 0x5656 <malloc+0x12>
    5652:	22 e0       	ldi	r18, 0x02	; 2
    5654:	30 e0       	ldi	r19, 0x00	; 0
    5656:	e0 91 98 04 	lds	r30, 0x0498	; 0x800498 <__flp>
    565a:	f0 91 99 04 	lds	r31, 0x0499	; 0x800499 <__flp+0x1>
    565e:	90 e0       	ldi	r25, 0x00	; 0
    5660:	80 e0       	ldi	r24, 0x00	; 0
    5662:	b0 e0       	ldi	r27, 0x00	; 0
    5664:	a0 e0       	ldi	r26, 0x00	; 0
    5666:	30 97       	sbiw	r30, 0x00	; 0
    5668:	91 f4       	brne	.+36     	; 0x568e <malloc+0x4a>
    566a:	00 97       	sbiw	r24, 0x00	; 0
    566c:	09 f4       	brne	.+2      	; 0x5670 <malloc+0x2c>
    566e:	45 c0       	rjmp	.+138    	; 0x56fa <malloc+0xb6>
    5670:	82 1b       	sub	r24, r18
    5672:	93 0b       	sbc	r25, r19
    5674:	84 30       	cpi	r24, 0x04	; 4
    5676:	91 05       	cpc	r25, r1
    5678:	b8 f5       	brcc	.+110    	; 0x56e8 <malloc+0xa4>
    567a:	8a 81       	ldd	r24, Y+2	; 0x02
    567c:	9b 81       	ldd	r25, Y+3	; 0x03
    567e:	61 15       	cp	r22, r1
    5680:	71 05       	cpc	r23, r1
    5682:	69 f1       	breq	.+90     	; 0x56de <malloc+0x9a>
    5684:	fb 01       	movw	r30, r22
    5686:	93 83       	std	Z+3, r25	; 0x03
    5688:	82 83       	std	Z+2, r24	; 0x02
    568a:	fe 01       	movw	r30, r28
    568c:	11 c0       	rjmp	.+34     	; 0x56b0 <malloc+0x6c>
    568e:	40 81       	ld	r20, Z
    5690:	51 81       	ldd	r21, Z+1	; 0x01
    5692:	02 81       	ldd	r16, Z+2	; 0x02
    5694:	13 81       	ldd	r17, Z+3	; 0x03
    5696:	42 17       	cp	r20, r18
    5698:	53 07       	cpc	r21, r19
    569a:	f0 f0       	brcs	.+60     	; 0x56d8 <malloc+0x94>
    569c:	42 17       	cp	r20, r18
    569e:	53 07       	cpc	r21, r19
    56a0:	99 f4       	brne	.+38     	; 0x56c8 <malloc+0x84>
    56a2:	10 97       	sbiw	r26, 0x00	; 0
    56a4:	61 f0       	breq	.+24     	; 0x56be <malloc+0x7a>
    56a6:	12 96       	adiw	r26, 0x02	; 2
    56a8:	0c 93       	st	X, r16
    56aa:	12 97       	sbiw	r26, 0x02	; 2
    56ac:	13 96       	adiw	r26, 0x03	; 3
    56ae:	1c 93       	st	X, r17
    56b0:	32 96       	adiw	r30, 0x02	; 2
    56b2:	cf 01       	movw	r24, r30
    56b4:	df 91       	pop	r29
    56b6:	cf 91       	pop	r28
    56b8:	1f 91       	pop	r17
    56ba:	0f 91       	pop	r16
    56bc:	08 95       	ret
    56be:	00 93 98 04 	sts	0x0498, r16	; 0x800498 <__flp>
    56c2:	10 93 99 04 	sts	0x0499, r17	; 0x800499 <__flp+0x1>
    56c6:	f4 cf       	rjmp	.-24     	; 0x56b0 <malloc+0x6c>
    56c8:	00 97       	sbiw	r24, 0x00	; 0
    56ca:	19 f0       	breq	.+6      	; 0x56d2 <malloc+0x8e>
    56cc:	48 17       	cp	r20, r24
    56ce:	59 07       	cpc	r21, r25
    56d0:	18 f4       	brcc	.+6      	; 0x56d8 <malloc+0x94>
    56d2:	ca 01       	movw	r24, r20
    56d4:	bd 01       	movw	r22, r26
    56d6:	ef 01       	movw	r28, r30
    56d8:	df 01       	movw	r26, r30
    56da:	f8 01       	movw	r30, r16
    56dc:	c4 cf       	rjmp	.-120    	; 0x5666 <malloc+0x22>
    56de:	90 93 99 04 	sts	0x0499, r25	; 0x800499 <__flp+0x1>
    56e2:	80 93 98 04 	sts	0x0498, r24	; 0x800498 <__flp>
    56e6:	d1 cf       	rjmp	.-94     	; 0x568a <malloc+0x46>
    56e8:	fe 01       	movw	r30, r28
    56ea:	e8 0f       	add	r30, r24
    56ec:	f9 1f       	adc	r31, r25
    56ee:	21 93       	st	Z+, r18
    56f0:	31 93       	st	Z+, r19
    56f2:	02 97       	sbiw	r24, 0x02	; 2
    56f4:	99 83       	std	Y+1, r25	; 0x01
    56f6:	88 83       	st	Y, r24
    56f8:	dc cf       	rjmp	.-72     	; 0x56b2 <malloc+0x6e>
    56fa:	80 91 9a 04 	lds	r24, 0x049A	; 0x80049a <__brkval>
    56fe:	90 91 9b 04 	lds	r25, 0x049B	; 0x80049b <__brkval+0x1>
    5702:	89 2b       	or	r24, r25
    5704:	41 f4       	brne	.+16     	; 0x5716 <malloc+0xd2>
    5706:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__malloc_heap_start>
    570a:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <__malloc_heap_start+0x1>
    570e:	90 93 9b 04 	sts	0x049B, r25	; 0x80049b <__brkval+0x1>
    5712:	80 93 9a 04 	sts	0x049A, r24	; 0x80049a <__brkval>
    5716:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <__malloc_heap_end>
    571a:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <__malloc_heap_end+0x1>
    571e:	00 97       	sbiw	r24, 0x00	; 0
    5720:	41 f4       	brne	.+16     	; 0x5732 <malloc+0xee>
    5722:	8d b7       	in	r24, 0x3d	; 61
    5724:	9e b7       	in	r25, 0x3e	; 62
    5726:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <__malloc_margin>
    572a:	50 91 0a 01 	lds	r21, 0x010A	; 0x80010a <__malloc_margin+0x1>
    572e:	84 1b       	sub	r24, r20
    5730:	95 0b       	sbc	r25, r21
    5732:	40 91 9a 04 	lds	r20, 0x049A	; 0x80049a <__brkval>
    5736:	50 91 9b 04 	lds	r21, 0x049B	; 0x80049b <__brkval+0x1>
    573a:	48 17       	cp	r20, r24
    573c:	59 07       	cpc	r21, r25
    573e:	08 f0       	brcs	.+2      	; 0x5742 <malloc+0xfe>
    5740:	b8 cf       	rjmp	.-144    	; 0x56b2 <malloc+0x6e>
    5742:	84 1b       	sub	r24, r20
    5744:	95 0b       	sbc	r25, r21
    5746:	82 17       	cp	r24, r18
    5748:	93 07       	cpc	r25, r19
    574a:	08 f4       	brcc	.+2      	; 0x574e <malloc+0x10a>
    574c:	b2 cf       	rjmp	.-156    	; 0x56b2 <malloc+0x6e>
    574e:	b9 01       	movw	r22, r18
    5750:	6e 5f       	subi	r22, 0xFE	; 254
    5752:	7f 4f       	sbci	r23, 0xFF	; 255
    5754:	86 17       	cp	r24, r22
    5756:	97 07       	cpc	r25, r23
    5758:	08 f4       	brcc	.+2      	; 0x575c <malloc+0x118>
    575a:	ab cf       	rjmp	.-170    	; 0x56b2 <malloc+0x6e>
    575c:	64 0f       	add	r22, r20
    575e:	75 1f       	adc	r23, r21
    5760:	70 93 9b 04 	sts	0x049B, r23	; 0x80049b <__brkval+0x1>
    5764:	60 93 9a 04 	sts	0x049A, r22	; 0x80049a <__brkval>
    5768:	fa 01       	movw	r30, r20
    576a:	21 93       	st	Z+, r18
    576c:	31 93       	st	Z+, r19
    576e:	a1 cf       	rjmp	.-190    	; 0x56b2 <malloc+0x6e>

00005770 <free>:
    5770:	cf 93       	push	r28
    5772:	df 93       	push	r29
    5774:	9c 01       	movw	r18, r24
    5776:	00 97       	sbiw	r24, 0x00	; 0
    5778:	e9 f0       	breq	.+58     	; 0x57b4 <free+0x44>
    577a:	fc 01       	movw	r30, r24
    577c:	32 97       	sbiw	r30, 0x02	; 2
    577e:	13 82       	std	Z+3, r1	; 0x03
    5780:	12 82       	std	Z+2, r1	; 0x02
    5782:	c0 91 98 04 	lds	r28, 0x0498	; 0x800498 <__flp>
    5786:	d0 91 99 04 	lds	r29, 0x0499	; 0x800499 <__flp+0x1>
    578a:	de 01       	movw	r26, r28
    578c:	90 e0       	ldi	r25, 0x00	; 0
    578e:	80 e0       	ldi	r24, 0x00	; 0
    5790:	20 97       	sbiw	r28, 0x00	; 0
    5792:	a1 f4       	brne	.+40     	; 0x57bc <free+0x4c>
    5794:	80 81       	ld	r24, Z
    5796:	91 81       	ldd	r25, Z+1	; 0x01
    5798:	28 0f       	add	r18, r24
    579a:	39 1f       	adc	r19, r25
    579c:	80 91 9a 04 	lds	r24, 0x049A	; 0x80049a <__brkval>
    57a0:	90 91 9b 04 	lds	r25, 0x049B	; 0x80049b <__brkval+0x1>
    57a4:	82 17       	cp	r24, r18
    57a6:	93 07       	cpc	r25, r19
    57a8:	09 f0       	breq	.+2      	; 0x57ac <free+0x3c>
    57aa:	67 c0       	rjmp	.+206    	; 0x587a <free+0x10a>
    57ac:	f0 93 9b 04 	sts	0x049B, r31	; 0x80049b <__brkval+0x1>
    57b0:	e0 93 9a 04 	sts	0x049A, r30	; 0x80049a <__brkval>
    57b4:	df 91       	pop	r29
    57b6:	cf 91       	pop	r28
    57b8:	08 95       	ret
    57ba:	da 01       	movw	r26, r20
    57bc:	ae 17       	cp	r26, r30
    57be:	bf 07       	cpc	r27, r31
    57c0:	08 f0       	brcs	.+2      	; 0x57c4 <free+0x54>
    57c2:	41 c0       	rjmp	.+130    	; 0x5846 <free+0xd6>
    57c4:	12 96       	adiw	r26, 0x02	; 2
    57c6:	4d 91       	ld	r20, X+
    57c8:	5c 91       	ld	r21, X
    57ca:	13 97       	sbiw	r26, 0x03	; 3
    57cc:	cd 01       	movw	r24, r26
    57ce:	41 15       	cp	r20, r1
    57d0:	51 05       	cpc	r21, r1
    57d2:	99 f7       	brne	.-26     	; 0x57ba <free+0x4a>
    57d4:	dc 01       	movw	r26, r24
    57d6:	13 96       	adiw	r26, 0x03	; 3
    57d8:	fc 93       	st	X, r31
    57da:	ee 93       	st	-X, r30
    57dc:	12 97       	sbiw	r26, 0x02	; 2
    57de:	4d 91       	ld	r20, X+
    57e0:	5d 91       	ld	r21, X+
    57e2:	a4 0f       	add	r26, r20
    57e4:	b5 1f       	adc	r27, r21
    57e6:	ea 17       	cp	r30, r26
    57e8:	fb 07       	cpc	r31, r27
    57ea:	81 f4       	brne	.+32     	; 0x580c <free+0x9c>
    57ec:	20 81       	ld	r18, Z
    57ee:	31 81       	ldd	r19, Z+1	; 0x01
    57f0:	2e 5f       	subi	r18, 0xFE	; 254
    57f2:	3f 4f       	sbci	r19, 0xFF	; 255
    57f4:	24 0f       	add	r18, r20
    57f6:	35 1f       	adc	r19, r21
    57f8:	dc 01       	movw	r26, r24
    57fa:	11 96       	adiw	r26, 0x01	; 1
    57fc:	3c 93       	st	X, r19
    57fe:	2e 93       	st	-X, r18
    5800:	22 81       	ldd	r18, Z+2	; 0x02
    5802:	33 81       	ldd	r19, Z+3	; 0x03
    5804:	13 96       	adiw	r26, 0x03	; 3
    5806:	3c 93       	st	X, r19
    5808:	2e 93       	st	-X, r18
    580a:	12 97       	sbiw	r26, 0x02	; 2
    580c:	b0 e0       	ldi	r27, 0x00	; 0
    580e:	a0 e0       	ldi	r26, 0x00	; 0
    5810:	8a 81       	ldd	r24, Y+2	; 0x02
    5812:	9b 81       	ldd	r25, Y+3	; 0x03
    5814:	00 97       	sbiw	r24, 0x00	; 0
    5816:	b1 f5       	brne	.+108    	; 0x5884 <free+0x114>
    5818:	fe 01       	movw	r30, r28
    581a:	81 91       	ld	r24, Z+
    581c:	91 91       	ld	r25, Z+
    581e:	e8 0f       	add	r30, r24
    5820:	f9 1f       	adc	r31, r25
    5822:	80 91 9a 04 	lds	r24, 0x049A	; 0x80049a <__brkval>
    5826:	90 91 9b 04 	lds	r25, 0x049B	; 0x80049b <__brkval+0x1>
    582a:	8e 17       	cp	r24, r30
    582c:	9f 07       	cpc	r25, r31
    582e:	11 f6       	brne	.-124    	; 0x57b4 <free+0x44>
    5830:	10 97       	sbiw	r26, 0x00	; 0
    5832:	59 f5       	brne	.+86     	; 0x588a <free+0x11a>
    5834:	10 92 99 04 	sts	0x0499, r1	; 0x800499 <__flp+0x1>
    5838:	10 92 98 04 	sts	0x0498, r1	; 0x800498 <__flp>
    583c:	d0 93 9b 04 	sts	0x049B, r29	; 0x80049b <__brkval+0x1>
    5840:	c0 93 9a 04 	sts	0x049A, r28	; 0x80049a <__brkval>
    5844:	b7 cf       	rjmp	.-146    	; 0x57b4 <free+0x44>
    5846:	b3 83       	std	Z+3, r27	; 0x03
    5848:	a2 83       	std	Z+2, r26	; 0x02
    584a:	40 81       	ld	r20, Z
    584c:	51 81       	ldd	r21, Z+1	; 0x01
    584e:	24 0f       	add	r18, r20
    5850:	35 1f       	adc	r19, r21
    5852:	a2 17       	cp	r26, r18
    5854:	b3 07       	cpc	r27, r19
    5856:	71 f4       	brne	.+28     	; 0x5874 <free+0x104>
    5858:	4e 5f       	subi	r20, 0xFE	; 254
    585a:	5f 4f       	sbci	r21, 0xFF	; 255
    585c:	2d 91       	ld	r18, X+
    585e:	3c 91       	ld	r19, X
    5860:	11 97       	sbiw	r26, 0x01	; 1
    5862:	24 0f       	add	r18, r20
    5864:	35 1f       	adc	r19, r21
    5866:	31 83       	std	Z+1, r19	; 0x01
    5868:	20 83       	st	Z, r18
    586a:	12 96       	adiw	r26, 0x02	; 2
    586c:	2d 91       	ld	r18, X+
    586e:	3c 91       	ld	r19, X
    5870:	33 83       	std	Z+3, r19	; 0x03
    5872:	22 83       	std	Z+2, r18	; 0x02
    5874:	00 97       	sbiw	r24, 0x00	; 0
    5876:	09 f0       	breq	.+2      	; 0x587a <free+0x10a>
    5878:	ad cf       	rjmp	.-166    	; 0x57d4 <free+0x64>
    587a:	f0 93 99 04 	sts	0x0499, r31	; 0x800499 <__flp+0x1>
    587e:	e0 93 98 04 	sts	0x0498, r30	; 0x800498 <__flp>
    5882:	98 cf       	rjmp	.-208    	; 0x57b4 <free+0x44>
    5884:	de 01       	movw	r26, r28
    5886:	ec 01       	movw	r28, r24
    5888:	c3 cf       	rjmp	.-122    	; 0x5810 <free+0xa0>
    588a:	13 96       	adiw	r26, 0x03	; 3
    588c:	1c 92       	st	X, r1
    588e:	1e 92       	st	-X, r1
    5890:	12 97       	sbiw	r26, 0x02	; 2
    5892:	d4 cf       	rjmp	.-88     	; 0x583c <free+0xcc>

00005894 <strtoul>:
    5894:	a6 e0       	ldi	r26, 0x06	; 6
    5896:	b0 e0       	ldi	r27, 0x00	; 0
    5898:	e0 e5       	ldi	r30, 0x50	; 80
    589a:	fc e2       	ldi	r31, 0x2C	; 44
    589c:	0c 94 c4 31 	jmp	0x6388	; 0x6388 <__prologue_saves__+0x4>
    58a0:	8d 83       	std	Y+5, r24	; 0x05
    58a2:	9e 83       	std	Y+6, r25	; 0x06
    58a4:	6b 01       	movw	r12, r22
    58a6:	7a 01       	movw	r14, r20
    58a8:	61 15       	cp	r22, r1
    58aa:	71 05       	cpc	r23, r1
    58ac:	29 f0       	breq	.+10     	; 0x58b8 <strtoul+0x24>
    58ae:	ed 81       	ldd	r30, Y+5	; 0x05
    58b0:	fe 81       	ldd	r31, Y+6	; 0x06
    58b2:	db 01       	movw	r26, r22
    58b4:	ed 93       	st	X+, r30
    58b6:	fc 93       	st	X, r31
    58b8:	e1 14       	cp	r14, r1
    58ba:	f1 04       	cpc	r15, r1
    58bc:	29 f0       	breq	.+10     	; 0x58c8 <strtoul+0x34>
    58be:	c7 01       	movw	r24, r14
    58c0:	02 97       	sbiw	r24, 0x02	; 2
    58c2:	83 97       	sbiw	r24, 0x23	; 35
    58c4:	08 f0       	brcs	.+2      	; 0x58c8 <strtoul+0x34>
    58c6:	a6 c0       	rjmp	.+332    	; 0x5a14 <strtoul+0x180>
    58c8:	ad 80       	ldd	r10, Y+5	; 0x05
    58ca:	be 80       	ldd	r11, Y+6	; 0x06
    58cc:	95 01       	movw	r18, r10
    58ce:	2f 5f       	subi	r18, 0xFF	; 255
    58d0:	3f 4f       	sbci	r19, 0xFF	; 255
    58d2:	3e 83       	std	Y+6, r19	; 0x06
    58d4:	2d 83       	std	Y+5, r18	; 0x05
    58d6:	d5 01       	movw	r26, r10
    58d8:	1c 91       	ld	r17, X
    58da:	81 2f       	mov	r24, r17
    58dc:	90 e0       	ldi	r25, 0x00	; 0
    58de:	0e 94 b0 2d 	call	0x5b60	; 0x5b60 <isspace>
    58e2:	89 2b       	or	r24, r25
    58e4:	89 f7       	brne	.-30     	; 0x58c8 <strtoul+0x34>
    58e6:	1d 32       	cpi	r17, 0x2D	; 45
    58e8:	b1 f4       	brne	.+44     	; 0x5916 <strtoul+0x82>
    58ea:	ed 81       	ldd	r30, Y+5	; 0x05
    58ec:	fe 81       	ldd	r31, Y+6	; 0x06
    58ee:	10 81       	ld	r17, Z
    58f0:	95 01       	movw	r18, r10
    58f2:	2e 5f       	subi	r18, 0xFE	; 254
    58f4:	3f 4f       	sbci	r19, 0xFF	; 255
    58f6:	3e 83       	std	Y+6, r19	; 0x06
    58f8:	2d 83       	std	Y+5, r18	; 0x05
    58fa:	01 e0       	ldi	r16, 0x01	; 1
    58fc:	e1 14       	cp	r14, r1
    58fe:	f1 04       	cpc	r15, r1
    5900:	09 f4       	brne	.+2      	; 0x5904 <strtoul+0x70>
    5902:	01 c1       	rjmp	.+514    	; 0x5b06 <strtoul+0x272>
    5904:	f0 e1       	ldi	r31, 0x10	; 16
    5906:	ef 16       	cp	r14, r31
    5908:	f1 04       	cpc	r15, r1
    590a:	09 f0       	breq	.+2      	; 0x590e <strtoul+0x7a>
    590c:	04 c1       	rjmp	.+520    	; 0x5b16 <strtoul+0x282>
    590e:	10 33       	cpi	r17, 0x30	; 48
    5910:	69 f0       	breq	.+26     	; 0x592c <strtoul+0x98>
    5912:	e0 2f       	mov	r30, r16
    5914:	1d c0       	rjmp	.+58     	; 0x5950 <strtoul+0xbc>
    5916:	1b 32       	cpi	r17, 0x2B	; 43
    5918:	39 f4       	brne	.+14     	; 0x5928 <strtoul+0x94>
    591a:	ad 81       	ldd	r26, Y+5	; 0x05
    591c:	be 81       	ldd	r27, Y+6	; 0x06
    591e:	1c 91       	ld	r17, X
    5920:	f5 01       	movw	r30, r10
    5922:	32 96       	adiw	r30, 0x02	; 2
    5924:	fe 83       	std	Y+6, r31	; 0x06
    5926:	ed 83       	std	Y+5, r30	; 0x05
    5928:	00 e0       	ldi	r16, 0x00	; 0
    592a:	e8 cf       	rjmp	.-48     	; 0x58fc <strtoul+0x68>
    592c:	ad 81       	ldd	r26, Y+5	; 0x05
    592e:	be 81       	ldd	r27, Y+6	; 0x06
    5930:	8c 91       	ld	r24, X
    5932:	8f 7d       	andi	r24, 0xDF	; 223
    5934:	88 35       	cpi	r24, 0x58	; 88
    5936:	09 f0       	breq	.+2      	; 0x593a <strtoul+0xa6>
    5938:	72 c0       	rjmp	.+228    	; 0x5a1e <strtoul+0x18a>
    593a:	11 96       	adiw	r26, 0x01	; 1
    593c:	1c 91       	ld	r17, X
    593e:	11 97       	sbiw	r26, 0x01	; 1
    5940:	12 96       	adiw	r26, 0x02	; 2
    5942:	be 83       	std	Y+6, r27	; 0x06
    5944:	ad 83       	std	Y+5, r26	; 0x05
    5946:	e0 2f       	mov	r30, r16
    5948:	e2 60       	ori	r30, 0x02	; 2
    594a:	50 e1       	ldi	r21, 0x10	; 16
    594c:	e5 2e       	mov	r14, r21
    594e:	f1 2c       	mov	r15, r1
    5950:	88 24       	eor	r8, r8
    5952:	8a 94       	dec	r8
    5954:	98 2c       	mov	r9, r8
    5956:	a8 2c       	mov	r10, r8
    5958:	8f e0       	ldi	r24, 0x0F	; 15
    595a:	b8 2e       	mov	r11, r24
    595c:	81 c0       	rjmp	.+258    	; 0x5a60 <strtoul+0x1cc>
    595e:	e0 2f       	mov	r30, r16
    5960:	10 e3       	ldi	r17, 0x30	; 48
    5962:	29 e9       	ldi	r18, 0x99	; 153
    5964:	82 2e       	mov	r8, r18
    5966:	98 2c       	mov	r9, r8
    5968:	a8 2c       	mov	r10, r8
    596a:	29 e1       	ldi	r18, 0x19	; 25
    596c:	b2 2e       	mov	r11, r18
    596e:	78 c0       	rjmp	.+240    	; 0x5a60 <strtoul+0x1cc>
    5970:	e0 2f       	mov	r30, r16
    5972:	10 e3       	ldi	r17, 0x30	; 48
    5974:	ed cf       	rjmp	.-38     	; 0x5950 <strtoul+0xbc>
    5976:	e0 2f       	mov	r30, r16
    5978:	88 24       	eor	r8, r8
    597a:	8a 94       	dec	r8
    597c:	98 2c       	mov	r9, r8
    597e:	a8 2c       	mov	r10, r8
    5980:	3f e1       	ldi	r19, 0x1F	; 31
    5982:	b3 2e       	mov	r11, r19
    5984:	6d c0       	rjmp	.+218    	; 0x5a60 <strtoul+0x1cc>
    5986:	e0 2f       	mov	r30, r16
    5988:	10 e3       	ldi	r17, 0x30	; 48
    598a:	48 e0       	ldi	r20, 0x08	; 8
    598c:	e4 2e       	mov	r14, r20
    598e:	f1 2c       	mov	r15, r1
    5990:	f3 cf       	rjmp	.-26     	; 0x5978 <strtoul+0xe4>
    5992:	8f ef       	ldi	r24, 0xFF	; 255
    5994:	b2 c0       	rjmp	.+356    	; 0x5afa <strtoul+0x266>
    5996:	c1 14       	cp	r12, r1
    5998:	d1 04       	cpc	r13, r1
    599a:	49 f0       	breq	.+18     	; 0x59ae <strtoul+0x11a>
    599c:	88 23       	and	r24, r24
    599e:	79 f1       	breq	.+94     	; 0x59fe <strtoul+0x16a>
    59a0:	2d 81       	ldd	r18, Y+5	; 0x05
    59a2:	3e 81       	ldd	r19, Y+6	; 0x06
    59a4:	21 50       	subi	r18, 0x01	; 1
    59a6:	31 09       	sbc	r19, r1
    59a8:	f6 01       	movw	r30, r12
    59aa:	31 83       	std	Z+1, r19	; 0x01
    59ac:	20 83       	st	Z, r18
    59ae:	00 23       	and	r16, r16
    59b0:	79 f0       	breq	.+30     	; 0x59d0 <strtoul+0x13c>
    59b2:	29 81       	ldd	r18, Y+1	; 0x01
    59b4:	3a 81       	ldd	r19, Y+2	; 0x02
    59b6:	4b 81       	ldd	r20, Y+3	; 0x03
    59b8:	5c 81       	ldd	r21, Y+4	; 0x04
    59ba:	50 95       	com	r21
    59bc:	40 95       	com	r20
    59be:	30 95       	com	r19
    59c0:	21 95       	neg	r18
    59c2:	3f 4f       	sbci	r19, 0xFF	; 255
    59c4:	4f 4f       	sbci	r20, 0xFF	; 255
    59c6:	5f 4f       	sbci	r21, 0xFF	; 255
    59c8:	29 83       	std	Y+1, r18	; 0x01
    59ca:	3a 83       	std	Y+2, r19	; 0x02
    59cc:	4b 83       	std	Y+3, r20	; 0x03
    59ce:	5c 83       	std	Y+4, r21	; 0x04
    59d0:	8f 3f       	cpi	r24, 0xFF	; 255
    59d2:	69 f4       	brne	.+26     	; 0x59ee <strtoul+0x15a>
    59d4:	82 e2       	ldi	r24, 0x22	; 34
    59d6:	90 e0       	ldi	r25, 0x00	; 0
    59d8:	90 93 9f 04 	sts	0x049F, r25	; 0x80049f <errno+0x1>
    59dc:	80 93 9e 04 	sts	0x049E, r24	; 0x80049e <errno>
    59e0:	8f ef       	ldi	r24, 0xFF	; 255
    59e2:	9f ef       	ldi	r25, 0xFF	; 255
    59e4:	dc 01       	movw	r26, r24
    59e6:	89 83       	std	Y+1, r24	; 0x01
    59e8:	9a 83       	std	Y+2, r25	; 0x02
    59ea:	ab 83       	std	Y+3, r26	; 0x03
    59ec:	bc 83       	std	Y+4, r27	; 0x04
    59ee:	69 81       	ldd	r22, Y+1	; 0x01
    59f0:	7a 81       	ldd	r23, Y+2	; 0x02
    59f2:	8b 81       	ldd	r24, Y+3	; 0x03
    59f4:	9c 81       	ldd	r25, Y+4	; 0x04
    59f6:	26 96       	adiw	r28, 0x06	; 6
    59f8:	e0 e1       	ldi	r30, 0x10	; 16
    59fa:	0c 94 e0 31 	jmp	0x63c0	; 0x63c0 <__epilogue_restores__+0x4>
    59fe:	e1 ff       	sbrs	r30, 1
    5a00:	06 c0       	rjmp	.+12     	; 0x5a0e <strtoul+0x17a>
    5a02:	ed 81       	ldd	r30, Y+5	; 0x05
    5a04:	fe 81       	ldd	r31, Y+6	; 0x06
    5a06:	32 97       	sbiw	r30, 0x02	; 2
    5a08:	d6 01       	movw	r26, r12
    5a0a:	ed 93       	st	X+, r30
    5a0c:	fc 93       	st	X, r31
    5a0e:	00 23       	and	r16, r16
    5a10:	71 f3       	breq	.-36     	; 0x59ee <strtoul+0x15a>
    5a12:	cf cf       	rjmp	.-98     	; 0x59b2 <strtoul+0x11e>
    5a14:	19 82       	std	Y+1, r1	; 0x01
    5a16:	1a 82       	std	Y+2, r1	; 0x02
    5a18:	1b 82       	std	Y+3, r1	; 0x03
    5a1a:	1c 82       	std	Y+4, r1	; 0x04
    5a1c:	e8 cf       	rjmp	.-48     	; 0x59ee <strtoul+0x15a>
    5a1e:	e1 14       	cp	r14, r1
    5a20:	f1 04       	cpc	r15, r1
    5a22:	09 f4       	brne	.+2      	; 0x5a26 <strtoul+0x192>
    5a24:	b0 cf       	rjmp	.-160    	; 0x5986 <strtoul+0xf2>
    5a26:	ba e0       	ldi	r27, 0x0A	; 10
    5a28:	eb 16       	cp	r14, r27
    5a2a:	f1 04       	cpc	r15, r1
    5a2c:	09 f4       	brne	.+2      	; 0x5a30 <strtoul+0x19c>
    5a2e:	97 cf       	rjmp	.-210    	; 0x595e <strtoul+0xca>
    5a30:	e0 e1       	ldi	r30, 0x10	; 16
    5a32:	ee 16       	cp	r14, r30
    5a34:	f1 04       	cpc	r15, r1
    5a36:	09 f4       	brne	.+2      	; 0x5a3a <strtoul+0x1a6>
    5a38:	9b cf       	rjmp	.-202    	; 0x5970 <strtoul+0xdc>
    5a3a:	10 e3       	ldi	r17, 0x30	; 48
    5a3c:	f8 e0       	ldi	r31, 0x08	; 8
    5a3e:	ef 16       	cp	r14, r31
    5a40:	f1 04       	cpc	r15, r1
    5a42:	09 f4       	brne	.+2      	; 0x5a46 <strtoul+0x1b2>
    5a44:	98 cf       	rjmp	.-208    	; 0x5976 <strtoul+0xe2>
    5a46:	6f ef       	ldi	r22, 0xFF	; 255
    5a48:	7f ef       	ldi	r23, 0xFF	; 255
    5a4a:	cb 01       	movw	r24, r22
    5a4c:	97 01       	movw	r18, r14
    5a4e:	0f 2c       	mov	r0, r15
    5a50:	00 0c       	add	r0, r0
    5a52:	44 0b       	sbc	r20, r20
    5a54:	55 0b       	sbc	r21, r21
    5a56:	0e 94 9b 29 	call	0x5336	; 0x5336 <__udivmodsi4>
    5a5a:	49 01       	movw	r8, r18
    5a5c:	5a 01       	movw	r10, r20
    5a5e:	e0 2f       	mov	r30, r16
    5a60:	80 e0       	ldi	r24, 0x00	; 0
    5a62:	19 82       	std	Y+1, r1	; 0x01
    5a64:	1a 82       	std	Y+2, r1	; 0x02
    5a66:	1b 82       	std	Y+3, r1	; 0x03
    5a68:	1c 82       	std	Y+4, r1	; 0x04
    5a6a:	27 01       	movw	r4, r14
    5a6c:	0f 2c       	mov	r0, r15
    5a6e:	00 0c       	add	r0, r0
    5a70:	66 08       	sbc	r6, r6
    5a72:	77 08       	sbc	r7, r7
    5a74:	f0 ed       	ldi	r31, 0xD0	; 208
    5a76:	f1 0f       	add	r31, r17
    5a78:	fa 30       	cpi	r31, 0x0A	; 10
    5a7a:	60 f0       	brcs	.+24     	; 0x5a94 <strtoul+0x200>
    5a7c:	9f eb       	ldi	r25, 0xBF	; 191
    5a7e:	91 0f       	add	r25, r17
    5a80:	f9 ec       	ldi	r31, 0xC9	; 201
    5a82:	9a 31       	cpi	r25, 0x1A	; 26
    5a84:	30 f0       	brcs	.+12     	; 0x5a92 <strtoul+0x1fe>
    5a86:	9f e9       	ldi	r25, 0x9F	; 159
    5a88:	91 0f       	add	r25, r17
    5a8a:	9a 31       	cpi	r25, 0x1A	; 26
    5a8c:	08 f0       	brcs	.+2      	; 0x5a90 <strtoul+0x1fc>
    5a8e:	83 cf       	rjmp	.-250    	; 0x5996 <strtoul+0x102>
    5a90:	f9 ea       	ldi	r31, 0xA9	; 169
    5a92:	f1 0f       	add	r31, r17
    5a94:	fe 15       	cp	r31, r14
    5a96:	1f 04       	cpc	r1, r15
    5a98:	0c f0       	brlt	.+2      	; 0x5a9c <strtoul+0x208>
    5a9a:	7d cf       	rjmp	.-262    	; 0x5996 <strtoul+0x102>
    5a9c:	8f 3f       	cpi	r24, 0xFF	; 255
    5a9e:	69 f1       	breq	.+90     	; 0x5afa <strtoul+0x266>
    5aa0:	29 81       	ldd	r18, Y+1	; 0x01
    5aa2:	3a 81       	ldd	r19, Y+2	; 0x02
    5aa4:	4b 81       	ldd	r20, Y+3	; 0x03
    5aa6:	5c 81       	ldd	r21, Y+4	; 0x04
    5aa8:	82 16       	cp	r8, r18
    5aaa:	93 06       	cpc	r9, r19
    5aac:	a4 06       	cpc	r10, r20
    5aae:	b5 06       	cpc	r11, r21
    5ab0:	08 f4       	brcc	.+2      	; 0x5ab4 <strtoul+0x220>
    5ab2:	6f cf       	rjmp	.-290    	; 0x5992 <strtoul+0xfe>
    5ab4:	a3 01       	movw	r20, r6
    5ab6:	92 01       	movw	r18, r4
    5ab8:	69 81       	ldd	r22, Y+1	; 0x01
    5aba:	7a 81       	ldd	r23, Y+2	; 0x02
    5abc:	8b 81       	ldd	r24, Y+3	; 0x03
    5abe:	9c 81       	ldd	r25, Y+4	; 0x04
    5ac0:	0e 94 a7 31 	call	0x634e	; 0x634e <__mulsi3>
    5ac4:	69 83       	std	Y+1, r22	; 0x01
    5ac6:	7a 83       	std	Y+2, r23	; 0x02
    5ac8:	8b 83       	std	Y+3, r24	; 0x03
    5aca:	9c 83       	std	Y+4, r25	; 0x04
    5acc:	8f 2f       	mov	r24, r31
    5ace:	90 e0       	ldi	r25, 0x00	; 0
    5ad0:	b0 e0       	ldi	r27, 0x00	; 0
    5ad2:	a0 e0       	ldi	r26, 0x00	; 0
    5ad4:	29 81       	ldd	r18, Y+1	; 0x01
    5ad6:	3a 81       	ldd	r19, Y+2	; 0x02
    5ad8:	4b 81       	ldd	r20, Y+3	; 0x03
    5ada:	5c 81       	ldd	r21, Y+4	; 0x04
    5adc:	28 0f       	add	r18, r24
    5ade:	39 1f       	adc	r19, r25
    5ae0:	4a 1f       	adc	r20, r26
    5ae2:	5b 1f       	adc	r21, r27
    5ae4:	29 83       	std	Y+1, r18	; 0x01
    5ae6:	3a 83       	std	Y+2, r19	; 0x02
    5ae8:	4b 83       	std	Y+3, r20	; 0x03
    5aea:	5c 83       	std	Y+4, r21	; 0x04
    5aec:	28 17       	cp	r18, r24
    5aee:	39 07       	cpc	r19, r25
    5af0:	4a 07       	cpc	r20, r26
    5af2:	5b 07       	cpc	r21, r27
    5af4:	08 f4       	brcc	.+2      	; 0x5af8 <strtoul+0x264>
    5af6:	4d cf       	rjmp	.-358    	; 0x5992 <strtoul+0xfe>
    5af8:	81 e0       	ldi	r24, 0x01	; 1
    5afa:	ad 81       	ldd	r26, Y+5	; 0x05
    5afc:	be 81       	ldd	r27, Y+6	; 0x06
    5afe:	1d 91       	ld	r17, X+
    5b00:	be 83       	std	Y+6, r27	; 0x06
    5b02:	ad 83       	std	Y+5, r26	; 0x05
    5b04:	b7 cf       	rjmp	.-146    	; 0x5a74 <strtoul+0x1e0>
    5b06:	10 33       	cpi	r17, 0x30	; 48
    5b08:	09 f4       	brne	.+2      	; 0x5b0c <strtoul+0x278>
    5b0a:	10 cf       	rjmp	.-480    	; 0x592c <strtoul+0x98>
    5b0c:	e0 2f       	mov	r30, r16
    5b0e:	9a e0       	ldi	r25, 0x0A	; 10
    5b10:	e9 2e       	mov	r14, r25
    5b12:	f1 2c       	mov	r15, r1
    5b14:	26 cf       	rjmp	.-436    	; 0x5962 <strtoul+0xce>
    5b16:	9a e0       	ldi	r25, 0x0A	; 10
    5b18:	e9 16       	cp	r14, r25
    5b1a:	f1 04       	cpc	r15, r1
    5b1c:	09 f0       	breq	.+2      	; 0x5b20 <strtoul+0x28c>
    5b1e:	8e cf       	rjmp	.-228    	; 0x5a3c <strtoul+0x1a8>
    5b20:	e0 2f       	mov	r30, r16
    5b22:	1f cf       	rjmp	.-450    	; 0x5962 <strtoul+0xce>

00005b24 <atoi>:
    5b24:	fc 01       	movw	r30, r24
    5b26:	88 27       	eor	r24, r24
    5b28:	99 27       	eor	r25, r25
    5b2a:	e8 94       	clt
    5b2c:	21 91       	ld	r18, Z+
    5b2e:	20 32       	cpi	r18, 0x20	; 32
    5b30:	e9 f3       	breq	.-6      	; 0x5b2c <atoi+0x8>
    5b32:	29 30       	cpi	r18, 0x09	; 9
    5b34:	10 f0       	brcs	.+4      	; 0x5b3a <atoi+0x16>
    5b36:	2e 30       	cpi	r18, 0x0E	; 14
    5b38:	c8 f3       	brcs	.-14     	; 0x5b2c <atoi+0x8>
    5b3a:	2b 32       	cpi	r18, 0x2B	; 43
    5b3c:	41 f0       	breq	.+16     	; 0x5b4e <atoi+0x2a>
    5b3e:	2d 32       	cpi	r18, 0x2D	; 45
    5b40:	39 f4       	brne	.+14     	; 0x5b50 <atoi+0x2c>
    5b42:	68 94       	set
    5b44:	04 c0       	rjmp	.+8      	; 0x5b4e <atoi+0x2a>
    5b46:	0e 94 62 2e 	call	0x5cc4	; 0x5cc4 <__mulhi_const_10>
    5b4a:	82 0f       	add	r24, r18
    5b4c:	91 1d       	adc	r25, r1
    5b4e:	21 91       	ld	r18, Z+
    5b50:	20 53       	subi	r18, 0x30	; 48
    5b52:	2a 30       	cpi	r18, 0x0A	; 10
    5b54:	c0 f3       	brcs	.-16     	; 0x5b46 <atoi+0x22>
    5b56:	1e f4       	brtc	.+6      	; 0x5b5e <atoi+0x3a>
    5b58:	90 95       	com	r25
    5b5a:	81 95       	neg	r24
    5b5c:	9f 4f       	sbci	r25, 0xFF	; 255
    5b5e:	08 95       	ret

00005b60 <isspace>:
    5b60:	91 11       	cpse	r25, r1
    5b62:	0c 94 9d 30 	jmp	0x613a	; 0x613a <__ctype_isfalse>
    5b66:	80 32       	cpi	r24, 0x20	; 32
    5b68:	19 f0       	breq	.+6      	; 0x5b70 <isspace+0x10>
    5b6a:	89 50       	subi	r24, 0x09	; 9
    5b6c:	85 50       	subi	r24, 0x05	; 5
    5b6e:	c8 f7       	brcc	.-14     	; 0x5b62 <isspace+0x2>
    5b70:	08 95       	ret

00005b72 <memcmp_P>:
    5b72:	fb 01       	movw	r30, r22
    5b74:	dc 01       	movw	r26, r24
    5b76:	04 c0       	rjmp	.+8      	; 0x5b80 <memcmp_P+0xe>
    5b78:	8d 91       	ld	r24, X+
    5b7a:	05 90       	lpm	r0, Z+
    5b7c:	80 19       	sub	r24, r0
    5b7e:	21 f4       	brne	.+8      	; 0x5b88 <memcmp_P+0x16>
    5b80:	41 50       	subi	r20, 0x01	; 1
    5b82:	50 40       	sbci	r21, 0x00	; 0
    5b84:	c8 f7       	brcc	.-14     	; 0x5b78 <memcmp_P+0x6>
    5b86:	88 1b       	sub	r24, r24
    5b88:	99 0b       	sbc	r25, r25
    5b8a:	08 95       	ret

00005b8c <strstr_P>:
    5b8c:	fb 01       	movw	r30, r22
    5b8e:	55 91       	lpm	r21, Z+
    5b90:	55 23       	and	r21, r21
    5b92:	a9 f0       	breq	.+42     	; 0x5bbe <strstr_P+0x32>
    5b94:	bf 01       	movw	r22, r30
    5b96:	dc 01       	movw	r26, r24
    5b98:	4d 91       	ld	r20, X+
    5b9a:	45 17       	cp	r20, r21
    5b9c:	41 11       	cpse	r20, r1
    5b9e:	e1 f7       	brne	.-8      	; 0x5b98 <strstr_P+0xc>
    5ba0:	59 f4       	brne	.+22     	; 0x5bb8 <strstr_P+0x2c>
    5ba2:	cd 01       	movw	r24, r26
    5ba4:	05 90       	lpm	r0, Z+
    5ba6:	00 20       	and	r0, r0
    5ba8:	49 f0       	breq	.+18     	; 0x5bbc <strstr_P+0x30>
    5baa:	4d 91       	ld	r20, X+
    5bac:	40 15       	cp	r20, r0
    5bae:	41 11       	cpse	r20, r1
    5bb0:	c9 f3       	breq	.-14     	; 0x5ba4 <strstr_P+0x18>
    5bb2:	fb 01       	movw	r30, r22
    5bb4:	41 11       	cpse	r20, r1
    5bb6:	ef cf       	rjmp	.-34     	; 0x5b96 <strstr_P+0xa>
    5bb8:	81 e0       	ldi	r24, 0x01	; 1
    5bba:	90 e0       	ldi	r25, 0x00	; 0
    5bbc:	01 97       	sbiw	r24, 0x01	; 1
    5bbe:	08 95       	ret

00005bc0 <strtok>:
    5bc0:	4c e9       	ldi	r20, 0x9C	; 156
    5bc2:	54 e0       	ldi	r21, 0x04	; 4
    5bc4:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <strtok_r>
    5bc8:	08 95       	ret

00005bca <memcmp>:
    5bca:	fb 01       	movw	r30, r22
    5bcc:	dc 01       	movw	r26, r24
    5bce:	04 c0       	rjmp	.+8      	; 0x5bd8 <memcmp+0xe>
    5bd0:	8d 91       	ld	r24, X+
    5bd2:	01 90       	ld	r0, Z+
    5bd4:	80 19       	sub	r24, r0
    5bd6:	21 f4       	brne	.+8      	; 0x5be0 <memcmp+0x16>
    5bd8:	41 50       	subi	r20, 0x01	; 1
    5bda:	50 40       	sbci	r21, 0x00	; 0
    5bdc:	c8 f7       	brcc	.-14     	; 0x5bd0 <memcmp+0x6>
    5bde:	88 1b       	sub	r24, r24
    5be0:	99 0b       	sbc	r25, r25
    5be2:	08 95       	ret

00005be4 <memmove>:
    5be4:	68 17       	cp	r22, r24
    5be6:	79 07       	cpc	r23, r25
    5be8:	68 f4       	brcc	.+26     	; 0x5c04 <memmove+0x20>
    5bea:	fb 01       	movw	r30, r22
    5bec:	dc 01       	movw	r26, r24
    5bee:	e4 0f       	add	r30, r20
    5bf0:	f5 1f       	adc	r31, r21
    5bf2:	a4 0f       	add	r26, r20
    5bf4:	b5 1f       	adc	r27, r21
    5bf6:	02 c0       	rjmp	.+4      	; 0x5bfc <memmove+0x18>
    5bf8:	02 90       	ld	r0, -Z
    5bfa:	0e 92       	st	-X, r0
    5bfc:	41 50       	subi	r20, 0x01	; 1
    5bfe:	50 40       	sbci	r21, 0x00	; 0
    5c00:	d8 f7       	brcc	.-10     	; 0x5bf8 <memmove+0x14>
    5c02:	08 95       	ret
    5c04:	0c 94 ab 30 	jmp	0x6156	; 0x6156 <memcpy>

00005c08 <memset>:
    5c08:	dc 01       	movw	r26, r24
    5c0a:	01 c0       	rjmp	.+2      	; 0x5c0e <memset+0x6>
    5c0c:	6d 93       	st	X+, r22
    5c0e:	41 50       	subi	r20, 0x01	; 1
    5c10:	50 40       	sbci	r21, 0x00	; 0
    5c12:	e0 f7       	brcc	.-8      	; 0x5c0c <memset+0x4>
    5c14:	08 95       	ret

00005c16 <strchr>:
    5c16:	fc 01       	movw	r30, r24
    5c18:	81 91       	ld	r24, Z+
    5c1a:	86 17       	cp	r24, r22
    5c1c:	21 f0       	breq	.+8      	; 0x5c26 <strchr+0x10>
    5c1e:	88 23       	and	r24, r24
    5c20:	d9 f7       	brne	.-10     	; 0x5c18 <strchr+0x2>
    5c22:	99 27       	eor	r25, r25
    5c24:	08 95       	ret
    5c26:	31 97       	sbiw	r30, 0x01	; 1
    5c28:	cf 01       	movw	r24, r30
    5c2a:	08 95       	ret

00005c2c <strstr>:
    5c2c:	fb 01       	movw	r30, r22
    5c2e:	51 91       	ld	r21, Z+
    5c30:	55 23       	and	r21, r21
    5c32:	a9 f0       	breq	.+42     	; 0x5c5e <strstr+0x32>
    5c34:	bf 01       	movw	r22, r30
    5c36:	dc 01       	movw	r26, r24
    5c38:	4d 91       	ld	r20, X+
    5c3a:	45 17       	cp	r20, r21
    5c3c:	41 11       	cpse	r20, r1
    5c3e:	e1 f7       	brne	.-8      	; 0x5c38 <strstr+0xc>
    5c40:	59 f4       	brne	.+22     	; 0x5c58 <strstr+0x2c>
    5c42:	cd 01       	movw	r24, r26
    5c44:	01 90       	ld	r0, Z+
    5c46:	00 20       	and	r0, r0
    5c48:	49 f0       	breq	.+18     	; 0x5c5c <strstr+0x30>
    5c4a:	4d 91       	ld	r20, X+
    5c4c:	40 15       	cp	r20, r0
    5c4e:	41 11       	cpse	r20, r1
    5c50:	c9 f3       	breq	.-14     	; 0x5c44 <strstr+0x18>
    5c52:	fb 01       	movw	r30, r22
    5c54:	41 11       	cpse	r20, r1
    5c56:	ef cf       	rjmp	.-34     	; 0x5c36 <strstr+0xa>
    5c58:	81 e0       	ldi	r24, 0x01	; 1
    5c5a:	90 e0       	ldi	r25, 0x00	; 0
    5c5c:	01 97       	sbiw	r24, 0x01	; 1
    5c5e:	08 95       	ret

00005c60 <strtok_r>:
    5c60:	fa 01       	movw	r30, r20
    5c62:	a1 91       	ld	r26, Z+
    5c64:	b0 81       	ld	r27, Z
    5c66:	00 97       	sbiw	r24, 0x00	; 0
    5c68:	19 f4       	brne	.+6      	; 0x5c70 <strtok_r+0x10>
    5c6a:	10 97       	sbiw	r26, 0x00	; 0
    5c6c:	e1 f0       	breq	.+56     	; 0x5ca6 <strtok_r+0x46>
    5c6e:	cd 01       	movw	r24, r26
    5c70:	dc 01       	movw	r26, r24
    5c72:	cd 01       	movw	r24, r26
    5c74:	0d 90       	ld	r0, X+
    5c76:	00 20       	and	r0, r0
    5c78:	11 f4       	brne	.+4      	; 0x5c7e <strtok_r+0x1e>
    5c7a:	c0 01       	movw	r24, r0
    5c7c:	13 c0       	rjmp	.+38     	; 0x5ca4 <strtok_r+0x44>
    5c7e:	fb 01       	movw	r30, r22
    5c80:	21 91       	ld	r18, Z+
    5c82:	22 23       	and	r18, r18
    5c84:	19 f0       	breq	.+6      	; 0x5c8c <strtok_r+0x2c>
    5c86:	20 15       	cp	r18, r0
    5c88:	d9 f7       	brne	.-10     	; 0x5c80 <strtok_r+0x20>
    5c8a:	f3 cf       	rjmp	.-26     	; 0x5c72 <strtok_r+0x12>
    5c8c:	fb 01       	movw	r30, r22
    5c8e:	21 91       	ld	r18, Z+
    5c90:	20 15       	cp	r18, r0
    5c92:	19 f4       	brne	.+6      	; 0x5c9a <strtok_r+0x3a>
    5c94:	1e 92       	st	-X, r1
    5c96:	11 96       	adiw	r26, 0x01	; 1
    5c98:	06 c0       	rjmp	.+12     	; 0x5ca6 <strtok_r+0x46>
    5c9a:	22 23       	and	r18, r18
    5c9c:	c1 f7       	brne	.-16     	; 0x5c8e <strtok_r+0x2e>
    5c9e:	0d 90       	ld	r0, X+
    5ca0:	00 20       	and	r0, r0
    5ca2:	a1 f7       	brne	.-24     	; 0x5c8c <strtok_r+0x2c>
    5ca4:	d0 01       	movw	r26, r0
    5ca6:	fa 01       	movw	r30, r20
    5ca8:	a1 93       	st	Z+, r26
    5caa:	b0 83       	st	Z, r27
    5cac:	08 95       	ret

00005cae <__itoa_ncheck>:
    5cae:	bb 27       	eor	r27, r27
    5cb0:	4a 30       	cpi	r20, 0x0A	; 10
    5cb2:	31 f4       	brne	.+12     	; 0x5cc0 <__itoa_ncheck+0x12>
    5cb4:	99 23       	and	r25, r25
    5cb6:	22 f4       	brpl	.+8      	; 0x5cc0 <__itoa_ncheck+0x12>
    5cb8:	bd e2       	ldi	r27, 0x2D	; 45
    5cba:	90 95       	com	r25
    5cbc:	81 95       	neg	r24
    5cbe:	9f 4f       	sbci	r25, 0xFF	; 255
    5cc0:	0c 94 6b 2e 	jmp	0x5cd6	; 0x5cd6 <__utoa_common>

00005cc4 <__mulhi_const_10>:
    5cc4:	7a e0       	ldi	r23, 0x0A	; 10
    5cc6:	97 9f       	mul	r25, r23
    5cc8:	90 2d       	mov	r25, r0
    5cca:	87 9f       	mul	r24, r23
    5ccc:	80 2d       	mov	r24, r0
    5cce:	91 0d       	add	r25, r1
    5cd0:	11 24       	eor	r1, r1
    5cd2:	08 95       	ret

00005cd4 <__utoa_ncheck>:
    5cd4:	bb 27       	eor	r27, r27

00005cd6 <__utoa_common>:
    5cd6:	fb 01       	movw	r30, r22
    5cd8:	55 27       	eor	r21, r21
    5cda:	aa 27       	eor	r26, r26
    5cdc:	88 0f       	add	r24, r24
    5cde:	99 1f       	adc	r25, r25
    5ce0:	aa 1f       	adc	r26, r26
    5ce2:	a4 17       	cp	r26, r20
    5ce4:	10 f0       	brcs	.+4      	; 0x5cea <__utoa_common+0x14>
    5ce6:	a4 1b       	sub	r26, r20
    5ce8:	83 95       	inc	r24
    5cea:	50 51       	subi	r21, 0x10	; 16
    5cec:	b9 f7       	brne	.-18     	; 0x5cdc <__utoa_common+0x6>
    5cee:	a0 5d       	subi	r26, 0xD0	; 208
    5cf0:	aa 33       	cpi	r26, 0x3A	; 58
    5cf2:	08 f0       	brcs	.+2      	; 0x5cf6 <__utoa_common+0x20>
    5cf4:	a9 5d       	subi	r26, 0xD9	; 217
    5cf6:	a1 93       	st	Z+, r26
    5cf8:	00 97       	sbiw	r24, 0x00	; 0
    5cfa:	79 f7       	brne	.-34     	; 0x5cda <__utoa_common+0x4>
    5cfc:	b1 11       	cpse	r27, r1
    5cfe:	b1 93       	st	Z+, r27
    5d00:	11 92       	st	Z+, r1
    5d02:	cb 01       	movw	r24, r22
    5d04:	0c 94 bf 30 	jmp	0x617e	; 0x617e <strrev>

00005d08 <sprintf>:
    5d08:	ae e0       	ldi	r26, 0x0E	; 14
    5d0a:	b0 e0       	ldi	r27, 0x00	; 0
    5d0c:	ea e8       	ldi	r30, 0x8A	; 138
    5d0e:	fe e2       	ldi	r31, 0x2E	; 46
    5d10:	0c 94 d0 31 	jmp	0x63a0	; 0x63a0 <__prologue_saves__+0x1c>
    5d14:	0d 89       	ldd	r16, Y+21	; 0x15
    5d16:	1e 89       	ldd	r17, Y+22	; 0x16
    5d18:	86 e0       	ldi	r24, 0x06	; 6
    5d1a:	8c 83       	std	Y+4, r24	; 0x04
    5d1c:	1a 83       	std	Y+2, r17	; 0x02
    5d1e:	09 83       	std	Y+1, r16	; 0x01
    5d20:	8f ef       	ldi	r24, 0xFF	; 255
    5d22:	9f e7       	ldi	r25, 0x7F	; 127
    5d24:	9e 83       	std	Y+6, r25	; 0x06
    5d26:	8d 83       	std	Y+5, r24	; 0x05
    5d28:	ae 01       	movw	r20, r28
    5d2a:	47 5e       	subi	r20, 0xE7	; 231
    5d2c:	5f 4f       	sbci	r21, 0xFF	; 255
    5d2e:	6f 89       	ldd	r22, Y+23	; 0x17
    5d30:	78 8d       	ldd	r23, Y+24	; 0x18
    5d32:	ce 01       	movw	r24, r28
    5d34:	01 96       	adiw	r24, 0x01	; 1
    5d36:	0e 94 ca 2e 	call	0x5d94	; 0x5d94 <vfprintf>
    5d3a:	2f 81       	ldd	r18, Y+7	; 0x07
    5d3c:	38 85       	ldd	r19, Y+8	; 0x08
    5d3e:	02 0f       	add	r16, r18
    5d40:	13 1f       	adc	r17, r19
    5d42:	f8 01       	movw	r30, r16
    5d44:	10 82       	st	Z, r1
    5d46:	2e 96       	adiw	r28, 0x0e	; 14
    5d48:	e4 e0       	ldi	r30, 0x04	; 4
    5d4a:	0c 94 ec 31 	jmp	0x63d8	; 0x63d8 <__epilogue_restores__+0x1c>

00005d4e <sprintf_P>:
    5d4e:	ae e0       	ldi	r26, 0x0E	; 14
    5d50:	b0 e0       	ldi	r27, 0x00	; 0
    5d52:	ed ea       	ldi	r30, 0xAD	; 173
    5d54:	fe e2       	ldi	r31, 0x2E	; 46
    5d56:	0c 94 d0 31 	jmp	0x63a0	; 0x63a0 <__prologue_saves__+0x1c>
    5d5a:	0d 89       	ldd	r16, Y+21	; 0x15
    5d5c:	1e 89       	ldd	r17, Y+22	; 0x16
    5d5e:	8e e0       	ldi	r24, 0x0E	; 14
    5d60:	8c 83       	std	Y+4, r24	; 0x04
    5d62:	1a 83       	std	Y+2, r17	; 0x02
    5d64:	09 83       	std	Y+1, r16	; 0x01
    5d66:	8f ef       	ldi	r24, 0xFF	; 255
    5d68:	9f e7       	ldi	r25, 0x7F	; 127
    5d6a:	9e 83       	std	Y+6, r25	; 0x06
    5d6c:	8d 83       	std	Y+5, r24	; 0x05
    5d6e:	ae 01       	movw	r20, r28
    5d70:	47 5e       	subi	r20, 0xE7	; 231
    5d72:	5f 4f       	sbci	r21, 0xFF	; 255
    5d74:	6f 89       	ldd	r22, Y+23	; 0x17
    5d76:	78 8d       	ldd	r23, Y+24	; 0x18
    5d78:	ce 01       	movw	r24, r28
    5d7a:	01 96       	adiw	r24, 0x01	; 1
    5d7c:	0e 94 ca 2e 	call	0x5d94	; 0x5d94 <vfprintf>
    5d80:	2f 81       	ldd	r18, Y+7	; 0x07
    5d82:	38 85       	ldd	r19, Y+8	; 0x08
    5d84:	02 0f       	add	r16, r18
    5d86:	13 1f       	adc	r17, r19
    5d88:	f8 01       	movw	r30, r16
    5d8a:	10 82       	st	Z, r1
    5d8c:	2e 96       	adiw	r28, 0x0e	; 14
    5d8e:	e4 e0       	ldi	r30, 0x04	; 4
    5d90:	0c 94 ec 31 	jmp	0x63d8	; 0x63d8 <__epilogue_restores__+0x1c>

00005d94 <vfprintf>:
    5d94:	af e0       	ldi	r26, 0x0F	; 15
    5d96:	b0 e0       	ldi	r27, 0x00	; 0
    5d98:	e0 ed       	ldi	r30, 0xD0	; 208
    5d9a:	fe e2       	ldi	r31, 0x2E	; 46
    5d9c:	0c 94 c2 31 	jmp	0x6384	; 0x6384 <__prologue_saves__>
    5da0:	7c 01       	movw	r14, r24
    5da2:	3b 01       	movw	r6, r22
    5da4:	8a 01       	movw	r16, r20
    5da6:	dc 01       	movw	r26, r24
    5da8:	17 96       	adiw	r26, 0x07	; 7
    5daa:	1c 92       	st	X, r1
    5dac:	1e 92       	st	-X, r1
    5dae:	16 97       	sbiw	r26, 0x06	; 6
    5db0:	13 96       	adiw	r26, 0x03	; 3
    5db2:	8c 91       	ld	r24, X
    5db4:	81 ff       	sbrs	r24, 1
    5db6:	be c1       	rjmp	.+892    	; 0x6134 <vfprintf+0x3a0>
    5db8:	9a e0       	ldi	r25, 0x0A	; 10
    5dba:	29 2e       	mov	r2, r25
    5dbc:	fe 01       	movw	r30, r28
    5dbe:	31 96       	adiw	r30, 0x01	; 1
    5dc0:	4f 01       	movw	r8, r30
    5dc2:	d7 01       	movw	r26, r14
    5dc4:	13 96       	adiw	r26, 0x03	; 3
    5dc6:	9c 91       	ld	r25, X
    5dc8:	f3 01       	movw	r30, r6
    5dca:	93 fd       	sbrc	r25, 3
    5dcc:	85 91       	lpm	r24, Z+
    5dce:	93 ff       	sbrs	r25, 3
    5dd0:	81 91       	ld	r24, Z+
    5dd2:	3f 01       	movw	r6, r30
    5dd4:	88 23       	and	r24, r24
    5dd6:	09 f4       	brne	.+2      	; 0x5dda <vfprintf+0x46>
    5dd8:	44 c1       	rjmp	.+648    	; 0x6062 <vfprintf+0x2ce>
    5dda:	85 32       	cpi	r24, 0x25	; 37
    5ddc:	39 f4       	brne	.+14     	; 0x5dec <vfprintf+0x58>
    5dde:	93 fd       	sbrc	r25, 3
    5de0:	85 91       	lpm	r24, Z+
    5de2:	93 ff       	sbrs	r25, 3
    5de4:	81 91       	ld	r24, Z+
    5de6:	3f 01       	movw	r6, r30
    5de8:	85 32       	cpi	r24, 0x25	; 37
    5dea:	29 f4       	brne	.+10     	; 0x5df6 <vfprintf+0x62>
    5dec:	b7 01       	movw	r22, r14
    5dee:	90 e0       	ldi	r25, 0x00	; 0
    5df0:	0e 94 cf 30 	call	0x619e	; 0x619e <fputc>
    5df4:	e6 cf       	rjmp	.-52     	; 0x5dc2 <vfprintf+0x2e>
    5df6:	b1 2c       	mov	r11, r1
    5df8:	41 2c       	mov	r4, r1
    5dfa:	51 2c       	mov	r5, r1
    5dfc:	bf e1       	ldi	r27, 0x1F	; 31
    5dfe:	b5 15       	cp	r27, r5
    5e00:	38 f0       	brcs	.+14     	; 0x5e10 <vfprintf+0x7c>
    5e02:	8b 32       	cpi	r24, 0x2B	; 43
    5e04:	09 f1       	breq	.+66     	; 0x5e48 <vfprintf+0xb4>
    5e06:	88 f4       	brcc	.+34     	; 0x5e2a <vfprintf+0x96>
    5e08:	80 32       	cpi	r24, 0x20	; 32
    5e0a:	01 f1       	breq	.+64     	; 0x5e4c <vfprintf+0xb8>
    5e0c:	83 32       	cpi	r24, 0x23	; 35
    5e0e:	21 f1       	breq	.+72     	; 0x5e58 <vfprintf+0xc4>
    5e10:	57 fc       	sbrc	r5, 7
    5e12:	3a c0       	rjmp	.+116    	; 0x5e88 <vfprintf+0xf4>
    5e14:	20 ed       	ldi	r18, 0xD0	; 208
    5e16:	28 0f       	add	r18, r24
    5e18:	2a 30       	cpi	r18, 0x0A	; 10
    5e1a:	40 f5       	brcc	.+80     	; 0x5e6c <vfprintf+0xd8>
    5e1c:	56 fe       	sbrs	r5, 6
    5e1e:	1f c0       	rjmp	.+62     	; 0x5e5e <vfprintf+0xca>
    5e20:	b2 9c       	mul	r11, r2
    5e22:	20 0d       	add	r18, r0
    5e24:	11 24       	eor	r1, r1
    5e26:	b2 2e       	mov	r11, r18
    5e28:	06 c0       	rjmp	.+12     	; 0x5e36 <vfprintf+0xa2>
    5e2a:	8d 32       	cpi	r24, 0x2D	; 45
    5e2c:	91 f0       	breq	.+36     	; 0x5e52 <vfprintf+0xbe>
    5e2e:	80 33       	cpi	r24, 0x30	; 48
    5e30:	79 f7       	brne	.-34     	; 0x5e10 <vfprintf+0x7c>
    5e32:	68 94       	set
    5e34:	50 f8       	bld	r5, 0
    5e36:	f3 01       	movw	r30, r6
    5e38:	93 fd       	sbrc	r25, 3
    5e3a:	85 91       	lpm	r24, Z+
    5e3c:	93 ff       	sbrs	r25, 3
    5e3e:	81 91       	ld	r24, Z+
    5e40:	3f 01       	movw	r6, r30
    5e42:	81 11       	cpse	r24, r1
    5e44:	db cf       	rjmp	.-74     	; 0x5dfc <vfprintf+0x68>
    5e46:	20 c0       	rjmp	.+64     	; 0x5e88 <vfprintf+0xf4>
    5e48:	68 94       	set
    5e4a:	51 f8       	bld	r5, 1
    5e4c:	68 94       	set
    5e4e:	52 f8       	bld	r5, 2
    5e50:	f2 cf       	rjmp	.-28     	; 0x5e36 <vfprintf+0xa2>
    5e52:	68 94       	set
    5e54:	53 f8       	bld	r5, 3
    5e56:	ef cf       	rjmp	.-34     	; 0x5e36 <vfprintf+0xa2>
    5e58:	68 94       	set
    5e5a:	54 f8       	bld	r5, 4
    5e5c:	ec cf       	rjmp	.-40     	; 0x5e36 <vfprintf+0xa2>
    5e5e:	42 9c       	mul	r4, r2
    5e60:	20 0d       	add	r18, r0
    5e62:	11 24       	eor	r1, r1
    5e64:	42 2e       	mov	r4, r18
    5e66:	68 94       	set
    5e68:	55 f8       	bld	r5, 5
    5e6a:	e5 cf       	rjmp	.-54     	; 0x5e36 <vfprintf+0xa2>
    5e6c:	8e 32       	cpi	r24, 0x2E	; 46
    5e6e:	29 f4       	brne	.+10     	; 0x5e7a <vfprintf+0xe6>
    5e70:	56 fc       	sbrc	r5, 6
    5e72:	f7 c0       	rjmp	.+494    	; 0x6062 <vfprintf+0x2ce>
    5e74:	68 94       	set
    5e76:	56 f8       	bld	r5, 6
    5e78:	de cf       	rjmp	.-68     	; 0x5e36 <vfprintf+0xa2>
    5e7a:	8c 36       	cpi	r24, 0x6C	; 108
    5e7c:	19 f4       	brne	.+6      	; 0x5e84 <vfprintf+0xf0>
    5e7e:	68 94       	set
    5e80:	57 f8       	bld	r5, 7
    5e82:	d9 cf       	rjmp	.-78     	; 0x5e36 <vfprintf+0xa2>
    5e84:	88 36       	cpi	r24, 0x68	; 104
    5e86:	b9 f2       	breq	.-82     	; 0x5e36 <vfprintf+0xa2>
    5e88:	98 2f       	mov	r25, r24
    5e8a:	9f 7d       	andi	r25, 0xDF	; 223
    5e8c:	95 54       	subi	r25, 0x45	; 69
    5e8e:	93 30       	cpi	r25, 0x03	; 3
    5e90:	c0 f0       	brcs	.+48     	; 0x5ec2 <vfprintf+0x12e>
    5e92:	83 36       	cpi	r24, 0x63	; 99
    5e94:	81 f1       	breq	.+96     	; 0x5ef6 <vfprintf+0x162>
    5e96:	83 37       	cpi	r24, 0x73	; 115
    5e98:	a1 f1       	breq	.+104    	; 0x5f02 <vfprintf+0x16e>
    5e9a:	83 35       	cpi	r24, 0x53	; 83
    5e9c:	09 f0       	breq	.+2      	; 0x5ea0 <vfprintf+0x10c>
    5e9e:	5b c0       	rjmp	.+182    	; 0x5f56 <vfprintf+0x1c2>
    5ea0:	d8 01       	movw	r26, r16
    5ea2:	cd 90       	ld	r12, X+
    5ea4:	dd 90       	ld	r13, X+
    5ea6:	8d 01       	movw	r16, r26
    5ea8:	6b 2d       	mov	r22, r11
    5eaa:	70 e0       	ldi	r23, 0x00	; 0
    5eac:	56 fc       	sbrc	r5, 6
    5eae:	02 c0       	rjmp	.+4      	; 0x5eb4 <vfprintf+0x120>
    5eb0:	6f ef       	ldi	r22, 0xFF	; 255
    5eb2:	7f ef       	ldi	r23, 0xFF	; 255
    5eb4:	c6 01       	movw	r24, r12
    5eb6:	0e 94 a0 30 	call	0x6140	; 0x6140 <strnlen_P>
    5eba:	5c 01       	movw	r10, r24
    5ebc:	68 94       	set
    5ebe:	57 f8       	bld	r5, 7
    5ec0:	0a c0       	rjmp	.+20     	; 0x5ed6 <vfprintf+0x142>
    5ec2:	0c 5f       	subi	r16, 0xFC	; 252
    5ec4:	1f 4f       	sbci	r17, 0xFF	; 255
    5ec6:	ef e3       	ldi	r30, 0x3F	; 63
    5ec8:	e9 83       	std	Y+1, r30	; 0x01
    5eca:	aa 24       	eor	r10, r10
    5ecc:	a3 94       	inc	r10
    5ece:	b1 2c       	mov	r11, r1
    5ed0:	64 01       	movw	r12, r8
    5ed2:	e8 94       	clt
    5ed4:	57 f8       	bld	r5, 7
    5ed6:	53 fe       	sbrs	r5, 3
    5ed8:	29 c0       	rjmp	.+82     	; 0x5f2c <vfprintf+0x198>
    5eda:	34 2c       	mov	r3, r4
    5edc:	a1 14       	cp	r10, r1
    5ede:	b1 04       	cpc	r11, r1
    5ee0:	51 f5       	brne	.+84     	; 0x5f36 <vfprintf+0x1a2>
    5ee2:	33 20       	and	r3, r3
    5ee4:	09 f4       	brne	.+2      	; 0x5ee8 <vfprintf+0x154>
    5ee6:	6d cf       	rjmp	.-294    	; 0x5dc2 <vfprintf+0x2e>
    5ee8:	b7 01       	movw	r22, r14
    5eea:	80 e2       	ldi	r24, 0x20	; 32
    5eec:	90 e0       	ldi	r25, 0x00	; 0
    5eee:	0e 94 cf 30 	call	0x619e	; 0x619e <fputc>
    5ef2:	3a 94       	dec	r3
    5ef4:	f6 cf       	rjmp	.-20     	; 0x5ee2 <vfprintf+0x14e>
    5ef6:	d8 01       	movw	r26, r16
    5ef8:	8c 91       	ld	r24, X
    5efa:	89 83       	std	Y+1, r24	; 0x01
    5efc:	0e 5f       	subi	r16, 0xFE	; 254
    5efe:	1f 4f       	sbci	r17, 0xFF	; 255
    5f00:	e4 cf       	rjmp	.-56     	; 0x5eca <vfprintf+0x136>
    5f02:	f8 01       	movw	r30, r16
    5f04:	c1 90       	ld	r12, Z+
    5f06:	d1 90       	ld	r13, Z+
    5f08:	8f 01       	movw	r16, r30
    5f0a:	6b 2d       	mov	r22, r11
    5f0c:	70 e0       	ldi	r23, 0x00	; 0
    5f0e:	56 fc       	sbrc	r5, 6
    5f10:	02 c0       	rjmp	.+4      	; 0x5f16 <vfprintf+0x182>
    5f12:	6f ef       	ldi	r22, 0xFF	; 255
    5f14:	7f ef       	ldi	r23, 0xFF	; 255
    5f16:	c6 01       	movw	r24, r12
    5f18:	0e 94 b4 30 	call	0x6168	; 0x6168 <strnlen>
    5f1c:	5c 01       	movw	r10, r24
    5f1e:	d9 cf       	rjmp	.-78     	; 0x5ed2 <vfprintf+0x13e>
    5f20:	b7 01       	movw	r22, r14
    5f22:	80 e2       	ldi	r24, 0x20	; 32
    5f24:	90 e0       	ldi	r25, 0x00	; 0
    5f26:	0e 94 cf 30 	call	0x619e	; 0x619e <fputc>
    5f2a:	4a 94       	dec	r4
    5f2c:	4a 14       	cp	r4, r10
    5f2e:	1b 04       	cpc	r1, r11
    5f30:	09 f0       	breq	.+2      	; 0x5f34 <vfprintf+0x1a0>
    5f32:	b0 f7       	brcc	.-20     	; 0x5f20 <vfprintf+0x18c>
    5f34:	d2 cf       	rjmp	.-92     	; 0x5eda <vfprintf+0x146>
    5f36:	f6 01       	movw	r30, r12
    5f38:	57 fc       	sbrc	r5, 7
    5f3a:	85 91       	lpm	r24, Z+
    5f3c:	57 fe       	sbrs	r5, 7
    5f3e:	81 91       	ld	r24, Z+
    5f40:	6f 01       	movw	r12, r30
    5f42:	b7 01       	movw	r22, r14
    5f44:	90 e0       	ldi	r25, 0x00	; 0
    5f46:	0e 94 cf 30 	call	0x619e	; 0x619e <fputc>
    5f4a:	31 10       	cpse	r3, r1
    5f4c:	3a 94       	dec	r3
    5f4e:	b1 e0       	ldi	r27, 0x01	; 1
    5f50:	ab 1a       	sub	r10, r27
    5f52:	b1 08       	sbc	r11, r1
    5f54:	c3 cf       	rjmp	.-122    	; 0x5edc <vfprintf+0x148>
    5f56:	84 36       	cpi	r24, 0x64	; 100
    5f58:	19 f0       	breq	.+6      	; 0x5f60 <vfprintf+0x1cc>
    5f5a:	89 36       	cpi	r24, 0x69	; 105
    5f5c:	09 f0       	breq	.+2      	; 0x5f60 <vfprintf+0x1cc>
    5f5e:	71 c0       	rjmp	.+226    	; 0x6042 <vfprintf+0x2ae>
    5f60:	f8 01       	movw	r30, r16
    5f62:	57 fe       	sbrs	r5, 7
    5f64:	67 c0       	rjmp	.+206    	; 0x6034 <vfprintf+0x2a0>
    5f66:	61 91       	ld	r22, Z+
    5f68:	71 91       	ld	r23, Z+
    5f6a:	81 91       	ld	r24, Z+
    5f6c:	91 91       	ld	r25, Z+
    5f6e:	8f 01       	movw	r16, r30
    5f70:	e5 2d       	mov	r30, r5
    5f72:	ef 76       	andi	r30, 0x6F	; 111
    5f74:	de 2e       	mov	r13, r30
    5f76:	97 ff       	sbrs	r25, 7
    5f78:	09 c0       	rjmp	.+18     	; 0x5f8c <vfprintf+0x1f8>
    5f7a:	90 95       	com	r25
    5f7c:	80 95       	com	r24
    5f7e:	70 95       	com	r23
    5f80:	61 95       	neg	r22
    5f82:	7f 4f       	sbci	r23, 0xFF	; 255
    5f84:	8f 4f       	sbci	r24, 0xFF	; 255
    5f86:	9f 4f       	sbci	r25, 0xFF	; 255
    5f88:	68 94       	set
    5f8a:	d7 f8       	bld	r13, 7
    5f8c:	2a e0       	ldi	r18, 0x0A	; 10
    5f8e:	30 e0       	ldi	r19, 0x00	; 0
    5f90:	a4 01       	movw	r20, r8
    5f92:	0e 94 ff 30 	call	0x61fe	; 0x61fe <__ultoa_invert>
    5f96:	c8 2e       	mov	r12, r24
    5f98:	c8 18       	sub	r12, r8
    5f9a:	ac 2c       	mov	r10, r12
    5f9c:	5d 2c       	mov	r5, r13
    5f9e:	d6 fe       	sbrs	r13, 6
    5fa0:	0c c0       	rjmp	.+24     	; 0x5fba <vfprintf+0x226>
    5fa2:	e8 94       	clt
    5fa4:	50 f8       	bld	r5, 0
    5fa6:	cb 14       	cp	r12, r11
    5fa8:	40 f4       	brcc	.+16     	; 0x5fba <vfprintf+0x226>
    5faa:	d4 fe       	sbrs	r13, 4
    5fac:	05 c0       	rjmp	.+10     	; 0x5fb8 <vfprintf+0x224>
    5fae:	d2 fc       	sbrc	r13, 2
    5fb0:	03 c0       	rjmp	.+6      	; 0x5fb8 <vfprintf+0x224>
    5fb2:	5d 2d       	mov	r21, r13
    5fb4:	5e 7e       	andi	r21, 0xEE	; 238
    5fb6:	55 2e       	mov	r5, r21
    5fb8:	ab 2c       	mov	r10, r11
    5fba:	54 fe       	sbrs	r5, 4
    5fbc:	93 c0       	rjmp	.+294    	; 0x60e4 <vfprintf+0x350>
    5fbe:	fe 01       	movw	r30, r28
    5fc0:	ec 0d       	add	r30, r12
    5fc2:	f1 1d       	adc	r31, r1
    5fc4:	80 81       	ld	r24, Z
    5fc6:	80 33       	cpi	r24, 0x30	; 48
    5fc8:	09 f0       	breq	.+2      	; 0x5fcc <vfprintf+0x238>
    5fca:	85 c0       	rjmp	.+266    	; 0x60d6 <vfprintf+0x342>
    5fcc:	65 2d       	mov	r22, r5
    5fce:	69 7e       	andi	r22, 0xE9	; 233
    5fd0:	56 2e       	mov	r5, r22
    5fd2:	75 2d       	mov	r23, r5
    5fd4:	78 70       	andi	r23, 0x08	; 8
    5fd6:	37 2e       	mov	r3, r23
    5fd8:	53 fc       	sbrc	r5, 3
    5fda:	93 c0       	rjmp	.+294    	; 0x6102 <vfprintf+0x36e>
    5fdc:	50 fe       	sbrs	r5, 0
    5fde:	8d c0       	rjmp	.+282    	; 0x60fa <vfprintf+0x366>
    5fe0:	bc 2c       	mov	r11, r12
    5fe2:	a4 14       	cp	r10, r4
    5fe4:	10 f4       	brcc	.+4      	; 0x5fea <vfprintf+0x256>
    5fe6:	b4 0c       	add	r11, r4
    5fe8:	ba 18       	sub	r11, r10
    5fea:	54 fe       	sbrs	r5, 4
    5fec:	90 c0       	rjmp	.+288    	; 0x610e <vfprintf+0x37a>
    5fee:	b7 01       	movw	r22, r14
    5ff0:	80 e3       	ldi	r24, 0x30	; 48
    5ff2:	90 e0       	ldi	r25, 0x00	; 0
    5ff4:	0e 94 cf 30 	call	0x619e	; 0x619e <fputc>
    5ff8:	52 fe       	sbrs	r5, 2
    5ffa:	07 c0       	rjmp	.+14     	; 0x600a <vfprintf+0x276>
    5ffc:	88 e7       	ldi	r24, 0x78	; 120
    5ffe:	51 fc       	sbrc	r5, 1
    6000:	88 e5       	ldi	r24, 0x58	; 88
    6002:	90 e0       	ldi	r25, 0x00	; 0
    6004:	b7 01       	movw	r22, r14
    6006:	0e 94 cf 30 	call	0x619e	; 0x619e <fputc>
    600a:	cb 14       	cp	r12, r11
    600c:	08 f4       	brcc	.+2      	; 0x6010 <vfprintf+0x27c>
    600e:	8b c0       	rjmp	.+278    	; 0x6126 <vfprintf+0x392>
    6010:	ca 94       	dec	r12
    6012:	d1 2c       	mov	r13, r1
    6014:	8f ef       	ldi	r24, 0xFF	; 255
    6016:	c8 1a       	sub	r12, r24
    6018:	d8 0a       	sbc	r13, r24
    601a:	c8 0c       	add	r12, r8
    601c:	d9 1c       	adc	r13, r9
    601e:	d6 01       	movw	r26, r12
    6020:	8e 91       	ld	r24, -X
    6022:	6d 01       	movw	r12, r26
    6024:	b7 01       	movw	r22, r14
    6026:	90 e0       	ldi	r25, 0x00	; 0
    6028:	0e 94 cf 30 	call	0x619e	; 0x619e <fputc>
    602c:	8c 14       	cp	r8, r12
    602e:	9d 04       	cpc	r9, r13
    6030:	b1 f7       	brne	.-20     	; 0x601e <vfprintf+0x28a>
    6032:	57 cf       	rjmp	.-338    	; 0x5ee2 <vfprintf+0x14e>
    6034:	61 91       	ld	r22, Z+
    6036:	71 91       	ld	r23, Z+
    6038:	07 2e       	mov	r0, r23
    603a:	00 0c       	add	r0, r0
    603c:	88 0b       	sbc	r24, r24
    603e:	99 0b       	sbc	r25, r25
    6040:	96 cf       	rjmp	.-212    	; 0x5f6e <vfprintf+0x1da>
    6042:	d5 2c       	mov	r13, r5
    6044:	e8 94       	clt
    6046:	d4 f8       	bld	r13, 4
    6048:	2a e0       	ldi	r18, 0x0A	; 10
    604a:	85 37       	cpi	r24, 0x75	; 117
    604c:	29 f1       	breq	.+74     	; 0x6098 <vfprintf+0x304>
    604e:	f5 2d       	mov	r31, r5
    6050:	f9 7f       	andi	r31, 0xF9	; 249
    6052:	df 2e       	mov	r13, r31
    6054:	80 37       	cpi	r24, 0x70	; 112
    6056:	a1 f0       	breq	.+40     	; 0x6080 <vfprintf+0x2ec>
    6058:	58 f4       	brcc	.+22     	; 0x6070 <vfprintf+0x2dc>
    605a:	88 35       	cpi	r24, 0x58	; 88
    605c:	a1 f0       	breq	.+40     	; 0x6086 <vfprintf+0x2f2>
    605e:	8f 36       	cpi	r24, 0x6F	; 111
    6060:	d1 f0       	breq	.+52     	; 0x6096 <vfprintf+0x302>
    6062:	f7 01       	movw	r30, r14
    6064:	86 81       	ldd	r24, Z+6	; 0x06
    6066:	97 81       	ldd	r25, Z+7	; 0x07
    6068:	2f 96       	adiw	r28, 0x0f	; 15
    606a:	e2 e1       	ldi	r30, 0x12	; 18
    606c:	0c 94 de 31 	jmp	0x63bc	; 0x63bc <__epilogue_restores__>
    6070:	88 37       	cpi	r24, 0x78	; 120
    6072:	b9 f7       	brne	.-18     	; 0x6062 <vfprintf+0x2ce>
    6074:	d4 fe       	sbrs	r13, 4
    6076:	02 c0       	rjmp	.+4      	; 0x607c <vfprintf+0x2e8>
    6078:	68 94       	set
    607a:	d2 f8       	bld	r13, 2
    607c:	20 e1       	ldi	r18, 0x10	; 16
    607e:	0c c0       	rjmp	.+24     	; 0x6098 <vfprintf+0x304>
    6080:	68 94       	set
    6082:	d4 f8       	bld	r13, 4
    6084:	f7 cf       	rjmp	.-18     	; 0x6074 <vfprintf+0x2e0>
    6086:	54 fe       	sbrs	r5, 4
    6088:	03 c0       	rjmp	.+6      	; 0x6090 <vfprintf+0x2fc>
    608a:	2f 2f       	mov	r18, r31
    608c:	26 60       	ori	r18, 0x06	; 6
    608e:	d2 2e       	mov	r13, r18
    6090:	20 e1       	ldi	r18, 0x10	; 16
    6092:	32 e0       	ldi	r19, 0x02	; 2
    6094:	02 c0       	rjmp	.+4      	; 0x609a <vfprintf+0x306>
    6096:	28 e0       	ldi	r18, 0x08	; 8
    6098:	30 e0       	ldi	r19, 0x00	; 0
    609a:	f8 01       	movw	r30, r16
    609c:	d7 fe       	sbrs	r13, 7
    609e:	15 c0       	rjmp	.+42     	; 0x60ca <vfprintf+0x336>
    60a0:	41 91       	ld	r20, Z+
    60a2:	51 91       	ld	r21, Z+
    60a4:	61 91       	ld	r22, Z+
    60a6:	71 91       	ld	r23, Z+
    60a8:	4c 87       	std	Y+12, r20	; 0x0c
    60aa:	5d 87       	std	Y+13, r21	; 0x0d
    60ac:	6e 87       	std	Y+14, r22	; 0x0e
    60ae:	7f 87       	std	Y+15, r23	; 0x0f
    60b0:	8f 01       	movw	r16, r30
    60b2:	a4 01       	movw	r20, r8
    60b4:	6c 85       	ldd	r22, Y+12	; 0x0c
    60b6:	7d 85       	ldd	r23, Y+13	; 0x0d
    60b8:	8e 85       	ldd	r24, Y+14	; 0x0e
    60ba:	9f 85       	ldd	r25, Y+15	; 0x0f
    60bc:	0e 94 ff 30 	call	0x61fe	; 0x61fe <__ultoa_invert>
    60c0:	c8 2e       	mov	r12, r24
    60c2:	c8 18       	sub	r12, r8
    60c4:	e8 94       	clt
    60c6:	d7 f8       	bld	r13, 7
    60c8:	68 cf       	rjmp	.-304    	; 0x5f9a <vfprintf+0x206>
    60ca:	81 91       	ld	r24, Z+
    60cc:	91 91       	ld	r25, Z+
    60ce:	ac 01       	movw	r20, r24
    60d0:	70 e0       	ldi	r23, 0x00	; 0
    60d2:	60 e0       	ldi	r22, 0x00	; 0
    60d4:	e9 cf       	rjmp	.-46     	; 0x60a8 <vfprintf+0x314>
    60d6:	52 fc       	sbrc	r5, 2
    60d8:	02 c0       	rjmp	.+4      	; 0x60de <vfprintf+0x34a>
    60da:	a3 94       	inc	r10
    60dc:	7a cf       	rjmp	.-268    	; 0x5fd2 <vfprintf+0x23e>
    60de:	a3 94       	inc	r10
    60e0:	a3 94       	inc	r10
    60e2:	77 cf       	rjmp	.-274    	; 0x5fd2 <vfprintf+0x23e>
    60e4:	85 2d       	mov	r24, r5
    60e6:	86 78       	andi	r24, 0x86	; 134
    60e8:	09 f4       	brne	.+2      	; 0x60ec <vfprintf+0x358>
    60ea:	73 cf       	rjmp	.-282    	; 0x5fd2 <vfprintf+0x23e>
    60ec:	f6 cf       	rjmp	.-20     	; 0x60da <vfprintf+0x346>
    60ee:	b7 01       	movw	r22, r14
    60f0:	80 e2       	ldi	r24, 0x20	; 32
    60f2:	90 e0       	ldi	r25, 0x00	; 0
    60f4:	0e 94 cf 30 	call	0x619e	; 0x619e <fputc>
    60f8:	a3 94       	inc	r10
    60fa:	a4 14       	cp	r10, r4
    60fc:	c0 f3       	brcs	.-16     	; 0x60ee <vfprintf+0x35a>
    60fe:	31 2c       	mov	r3, r1
    6100:	74 cf       	rjmp	.-280    	; 0x5fea <vfprintf+0x256>
    6102:	34 2c       	mov	r3, r4
    6104:	3a 18       	sub	r3, r10
    6106:	a4 14       	cp	r10, r4
    6108:	08 f4       	brcc	.+2      	; 0x610c <vfprintf+0x378>
    610a:	6f cf       	rjmp	.-290    	; 0x5fea <vfprintf+0x256>
    610c:	f8 cf       	rjmp	.-16     	; 0x60fe <vfprintf+0x36a>
    610e:	85 2d       	mov	r24, r5
    6110:	86 78       	andi	r24, 0x86	; 134
    6112:	09 f4       	brne	.+2      	; 0x6116 <vfprintf+0x382>
    6114:	7a cf       	rjmp	.-268    	; 0x600a <vfprintf+0x276>
    6116:	8b e2       	ldi	r24, 0x2B	; 43
    6118:	51 fe       	sbrs	r5, 1
    611a:	80 e2       	ldi	r24, 0x20	; 32
    611c:	57 fc       	sbrc	r5, 7
    611e:	8d e2       	ldi	r24, 0x2D	; 45
    6120:	b7 01       	movw	r22, r14
    6122:	90 e0       	ldi	r25, 0x00	; 0
    6124:	70 cf       	rjmp	.-288    	; 0x6006 <vfprintf+0x272>
    6126:	b7 01       	movw	r22, r14
    6128:	80 e3       	ldi	r24, 0x30	; 48
    612a:	90 e0       	ldi	r25, 0x00	; 0
    612c:	0e 94 cf 30 	call	0x619e	; 0x619e <fputc>
    6130:	ba 94       	dec	r11
    6132:	6b cf       	rjmp	.-298    	; 0x600a <vfprintf+0x276>
    6134:	8f ef       	ldi	r24, 0xFF	; 255
    6136:	9f ef       	ldi	r25, 0xFF	; 255
    6138:	97 cf       	rjmp	.-210    	; 0x6068 <vfprintf+0x2d4>

0000613a <__ctype_isfalse>:
    613a:	99 27       	eor	r25, r25
    613c:	88 27       	eor	r24, r24

0000613e <__ctype_istrue>:
    613e:	08 95       	ret

00006140 <strnlen_P>:
    6140:	fc 01       	movw	r30, r24
    6142:	05 90       	lpm	r0, Z+
    6144:	61 50       	subi	r22, 0x01	; 1
    6146:	70 40       	sbci	r23, 0x00	; 0
    6148:	01 10       	cpse	r0, r1
    614a:	d8 f7       	brcc	.-10     	; 0x6142 <strnlen_P+0x2>
    614c:	80 95       	com	r24
    614e:	90 95       	com	r25
    6150:	8e 0f       	add	r24, r30
    6152:	9f 1f       	adc	r25, r31
    6154:	08 95       	ret

00006156 <memcpy>:
    6156:	fb 01       	movw	r30, r22
    6158:	dc 01       	movw	r26, r24
    615a:	02 c0       	rjmp	.+4      	; 0x6160 <memcpy+0xa>
    615c:	01 90       	ld	r0, Z+
    615e:	0d 92       	st	X+, r0
    6160:	41 50       	subi	r20, 0x01	; 1
    6162:	50 40       	sbci	r21, 0x00	; 0
    6164:	d8 f7       	brcc	.-10     	; 0x615c <memcpy+0x6>
    6166:	08 95       	ret

00006168 <strnlen>:
    6168:	fc 01       	movw	r30, r24
    616a:	61 50       	subi	r22, 0x01	; 1
    616c:	70 40       	sbci	r23, 0x00	; 0
    616e:	01 90       	ld	r0, Z+
    6170:	01 10       	cpse	r0, r1
    6172:	d8 f7       	brcc	.-10     	; 0x616a <strnlen+0x2>
    6174:	80 95       	com	r24
    6176:	90 95       	com	r25
    6178:	8e 0f       	add	r24, r30
    617a:	9f 1f       	adc	r25, r31
    617c:	08 95       	ret

0000617e <strrev>:
    617e:	dc 01       	movw	r26, r24
    6180:	fc 01       	movw	r30, r24
    6182:	67 2f       	mov	r22, r23
    6184:	71 91       	ld	r23, Z+
    6186:	77 23       	and	r23, r23
    6188:	e1 f7       	brne	.-8      	; 0x6182 <strrev+0x4>
    618a:	32 97       	sbiw	r30, 0x02	; 2
    618c:	04 c0       	rjmp	.+8      	; 0x6196 <strrev+0x18>
    618e:	7c 91       	ld	r23, X
    6190:	6d 93       	st	X+, r22
    6192:	70 83       	st	Z, r23
    6194:	62 91       	ld	r22, -Z
    6196:	ae 17       	cp	r26, r30
    6198:	bf 07       	cpc	r27, r31
    619a:	c8 f3       	brcs	.-14     	; 0x618e <strrev+0x10>
    619c:	08 95       	ret

0000619e <fputc>:
    619e:	0f 93       	push	r16
    61a0:	1f 93       	push	r17
    61a2:	cf 93       	push	r28
    61a4:	df 93       	push	r29
    61a6:	18 2f       	mov	r17, r24
    61a8:	09 2f       	mov	r16, r25
    61aa:	eb 01       	movw	r28, r22
    61ac:	8b 81       	ldd	r24, Y+3	; 0x03
    61ae:	81 fd       	sbrc	r24, 1
    61b0:	09 c0       	rjmp	.+18     	; 0x61c4 <fputc+0x26>
    61b2:	1f ef       	ldi	r17, 0xFF	; 255
    61b4:	0f ef       	ldi	r16, 0xFF	; 255
    61b6:	81 2f       	mov	r24, r17
    61b8:	90 2f       	mov	r25, r16
    61ba:	df 91       	pop	r29
    61bc:	cf 91       	pop	r28
    61be:	1f 91       	pop	r17
    61c0:	0f 91       	pop	r16
    61c2:	08 95       	ret
    61c4:	82 ff       	sbrs	r24, 2
    61c6:	14 c0       	rjmp	.+40     	; 0x61f0 <fputc+0x52>
    61c8:	2e 81       	ldd	r18, Y+6	; 0x06
    61ca:	3f 81       	ldd	r19, Y+7	; 0x07
    61cc:	8c 81       	ldd	r24, Y+4	; 0x04
    61ce:	9d 81       	ldd	r25, Y+5	; 0x05
    61d0:	28 17       	cp	r18, r24
    61d2:	39 07       	cpc	r19, r25
    61d4:	3c f4       	brge	.+14     	; 0x61e4 <fputc+0x46>
    61d6:	e8 81       	ld	r30, Y
    61d8:	f9 81       	ldd	r31, Y+1	; 0x01
    61da:	cf 01       	movw	r24, r30
    61dc:	01 96       	adiw	r24, 0x01	; 1
    61de:	99 83       	std	Y+1, r25	; 0x01
    61e0:	88 83       	st	Y, r24
    61e2:	10 83       	st	Z, r17
    61e4:	8e 81       	ldd	r24, Y+6	; 0x06
    61e6:	9f 81       	ldd	r25, Y+7	; 0x07
    61e8:	01 96       	adiw	r24, 0x01	; 1
    61ea:	9f 83       	std	Y+7, r25	; 0x07
    61ec:	8e 83       	std	Y+6, r24	; 0x06
    61ee:	e3 cf       	rjmp	.-58     	; 0x61b6 <fputc+0x18>
    61f0:	e8 85       	ldd	r30, Y+8	; 0x08
    61f2:	f9 85       	ldd	r31, Y+9	; 0x09
    61f4:	81 2f       	mov	r24, r17
    61f6:	09 95       	icall
    61f8:	89 2b       	or	r24, r25
    61fa:	a1 f3       	breq	.-24     	; 0x61e4 <fputc+0x46>
    61fc:	da cf       	rjmp	.-76     	; 0x61b2 <fputc+0x14>

000061fe <__ultoa_invert>:
    61fe:	fa 01       	movw	r30, r20
    6200:	aa 27       	eor	r26, r26
    6202:	28 30       	cpi	r18, 0x08	; 8
    6204:	51 f1       	breq	.+84     	; 0x625a <__ultoa_invert+0x5c>
    6206:	20 31       	cpi	r18, 0x10	; 16
    6208:	81 f1       	breq	.+96     	; 0x626a <__ultoa_invert+0x6c>
    620a:	e8 94       	clt
    620c:	6f 93       	push	r22
    620e:	6e 7f       	andi	r22, 0xFE	; 254
    6210:	6e 5f       	subi	r22, 0xFE	; 254
    6212:	7f 4f       	sbci	r23, 0xFF	; 255
    6214:	8f 4f       	sbci	r24, 0xFF	; 255
    6216:	9f 4f       	sbci	r25, 0xFF	; 255
    6218:	af 4f       	sbci	r26, 0xFF	; 255
    621a:	b1 e0       	ldi	r27, 0x01	; 1
    621c:	3e d0       	rcall	.+124    	; 0x629a <__ultoa_invert+0x9c>
    621e:	b4 e0       	ldi	r27, 0x04	; 4
    6220:	3c d0       	rcall	.+120    	; 0x629a <__ultoa_invert+0x9c>
    6222:	67 0f       	add	r22, r23
    6224:	78 1f       	adc	r23, r24
    6226:	89 1f       	adc	r24, r25
    6228:	9a 1f       	adc	r25, r26
    622a:	a1 1d       	adc	r26, r1
    622c:	68 0f       	add	r22, r24
    622e:	79 1f       	adc	r23, r25
    6230:	8a 1f       	adc	r24, r26
    6232:	91 1d       	adc	r25, r1
    6234:	a1 1d       	adc	r26, r1
    6236:	6a 0f       	add	r22, r26
    6238:	71 1d       	adc	r23, r1
    623a:	81 1d       	adc	r24, r1
    623c:	91 1d       	adc	r25, r1
    623e:	a1 1d       	adc	r26, r1
    6240:	20 d0       	rcall	.+64     	; 0x6282 <__ultoa_invert+0x84>
    6242:	09 f4       	brne	.+2      	; 0x6246 <__ultoa_invert+0x48>
    6244:	68 94       	set
    6246:	3f 91       	pop	r19
    6248:	2a e0       	ldi	r18, 0x0A	; 10
    624a:	26 9f       	mul	r18, r22
    624c:	11 24       	eor	r1, r1
    624e:	30 19       	sub	r19, r0
    6250:	30 5d       	subi	r19, 0xD0	; 208
    6252:	31 93       	st	Z+, r19
    6254:	de f6       	brtc	.-74     	; 0x620c <__ultoa_invert+0xe>
    6256:	cf 01       	movw	r24, r30
    6258:	08 95       	ret
    625a:	46 2f       	mov	r20, r22
    625c:	47 70       	andi	r20, 0x07	; 7
    625e:	40 5d       	subi	r20, 0xD0	; 208
    6260:	41 93       	st	Z+, r20
    6262:	b3 e0       	ldi	r27, 0x03	; 3
    6264:	0f d0       	rcall	.+30     	; 0x6284 <__ultoa_invert+0x86>
    6266:	c9 f7       	brne	.-14     	; 0x625a <__ultoa_invert+0x5c>
    6268:	f6 cf       	rjmp	.-20     	; 0x6256 <__ultoa_invert+0x58>
    626a:	46 2f       	mov	r20, r22
    626c:	4f 70       	andi	r20, 0x0F	; 15
    626e:	40 5d       	subi	r20, 0xD0	; 208
    6270:	4a 33       	cpi	r20, 0x3A	; 58
    6272:	18 f0       	brcs	.+6      	; 0x627a <__ultoa_invert+0x7c>
    6274:	49 5d       	subi	r20, 0xD9	; 217
    6276:	31 fd       	sbrc	r19, 1
    6278:	40 52       	subi	r20, 0x20	; 32
    627a:	41 93       	st	Z+, r20
    627c:	02 d0       	rcall	.+4      	; 0x6282 <__ultoa_invert+0x84>
    627e:	a9 f7       	brne	.-22     	; 0x626a <__ultoa_invert+0x6c>
    6280:	ea cf       	rjmp	.-44     	; 0x6256 <__ultoa_invert+0x58>
    6282:	b4 e0       	ldi	r27, 0x04	; 4
    6284:	a6 95       	lsr	r26
    6286:	97 95       	ror	r25
    6288:	87 95       	ror	r24
    628a:	77 95       	ror	r23
    628c:	67 95       	ror	r22
    628e:	ba 95       	dec	r27
    6290:	c9 f7       	brne	.-14     	; 0x6284 <__ultoa_invert+0x86>
    6292:	00 97       	sbiw	r24, 0x00	; 0
    6294:	61 05       	cpc	r22, r1
    6296:	71 05       	cpc	r23, r1
    6298:	08 95       	ret
    629a:	9b 01       	movw	r18, r22
    629c:	ac 01       	movw	r20, r24
    629e:	0a 2e       	mov	r0, r26
    62a0:	06 94       	lsr	r0
    62a2:	57 95       	ror	r21
    62a4:	47 95       	ror	r20
    62a6:	37 95       	ror	r19
    62a8:	27 95       	ror	r18
    62aa:	ba 95       	dec	r27
    62ac:	c9 f7       	brne	.-14     	; 0x62a0 <__ultoa_invert+0xa2>
    62ae:	62 0f       	add	r22, r18
    62b0:	73 1f       	adc	r23, r19
    62b2:	84 1f       	adc	r24, r20
    62b4:	95 1f       	adc	r25, r21
    62b6:	a0 1d       	adc	r26, r0
    62b8:	08 95       	ret

000062ba <eeprom_read_block>:
    62ba:	dc 01       	movw	r26, r24
    62bc:	cb 01       	movw	r24, r22

000062be <eeprom_read_blraw>:
    62be:	fc 01       	movw	r30, r24
    62c0:	f9 99       	sbic	0x1f, 1	; 31
    62c2:	fe cf       	rjmp	.-4      	; 0x62c0 <eeprom_read_blraw+0x2>
    62c4:	06 c0       	rjmp	.+12     	; 0x62d2 <eeprom_read_blraw+0x14>
    62c6:	f2 bd       	out	0x22, r31	; 34
    62c8:	e1 bd       	out	0x21, r30	; 33
    62ca:	f8 9a       	sbi	0x1f, 0	; 31
    62cc:	31 96       	adiw	r30, 0x01	; 1
    62ce:	00 b4       	in	r0, 0x20	; 32
    62d0:	0d 92       	st	X+, r0
    62d2:	41 50       	subi	r20, 0x01	; 1
    62d4:	50 40       	sbci	r21, 0x00	; 0
    62d6:	b8 f7       	brcc	.-18     	; 0x62c6 <eeprom_read_blraw+0x8>
    62d8:	08 95       	ret

000062da <eeprom_update_block>:
    62da:	dc 01       	movw	r26, r24
    62dc:	a4 0f       	add	r26, r20
    62de:	b5 1f       	adc	r27, r21
    62e0:	41 50       	subi	r20, 0x01	; 1
    62e2:	50 40       	sbci	r21, 0x00	; 0
    62e4:	48 f0       	brcs	.+18     	; 0x62f8 <eeprom_update_block+0x1e>
    62e6:	cb 01       	movw	r24, r22
    62e8:	84 0f       	add	r24, r20
    62ea:	95 1f       	adc	r25, r21
    62ec:	2e 91       	ld	r18, -X
    62ee:	0e 94 7e 31 	call	0x62fc	; 0x62fc <eeprom_update_r18>
    62f2:	41 50       	subi	r20, 0x01	; 1
    62f4:	50 40       	sbci	r21, 0x00	; 0
    62f6:	d0 f7       	brcc	.-12     	; 0x62ec <eeprom_update_block+0x12>
    62f8:	08 95       	ret

000062fa <eeprom_update_byte>:
    62fa:	26 2f       	mov	r18, r22

000062fc <eeprom_update_r18>:
    62fc:	f9 99       	sbic	0x1f, 1	; 31
    62fe:	fe cf       	rjmp	.-4      	; 0x62fc <eeprom_update_r18>
    6300:	92 bd       	out	0x22, r25	; 34
    6302:	81 bd       	out	0x21, r24	; 33
    6304:	f8 9a       	sbi	0x1f, 0	; 31
    6306:	01 97       	sbiw	r24, 0x01	; 1
    6308:	00 b4       	in	r0, 0x20	; 32
    630a:	02 16       	cp	r0, r18
    630c:	39 f0       	breq	.+14     	; 0x631c <eeprom_update_r18+0x20>
    630e:	1f ba       	out	0x1f, r1	; 31
    6310:	20 bd       	out	0x20, r18	; 32
    6312:	0f b6       	in	r0, 0x3f	; 63
    6314:	f8 94       	cli
    6316:	fa 9a       	sbi	0x1f, 2	; 31
    6318:	f9 9a       	sbi	0x1f, 1	; 31
    631a:	0f be       	out	0x3f, r0	; 63
    631c:	08 95       	ret

0000631e <eeprom_write_block>:
    631e:	dc 01       	movw	r26, r24
    6320:	cb 01       	movw	r24, r22
    6322:	03 c0       	rjmp	.+6      	; 0x632a <eeprom_write_block+0xc>
    6324:	2d 91       	ld	r18, X+
    6326:	0e 94 9a 31 	call	0x6334	; 0x6334 <eeprom_write_r18>
    632a:	41 50       	subi	r20, 0x01	; 1
    632c:	50 40       	sbci	r21, 0x00	; 0
    632e:	d0 f7       	brcc	.-12     	; 0x6324 <eeprom_write_block+0x6>
    6330:	08 95       	ret

00006332 <eeprom_write_byte>:
    6332:	26 2f       	mov	r18, r22

00006334 <eeprom_write_r18>:
    6334:	f9 99       	sbic	0x1f, 1	; 31
    6336:	fe cf       	rjmp	.-4      	; 0x6334 <eeprom_write_r18>
    6338:	1f ba       	out	0x1f, r1	; 31
    633a:	92 bd       	out	0x22, r25	; 34
    633c:	81 bd       	out	0x21, r24	; 33
    633e:	20 bd       	out	0x20, r18	; 32
    6340:	0f b6       	in	r0, 0x3f	; 63
    6342:	f8 94       	cli
    6344:	fa 9a       	sbi	0x1f, 2	; 31
    6346:	f9 9a       	sbi	0x1f, 1	; 31
    6348:	0f be       	out	0x3f, r0	; 63
    634a:	01 96       	adiw	r24, 0x01	; 1
    634c:	08 95       	ret

0000634e <__mulsi3>:
    634e:	db 01       	movw	r26, r22
    6350:	8f 93       	push	r24
    6352:	9f 93       	push	r25
    6354:	0e 94 b7 31 	call	0x636e	; 0x636e <__muluhisi3>
    6358:	bf 91       	pop	r27
    635a:	af 91       	pop	r26
    635c:	a2 9f       	mul	r26, r18
    635e:	80 0d       	add	r24, r0
    6360:	91 1d       	adc	r25, r1
    6362:	a3 9f       	mul	r26, r19
    6364:	90 0d       	add	r25, r0
    6366:	b2 9f       	mul	r27, r18
    6368:	90 0d       	add	r25, r0
    636a:	11 24       	eor	r1, r1
    636c:	08 95       	ret

0000636e <__muluhisi3>:
    636e:	0e 94 e2 29 	call	0x53c4	; 0x53c4 <__umulhisi3>
    6372:	a5 9f       	mul	r26, r21
    6374:	90 0d       	add	r25, r0
    6376:	b4 9f       	mul	r27, r20
    6378:	90 0d       	add	r25, r0
    637a:	a4 9f       	mul	r26, r20
    637c:	80 0d       	add	r24, r0
    637e:	91 1d       	adc	r25, r1
    6380:	11 24       	eor	r1, r1
    6382:	08 95       	ret

00006384 <__prologue_saves__>:
    6384:	2f 92       	push	r2
    6386:	3f 92       	push	r3
    6388:	4f 92       	push	r4
    638a:	5f 92       	push	r5
    638c:	6f 92       	push	r6
    638e:	7f 92       	push	r7
    6390:	8f 92       	push	r8
    6392:	9f 92       	push	r9
    6394:	af 92       	push	r10
    6396:	bf 92       	push	r11
    6398:	cf 92       	push	r12
    639a:	df 92       	push	r13
    639c:	ef 92       	push	r14
    639e:	ff 92       	push	r15
    63a0:	0f 93       	push	r16
    63a2:	1f 93       	push	r17
    63a4:	cf 93       	push	r28
    63a6:	df 93       	push	r29
    63a8:	cd b7       	in	r28, 0x3d	; 61
    63aa:	de b7       	in	r29, 0x3e	; 62
    63ac:	ca 1b       	sub	r28, r26
    63ae:	db 0b       	sbc	r29, r27
    63b0:	0f b6       	in	r0, 0x3f	; 63
    63b2:	f8 94       	cli
    63b4:	de bf       	out	0x3e, r29	; 62
    63b6:	0f be       	out	0x3f, r0	; 63
    63b8:	cd bf       	out	0x3d, r28	; 61
    63ba:	09 94       	ijmp

000063bc <__epilogue_restores__>:
    63bc:	2a 88       	ldd	r2, Y+18	; 0x12
    63be:	39 88       	ldd	r3, Y+17	; 0x11
    63c0:	48 88       	ldd	r4, Y+16	; 0x10
    63c2:	5f 84       	ldd	r5, Y+15	; 0x0f
    63c4:	6e 84       	ldd	r6, Y+14	; 0x0e
    63c6:	7d 84       	ldd	r7, Y+13	; 0x0d
    63c8:	8c 84       	ldd	r8, Y+12	; 0x0c
    63ca:	9b 84       	ldd	r9, Y+11	; 0x0b
    63cc:	aa 84       	ldd	r10, Y+10	; 0x0a
    63ce:	b9 84       	ldd	r11, Y+9	; 0x09
    63d0:	c8 84       	ldd	r12, Y+8	; 0x08
    63d2:	df 80       	ldd	r13, Y+7	; 0x07
    63d4:	ee 80       	ldd	r14, Y+6	; 0x06
    63d6:	fd 80       	ldd	r15, Y+5	; 0x05
    63d8:	0c 81       	ldd	r16, Y+4	; 0x04
    63da:	1b 81       	ldd	r17, Y+3	; 0x03
    63dc:	aa 81       	ldd	r26, Y+2	; 0x02
    63de:	b9 81       	ldd	r27, Y+1	; 0x01
    63e0:	ce 0f       	add	r28, r30
    63e2:	d1 1d       	adc	r29, r1
    63e4:	0f b6       	in	r0, 0x3f	; 63
    63e6:	f8 94       	cli
    63e8:	de bf       	out	0x3e, r29	; 62
    63ea:	0f be       	out	0x3f, r0	; 63
    63ec:	cd bf       	out	0x3d, r28	; 61
    63ee:	ed 01       	movw	r28, r26
    63f0:	08 95       	ret

000063f2 <_exit>:
    63f2:	f8 94       	cli

000063f4 <__stop_program>:
    63f4:	ff cf       	rjmp	.-2      	; 0x63f4 <__stop_program>
    63f6:	2c 08       	sbc	r2, r12
    63f8:	74 08       	sbc	r7, r4
    63fa:	7a 08       	sbc	r7, r10
    63fc:	80 08       	sbc	r8, r0
    63fe:	86 08       	sbc	r8, r6
    6400:	8c 08       	sbc	r8, r12
    6402:	92 08       	sbc	r9, r2
    6404:	98 08       	sbc	r9, r8
    6406:	9e 08       	sbc	r9, r14
    6408:	a1 14       	cp	r10, r1
    640a:	7b 14       	cp	r7, r11
    640c:	a3 14       	cp	r10, r3
    640e:	7d 14       	cp	r7, r13
    6410:	7f 14       	cp	r7, r15
    6412:	81 14       	cp	r8, r1
    6414:	85 14       	cp	r8, r5
    6416:	83 14       	cp	r8, r3
